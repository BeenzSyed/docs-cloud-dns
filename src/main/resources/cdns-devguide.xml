<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>

        <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
]>
<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      version="5.0" status="draft">
    <title>Cloud DNS Developer Guide</title>
    <?rax status.bar.text="CONFIDENTIAL"?>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0 BETA</releaseinfo>
        <productname>Cloud DNS</productname>
        <pubdate>2011-06-28</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers interested in developing
                applications using the Rackspace Cloud DNS Application Programming Interface
                    (<abbrev>API</abbrev>). </para>
        </abstract>
    <cover>
        <para>this is a placeholder for the front cover</para>
    </cover>
    <cover>
        <para>this is a placeholder for the back cover</para>
    </cover>
    </info>
    <chapter xml:id="overview">
        <title>Overview</title>
        <para> Rackspace Cloud DNS is a Domain Name System (DNS) available to Rackspace Cloud
            customers. Interactions with Rackspace Cloud DNS occur programmatically via the
            Rackspace Cloud DNS API as described in this Cloud DNS Developer Guide.</para>
        <note>
            <para> DNS record propagation may take up to 15 minutes. </para>
        </note>
        <para>The following figure shows an overview of Cloud DNS Infrastructure:</para>
        <para><inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/Cloud_DNS_Infographic-1.png" contentwidth="6in"/>
                </imageobject>
            </inlinemediaobject></para>
        <para> We welcome feedback, comments, and bug reports at <link
                xlink:href="mailto:dnsbeta@rackspacecloud.com">dnsbeta@rackspacecloud.com</link>. </para>
        <section>
            <title>Intended Audience</title>
            <para> This Guide is intended to assist software developers who want to develop
                applications using the DNS Service API. To use the information provided here, you
                should first have a general understanding of the DNS service. You should also be
                familiar with: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>DNS terminology</para>
                </listitem>
                <listitem>
                    <para>General operating principles of DNS</para>
                </listitem>
                <listitem>
                    <para>ReSTful web services</para>
                </listitem>
                <listitem>
                    <para>HTTP/1.1 conventions</para>
                </listitem>
                <listitem>
                    <para>JSON and/or XML data serialization formats</para>
                </listitem>
            </itemizedlist>
        </section>
        <?hard-pagebreak?>
        <section>
            <title>Document Change History</title>
            <para>This version of the Developer Guide replaces and
            obsoletes all previous versions.  The most recent changes
            are described in the table below:</para>
            <table rules="all">
                <caption>Document Change History</caption>
                <thead>
                    <tr align="center">
                        <td colspan="1">Revision Date</td>
                        <td colspan="4">Summary of Changes</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="1">June 28, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Updated DNS architecture diagram in <xref
                                            linkend="overview"/>.</para>
                                </listitem>
                                <listitem>
                                    <para>Updated all examples to reflect the latest API
                                        changes.</para>
                                </listitem>
                                <listitem>
                                    <para>Updated <xref linkend="subdomain"/> that explains what a
                                        subdomain is.</para>
                                </listitem>
                                <listitem>
                                    <para>Updated <xref linkend="list_domain_details"/> with
                                        information about the <code>showRecords</code> and
                                            <code>showSubdomains</code> parameters that control
                                        which information is returned for records and
                                        subdomains.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="comments"/> that describes how to
                                        use comments for domains and records.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="pagination"/>that describes how
                                        paging works.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="import_domain"/> that describes
                                        how to use import domain to create a domain.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="export_domain"/> that describes
                                        how to use export domain to provide the BIND 9 formatted
                                        contents of the requested domain.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="using_subdomains"/> that
                                        describes how to use subdomains.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="1">May 20, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Added new <xref linkend="sync_asynch_responses"/> that
                                        describes how to use synchronous and asynchronous API
                                        calls.</para>
                                </listitem>
                                <listitem>
                                    <para>Added 404 NOT FOUND error code to all API calls.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="search_domains_w_filters"/> that
                                        describes how to use filtering to search domains.</para>
                                </listitem>
                                <listitem>
                                    <para>Corrected invalid URLs containing <code>localhost</code>
                                        to be valid URLs.</para>
                                </listitem>
                                <listitem>
                                    <para>Removed the following API operations for domains (and
                                        their corresponding examples) that are no longer supported
                                        from <xref linkend="Domains"/>:<itemizedlist
                                            spacing="compact">
                                            <listitem>
                                                <para>
                                                  <code>GET /version</code></para>
                                            </listitem>
                                            <listitem>
                                                <para><code>GET /domains/detail</code></para>
                                            </listitem>
                                            <listitem>
                                                <para><code>PUT
                                                  /domains/records/recordID</code></para>
                                            </listitem>
                                        </itemizedlist></para>
                                </listitem>
                                <listitem>
                                    <para>Removed <code>DNAME</code> records, which are no longer
                                        supported, from List Domains and List Domains Detail
                                        Responses.</para>
                                </listitem>
                                <listitem>
                                    <para>Corrected <xref linkend="create_domains_resp"/> to be a
                                        valid XML example.</para>
                                </listitem>
                                <listitem>
                                    <para>Added notes about Time To Live (TTL) values for
                                        create/modify operations for domains and add/modify
                                        operations for records.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="1">Apr. 27, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Added 201 response code to Create Domains.</para>
                                </listitem>
                                <listitem>
                                    <para>Deleted reference to load balancers from Section
                                        3.2.</para>
                                </listitem>
                                <listitem>
                                    <para>Modified reference to the twitter account rackcloud, which
                                        has been merged with the rackspace twitter account.</para>
                                </listitem>
                                <listitem>
                                    <para>Modified incorrect endpoint ord.dns.api.rackspacecloud.com
                                        to dns.api.rackspacecloud.com.</para>
                                </listitem>
                                <listitem>
                                    <para>Modified incorrect URI
                                        /domains<emphasis>domainId</emphasis> to
                                        /domains/<emphasis>domainId</emphasis>. </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr><tr align="left">
                        <td colspan="1">Apr. 4, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para> Identified authentication endpoints. </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr><tr align="left">
                        <td colspan="1">Mar. 30, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para> Added 406 error code to List Domains. </para>
                                </listitem>
                                <listitem>
                                    <para> Added record ID to code sample for Modify Records.
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr><tr align="left">
                        <td colspan="1">Mar. 21, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para> Initial release for Private Beta. </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section>
            <title>Additional Resources</title>
            <para>You can download the most current versions of other API-related documents from
                    <link xlink:href="http://docs.rackspace.com/api/"
                        >http://docs.rackspace.com/api/</link>. </para>
            <para>For information about Rackspace Cloud products, refer to <link
                    xlink:href="http://www.rackspace.com/cloud/"
                    >http://www.rackspace.com/cloud</link>. This site also offers links to
                Rackspace's official support channels, including knowledge base articles, forums,
                phone, chat, and email. </para>
            <para>You can also follow Rackspace updates and announcements via twitter at <link
                    xlink:href="http://www.twitter.com/rackspace"
                    >http://www.twitter.com/rackspace</link>. </para>
            <para> This API uses standard HTTP 1.1 response codes as documented at <link
                    xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
                    >http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>. </para>
        </section>
    </chapter>
    <chapter>
        <title>Concepts</title>
        <?dbhtml stop-chunking?>
        <para> To use the DNS API effectively, you should understand several key concepts: </para>
        <section>
            <title>DNS</title>
            <para> The Domain Name System (DNS) is a system by which internet domain name-to-address
                and address-to-name resolutions are determined. All domains and their components,
                such as mail servers, utilize DNS to resolve to the appropriate locations. DNS
                servers are usually set up in a master-slave relationship such that failure of the
                master invokes the slave. DNS servers may also be clustered or  replicated such that
                changes made to one DNS server are automatically propagated to other active servers. </para>
            <note>
            <para>
                DNS understands only ASCII, so the Cloud DNS Service provides conversion between UTF-8 and ASCII on all calls into the
                system. 
            </para>
            </note>
        </section>
        <section>
            <title>Domain</title>
            <para> A domain is an entity/container of all DNS-related information containing one or
                more records. </para>
        </section>
        <section xml:id="subdomain">
            <title>Subdomain</title>
            <para>Subdomains are domains within a parent domain, and subdomains cannot be
                registered. Subdomains allow you to delegate domains. Subdomains can themselves have
                subdomains, so third-level, fourth-level, fifth-level, and deeper levels of nesting
                are possible. </para>
        </section>
        <section>
            <title>Record</title>
            <para> A DNS record belongs to a particular domain and is used to specify information
                about the domain. There are several types of DNS records. Each record type contains
                particular information used to describe that record's purpose. Examples include mail
                exchange (MX) records, which specify the mail server for a particular domain, and
                name server (NS) records, which specify the authoritative name servers for a domain. </para>
        </section>
        <section>
            <title>Domain Owner</title>
            <para> The domain owner is the entity that owns the domain information.</para>
        </section>
    </chapter>
    <chapter>
        <title>General API Information</title>
        <para> The DNS Service API is implemented using a ReSTful web service interface. Like other
            products in the Rackspace Cloud suite, the DNS Service shares a common token-based
            authentication system that allows seamless access between products and services. </para>
        <note>
            <para> All requests to authenticate against and operate the service are performed using
                SSL over HTTP (HTTPS) on TCP port 443. </para>
        </note>
        <section>
            <title>Authentication</title>
            <?dbhtml stop-chunking?>
            <para> Each ReST request against the DNS service requires the inclusion of a specific
                authorization token HTTP x-header, defined as <code>X-Auth-Token</code>. Customers
                obtain this token by first using the Rackspace Cloud Authentication Service and
                supplying a valid username and API access key. </para>
            <para> The Rackspace Cloud Authentication Service is a ReSTful web service. It is the
                entry point to all Rackspace Cloud APIs. It is accessible at
                <link xlink:href="https://auth.api.rackspacecloud.com/v1.0">https://auth.api.rackspacecloud.com/v1.0</link>.
            </para>
            <section>
                <title>Request</title>
                <para>
                    To authenticate, you must supply your username and API access key in x-headers:
                </para>
                <para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Use your Rackspace Cloud
                                username as the username for the API. Place it in the
                                <code>X-Auth-User</code> x-header.
                            </para>
                        </listitem>
                        <listitem>
                            <para> Obtain your API access key from the Rackspace Cloud Control
                                Panel in the Your Account | API Access section. Place it in the
                                <code>X-Auth-Key</code> x-header. </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <example>
                    <title>Authentication Request</title>
                    <?dbfo keep-together="always"?>
                    <literallayout class="monospaced">GET /v1.0 HTTP/1.1
Host: auth.api.rackspacecloud.com
X-Auth-User: jdoe
X-Auth-Key: a86850deb2742ec3cb41518e26aa2d89</literallayout>
                </example>
            </section>
            <section>
                <title>Response</title>
                <para> If authentication is successful, an HTTP status <returnvalue>204 (No
                        Content)</returnvalue> is returned with an <code>X-Auth-Token</code> header;
                    additional Cloud Service headers are returned along with
                        <code>X-Auth-Token</code>, but they are not applicable to the DNS service.
                    An HTTP status of <errorcode>401 (Unauthorized)</errorcode> is returned if
                    authentication fails. All operations against the DNS service must include the
                        <code>X-Auth-Token</code> header as noted above.</para>
                <example>
                    <title>Authentication Response</title>
                    <?dbfo keep-together="always"?>
                    <literallayout class="monospaced">HTTP/1.1 204 No Content
Date: Mon, 12 Nov 2007 15:32:21 GMT
Server: Apache
X-Server-Management-Url: https://servers.api.rackspacecloud.com/v1.0/1234
X-Storage-Url: https://storage.clouddrive.com/v1/CloudFS_9c83b-5ed4
X-CDN-Management-Url: https://cdn.clouddrive.com/v1/CloudFS_9c83b-5ed4
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
Content-Length: 0
Content-Type: text/plain; charset=UTF-8</literallayout>
                </example>
                <para>
                    Authentication tokens are typically valid for 24
                    hours. Applications should be designed to
                    re-authenticate after receiving a <errorcode>401
                        (Unauthorized)</errorcode> response.
                </para>
            </section>
        </section>
        <section>
            <title>Service Access/Endpoints</title>
            <para>The DNS service is a regionalized service. DNS is therefore responsible for
                appropriate replication, caching, and overall maintenance of DNS data across
                regional boundaries to other DNS servers.</para>
            <para>To determine which region to operate against, select an endpoint from the table
                below. Replace the sample account ID number, <parameter>1234</parameter>, with your
                actual account number returned as part of the authentication service response.
                    <table rules="all">
                    <caption>Regionalized Service Endpoints</caption>
                    <thead>
                        <tr align="center">
                            <td colspan="1">Region</td>
                            <td colspan="4">Endpoint</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">
                            <td colspan="1">US</td>
                            <td colspan="4"
                                    ><code>https://dns.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                        <tr align="left">
                            <td colspan="1">UK</td>
                            <td colspan="4"
                                    ><code>https://lon.dns.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
        </section>
        <section>
            <title>Request/Response Types</title>
            <para> The DNS API supports both the JSON and XML data serialization formats. The
                request format is specified using the <code>Content-Type</code> header and is
                required for operations that have a request body. The response format can be
                specified in requests either by using the <code>Accept</code> header or by adding an
                <code>.xml</code> or <code>.json</code> extension to the request URI. Note that it is possible for a response
                to be serialized using a format different from the request. If
                no response format is specified, JSON is the default. If conflicting formats are
                specified using both an <code>Accept</code> header and a query extension, the query
                extension takes precedence. </para>
            <table rules="all">
                <caption>Response Formats</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td>Format</td>
                        <td>Accept Header</td>
                        <td>Query Extension</td>
                        <td>Default</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>JSON</td>
                        <td>application/json</td>
                        <td>.json</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>XML</td>
                        <td>application/xml</td>
                        <td>.xml</td>
                        <td>No</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="sync_asynch_responses">
            <title>Synchronous and Asynchronous Responses</title>
            <para> All successful &GET; requests are <emphasis>synchronous</emphasis> calls, since
                they are always retrieving (reading) existing information. With these requests, the
                caller waits until the call returns with the specified code and response body. For
                an example, see <xref linkend="list_domains"/>. </para>
            <para>&PUT;, &POST;, and &DELETE; calls are <emphasis>asynchronous</emphasis>, however,
                since they may take some time to process. Therefore they return 202 ACCEPTED
                responses containing information with a callback URL, which allows the progress,
                status, and/or response information of the operation to be retrieved at a later
                point in time. The asynchronous response body will look similar to the following
                examples, depending on the format requested:</para>
            <example>
                <title>202 ACCEPTED Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">&lt;asyncResponse xmlns="http://docs.rackspacecloud.com/dns/api/v1.0"&gt; 
       &lt;jobId&gt;0062ac6e-3d07-4980-afab-5fd3a806ef4d&lt;/jobId&gt;     
       &lt;callbackUrl&gt;https://dns.api.rackspacecloud.com/v1.0/1234/status/0062ac6e-3d07-4980-afab-5fd3a806ef4d&lt;/callbackUrl&gt;
&lt;/asyncResponse&gt; 
</programlisting>
            </example>
            <example>
                <title>202 ACCEPTED Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">{   
   "asyncResponse" : {     
      "jobId" : "0062ac6e-3d07-4980-afab-5fd3a806ef4d",
      "callbackUrl" : "https://dns.api.rackspacecloud.com/v1.0/1234/status/0062ac6e-3d07-4980-afab-5fd3a806ef4d"
   }  
}</programlisting>
            </example>
            <para>The following table shows the attributes for asynchronous responses:</para>
            <table rules="all">
                <caption>Attributes for Asynchronous Responses</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td colspan="1">Attribute</td>
                        <td colspan="4">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">jobID</td>
                        <td colspan="4">An identifier for the specific request.</td>
                    </tr>
                    <tr>
                        <td colspan="1">callbackUrl</td>
                        <td colspan="4">Resource locator for querying the status of the request.</td>
                    </tr>
                </tbody>
            </table>
            <note>
                <para>The status for asynchronous operations is retained for up to 24 hours.</para>
            </note>
            <para>When a request is made to the callback URL provided and the job is still running,
                another <returnvalue>202</returnvalue> ACCEPTED response is returned with the same
                information as the previous one. If the request is complete, the response will be as
                if the original call returned as normal, without waiting. For example, if a create
                domain request was issued and a 202 asynchronous response was returned, the response
                from querying the callback URL for a completed successful domain creation would be a
                    <returnvalue>200</returnvalue> OK and contain the information for the created
                domain. See <xref linkend="create_domains_resp"/> for a specific example.</para>
            <para>If an error occurs during the processing of the create request, querying the
                callback URL will return the details of the error, as if the original call returned
                the error response. For example, if a validation error occurs during the create
                domain request above, the response from querying the callback URL would be a
                    <returnvalue>400</returnvalue> BAD REQUEST and contain details regarding the
                specific validation error.</para>
            <note>
                <para>If the response from querying a callback URL is a
                        <returnvalue>404</returnvalue> NOT FOUND, the details of the error in the
                    response body will contain information the caller may use to determine whether
                    the specified job itself was not found, or if the response from the original
                    request was a <returnvalue>404</returnvalue> NOT FOUND. </para>
            </note>
            <para>The description of each &PUT;, &POST;, and &DELETE; request identifies the
                response codes that can indicate success or error for that request. For example, see
                the paragraphs in <xref linkend="create_domains"/> immediately below the table for a
                list of the successful and error response codes for the POST /domains
                operation.</para>
        </section>
           <section>
            <title>Content Compression</title>
            <para> Request and response body data may be encoded with gzip compression to accelerate
                interactive performance of API calls and responses. This is controlled using the
                    <code>Accept-Encoding</code> header on the request from the client and indicated
                by the <code>Content-Encoding</code> header in the server response. Unless the
                header is explicitly set, encoding defaults to disabled. </para>
            <table rules="all">
                <caption>Encoding Headers</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td>Header Type</td>
                        <td>Name</td>
                        <td>Value</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>HTTP/1.1 Request</td>
                        <td><code>Accept-Encoding</code></td>
                        <td>gzip</td>
                    </tr>
                    <tr>
                        <td>HTTP/1.1 Response</td>
                        <td><code>Content-Encoding</code></td>
                        <td>gzip</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section>
            <title>Persistent Connections</title>
            <para>
                By default, the API supports persistent connections
                via HTTP/1.1 keepalives.  All connections will be kept
                alive unless the connection header is set to close.
            </para>
            <para>
                To prevent abuse, HTTP sessions have a timeout of 20
                seconds before being closed.
            </para>
            <note>
                <para>
                    The server may close the connection at any time
                    and clients should not rely on this behavior.
                </para>
            </note>
        </section>
        <?hard-pagebreak?>
        <section>
            <title>Limits</title>
            <para>
                All accounts, by default, have a preconfigured set of
                thresholds (or limits) to manage capacity and prevent
                abuse of the system.  The system recognizes two kinds
                of limits: <firstterm>rate limits</firstterm> and
                <firstterm>absolute limits</firstterm>. Rate limits
                are thresholds that are reset after a certain amount
                of time passes. Absolute limits are fixed.
            </para>
            <note>
                <para>
                    If the default limits are too low for your
                    particular application, please contact Rackspace
                    Cloud support to request an increase.  All
                    requests require reasonable justification.
                </para>
            </note>
            <section>
                <title>Rate Limits</title>
                <para> We specify rate limits in terms of both a human-readable wild-card URI and a
                    machine-processable regular expression. The regular expression boundary matcher
                    '^' takes effect after the root URI path. For example, the regular expression
                        ^/v1.0/<parameter>1234</parameter>/domains would match the bolded portion of
                    the following URI: https://dns.api.rackspacecloud.com<emphasis role="bold"
                        >/v1.0/1234/domains</emphasis>. </para>
                <table rules="all">
                    <caption>Default Rate Limits</caption>
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="2">RegEx</td>
                            <td colspan="1">Default</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/v1.0/*</td>
                            <td colspan="2">^/v1.0/.*</td>
                            <td colspan="1">5/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/v1.0/*</td>
                            <td colspan="2">^/v1.0/.*</td>
                            <td colspan="1">100/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/v1.0/*</td>
                            <td colspan="2">^/v1.0/.*</td>
                            <td colspan="1">2/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/v1.0/*</td>
                            <td colspan="2">^/v1.0/.*</td>
                            <td colspan="1">25/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/v1.0/*</td>
                            <td colspan="2">^/v1.0/.*</td>
                            <td colspan="1">5/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/v1.0/*</td>
                            <td colspan="2">^/v1.0/.*</td>
                            <td colspan="1">50/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2">/v1.0/*</td>
                            <td colspan="2">^/v1.0/.*</td>
                            <td colspan="1">2/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2">/v1.0/*</td>
                            <td colspan="2">^/v1.0/.*</td>
                            <td colspan="1">50/second</td>
                        </tr>
                    </tbody>
                </table>
               <para> Rate limits are applied in order relative to the verb, going from least to
                    most specific. For example, although the threshold for &POST; to /v1.0/* is 25
                    per minute, one cannot &POST; to /v1.0/* more than 2 times within a single
                    second because the rate limit for any &POST; is 2 per second. </para>
                <para> If you exceed the thresholds established for your account, a <errorcode>413
                        (Rate Control)</errorcode> HTTP response will be returned with a
                        <code>Reply-After</code> header to notify the client when they can attempt
                    to try again. </para>
            </section>
            <section>
                <title>Absolute Limits</title>
                <para> &POST; and &PUT; calls are limited to the creation or modification of a
                    maximum of 100 entities per call where an entity is defined as a record, domain,
                    or subdomain. For example, when using &POST; <code>/domains</code> to create a
                    new domain with nine subdomains, you could create a maximum of ninety records
                    across the domain and subdomains. This would total 100 entities: 1 domain + 9
                    subdomains + 90 records. Additional records and/or subdomains could be created
                    for the domain in subsequent calls.</para>
            </section>
            </section>
        <section xml:id="comments">
            <title>Comments</title>
            <para> Comments are supported for domains and records and their requests and responses.
                See the examples that follow.</para>
            <example>
                <title>Example Response with Comments: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-example-response-w-comment.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>Example Response with Comments: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-example-response-w-comment.json" parse="text"/></programlisting>
            </example>
            <remark>Mike- ensure that the 2 comment examples match.</remark>
            <para>Notes for comments:<itemizedlist>
                    <listitem>
                        <para>Are limited to 160 characters each</para>
                    </listitem>
                    <listitem>
                        <para>Can be any text characters</para>
                    </listitem>
                    <listitem>
                        <para>Are optional</para>
                    </listitem>
                    <listitem>
                        <para>To remove a comment, set it to the empty string, for example:
                            comment=""</para>
                    </listitem>
                    <listitem>
                        <para>Come back on all <guilabel>GET</guilabel> calls for both domain and
                            records regardless of whether the call is a single or multiple call, and
                            regardless of whether it is a detail or non-detail call</para>
                    </listitem>
                </itemizedlist></para>
            <para>In summary, all create domain and create record(s) and all modify domain and
                modify record(s) calls can take an optional comment (<code>comment="value of
                    comment"</code>). In other words, all these request calls can have an optional
                comment attribute.</para>
        </section>
        <section xml:id="pagination">
            <title>Pagination</title>
            <para> Pagination is the ability to limit the size of the returned data as well as
                retrieve a specified subset of a large data set. Pagination has two key concepts:
                limit and offset. <emphasis>Limit</emphasis> is the restriction on the maximum
                number of items for that type that can be returned. <emphasis>Offset</emphasis> is
                the starting point for the return data. For example, an offset of 50 specifies that
                the items that are returned should start with item number 51 (since the numbering is
                one-based). </para>
            <para>It is important to note that offset <emphasis>must</emphasis> be a multiple of the
                limit (or zero), otherwise a Bad Request Exception will be thrown. Both limit and
                offset are specified via request parameters on the URI. The parameters are named
                    <code>limit</code> and <code>offset</code> respectively, and both apply only to
                &GET; calls. If unspecified, they default to <code>limit=100</code> and
                    <code>offset=0</code>. See the examples that follow.</para>
            <example>
                <title>Examples of Limits and Offsets for Paging Calls</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">
  ....\domains?limit=50              -- returns the first 50 domains, that is: 1 - 50 
  ....\domains?limit=50&amp;offset=50    -- returns the domains 51-100 
  ....\domains?limit=25&amp;offset=50    -- returns the domains 51-75  
  ....\domains?limit=25              -- returns the domains 1-25  
  ....\domains?limit=25&amp;offset=5     -- returns Bad Request Exception; offset must be a multiple of the limit or 0  
  ....\domains?offset=5              -- returns Bad Request Exception; offset must be a multiple of the limit or 0  
  ....\domains?offset=200            -- returns back the 201-300th domains if they exist (default limit of 100 applies) 
  ....\domains                       -- returns the current maximum items allowable (currently 100) 
</programlisting>
            </example>
            <para>Pagination applies only to the calls listed in the following table: </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/</td>
                        <td colspan="3">List all domains manageable by the account specified.
                            Display IDs and names only.</td>
                    </tr>
                
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/?name=<replaceable>domainName</replaceable></td>
                        <td colspan="3">Filter domains by domain name: list all domains manageable
                            by the account specified that match the name domainName. Display IDs and
                            names only.</td>
                    </tr>
               
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<replaceable>domainID</replaceable></td>
                        <td colspan="3">List details of the specified domain. Display all details,
                            including records. Applies to the records and subdomains lists.</td>
                    </tr>
               
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<replaceable>domainID</replaceable>/subdomains</td>
                        <td colspan="3">List domains that are subdomains of the specified
                            domain.</td>
                    </tr>
               
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<replaceable>domainID</replaceable>/records</td>
                        <td colspan="3">List all records configured for the domain. SOA cannot be
                            modified.</td>
                    </tr>
                
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/domains/<replaceable>domainID</replaceable>/records/<replaceable>recordId</replaceable></td>
                        <td colspan="3">List details for a specific record.</td>
                    </tr>
                    
                </tbody>
            </informaltable>
            <para>See the following section for examples of paged List Domains calls.</para>
            <section>
                <title>totalEntries Attribute</title>
                <para>In any paginated returned result, there is a <code>totalEntries</code>
                    attribute representing the total number of entries there are for this item type.
                    If the number of items requested in the &GET; call is less then the total number
                    of items for this type, then there will be pagination links
                        <code>previous</code> and/or <code>next</code>, specifying how to get to the
                    previous or next set of records. </para>
                <note>
                    <para>The <code>previous</code> and/or <code>next</code> link elements are
                        displayed only if there are items available in the corresponding link. See
                        the following examples for details.</para>
                </note>
                <example>
                    <title>List Domains Request with limit: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-pagination-list-domains-limit-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Request with limit:  JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-pagination-list-domains-limit-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Response with totalEntries: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-pagination-list-domains-limit-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Response with totalEntries: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-pagination-list-domains-limit-response.json" parse="text"/></programlisting>
                </example>
                <para> In the previous two response examples, note that <code>totalEntries=95</code>
                    and that a link has been provided to retrieve the next 3 results
                        (<code>limit=3</code>) in the link element identified by the attribute
                        <code>rel="next"</code> (XML) or <code>"rel":"next"</code> (JSON). </para>
                <para>The following example shows links to both previous and next results in the
                    responses, since the request specified to start with the fourth item in the
                    collection (<code>offset=3</code>):</para>
                <example>
                    <title>List Domains Request with limit and offset: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-pagination-list-domains-limit-offset-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Request with limit and offset: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-pagination-list-domains-limit-offset-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Response with Links to previous and next Results:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-pagination-list-domains-limit-offset-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Response with Links to previous and next Results:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-pagination-list-domains-limit-offset-response.json" parse="text"/></programlisting>
                </example>
                <para> In the previous two response examples, note that <code>totalEntries=95</code>
                    and two links have been provided to:<itemizedlist>
                        <listitem>
                            <para>Retrieve the next 3 results (<code>limit=3</code>) in the link
                                element identified by the attribute <code>rel="next"</code> (XML) or
                                    <code>"rel":"next"</code> (JSON)</para>
                        </listitem>
                        <listitem>
                            <para>Retrieve the previous 3 results in the link element identified by
                                the attribute <code>rel="previous"</code> (XML) or
                                    <code>"rel":"previous"</code> (JSON) </para>
                        </listitem>
                    </itemizedlist></para>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>API Operations</title>
        <section xml:id="Domains">
            <title>Domains</title>
            <para> In the following examples, <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID. </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="2">Description</td>
                        <td colspan="3">Example Call</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="2">List all account domains.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/?name=<parameter>domainName</parameter></td>
                        <td colspan="2">Filter domains by domain name: list all domains
                            manageable by the account specified that match the name
                            <parameter>domainName</parameter>. Display IDs and names
                            only.</td>
                        <td colspan="3"
                                    >https://dns.api.rackspacecloud.com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/?name=rtb201104281842.com</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter></td>
                        <td colspan="2">List details for a specific domain. By default this call
                            displays information for records but not subdomains.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<?sbr?><parameter><replaceable>1234</replaceable></parameter>/<?sbr?>domains/<parameter>765437</parameter></td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>?<?sbr?><parameter>showRecords</parameter>=<?sbr?><code>true</code>
                            or
                                <code>false</code>&amp;<?sbr?><parameter>showSubdomains</parameter>=<code>true</code> or<?sbr?>
                            <code>false</code></td>
                        <td colspan="2">List details for a specific domain, using the
                                <parameter>showRecords</parameter> and
                                <parameter>showSubdomains</parameter> parameters that specify
                            whether to request information for records and subdomains.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<?sbr?><parameter><replaceable>1234</replaceable></parameter>/<?sbr?>domains/<parameter>765437</parameter>?<parameter>showRecords</parameter>=<code>true</code><?sbr?>&amp;<parameter>showSubdomains</parameter><?sbr?>=<code>true</code></td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/export</td>
                        <td colspan="2">Export details of the specified domain.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<?sbr?><parameter><replaceable>1234</replaceable></parameter>/<?sbr?>domains/<parameter>765437</parameter>/export</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="2">Create a new domain.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<?sbr?><parameter><replaceable>1234</replaceable></parameter><?sbr?>/domains</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/domains/import</td>
                        <td colspan="2"> Import a new domain with the configuration specified by
                            the request.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/import
                            &lt;domains xmlns="http://docs.rackspacecloud.com/dns/api/v1.0">
                            &lt;domain comment="Optional Domain Comment">
                            &lt;contents>whowhat1021.com. 7000 IN SOA ns.rackspace.com.
                            hostmaster.rackspace.com. (1304406823 7000 7000 1814400 7000)
                            whowhat1021.com. 7000 IN A 72.77.26.210    whowhat1021.com. 7000 IN NS
                            ns.rackspace.com.    whowhat1021.com. 7000 IN NS ns2.rackspace.com.
                            www.whowhat1021.com. 86400 IN CNAME whowhat1021.com.&lt;/contents>
                            &lt;/domain> &lt;/domains> </td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains<?sbr?>/<parameter>domainId</parameter></td>
                        <td colspan="2">Modify the configuration of a domain.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<parameter><replaceable>1234</replaceable></parameter><?sbr?>/domains/<?sbr?><parameter>765437</parameter></td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="2">Modify multiple domains.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2">/domains<?sbr?>/<parameter>domainId</parameter></td>
                        <td colspan="2">Remove a domain.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/<parameter>765437</parameter></td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                            >/domains<?sbr?>/<parameter>domainId</parameter>?<?sbr?>deleteSubdomains=<?sbr?>true</td>
                        <td colspan="2">Remove a domain and all its subdomains.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/<?sbr?>v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/<parameter>765437</parameter>?deleteSubdomains=true</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains?id=<parameter>domainId1</parameter>&amp;<?sbr?>id=<parameter>domainId2</parameter></td>
                        <td colspan="2">Remove multiple domains.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/<?sbr?>v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains?id=<parameter>765437</parameter>&amp;id=<parameter>765438</parameter></td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains?id=<parameter>domainId1</parameter>&amp;<?sbr?>id=<parameter>domainId2</parameter>&amp;<?sbr?>deleteSubdomains=<?sbr?>true</td>
                        <td colspan="2">Remove multiple domains and their subdomains.</td>
                        <td colspan="3"
                                    >https://<?sbr?>dns.<?sbr?>api.<?sbr?>rackspacecloud.<?sbr?>com/<?sbr?>v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains?id=<parameter>765437</parameter>&amp;id=<parameter>765438</parameter>&amp;<?sbr?>deleteSubdomains=<?sbr?>true</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>, and for remove domain(s) also
                    <returnvalue>204</returnvalue>
            </simpara>
            <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                notFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
            <?hard-pagebreak?>
            <section xml:id="list_domains">
                <title>List Domains</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">List all domains manageable by the account specified.
                                Display IDs and names only.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/?name=<parameter>domainName</parameter></td>
                            <td colspan="3">Filter domains by domain name: list all domains
                                manageable by the account specified that match the name
                                    <parameter>domainName</parameter>. Display IDs and names
                                only.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>, <errorcode>406</errorcode>), notFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para> These operations provide a list of all DNS domains manageable by a given
                    account. The resulting list is flat, and does not break the domains down
                    hierarchically by subdomain. All representative domains are included in the
                    list, even if a domain is conceptually a subdomain of another domain in the
                    list.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <example>
                    <title>List Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domains-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domains-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domains Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domains-response.json" parse="text"/></programlisting>
                </example>
                <section xml:id="search_domains_w_filters">
                    <title>Search Domains with Filtering</title>
                    <para> As illustrated by the examples above, the List Domains operation provides
                        a list of all DNS domains manageable by a given account. Filtering the
                        search to limit the results returned can be performed by using the
                            <code>name</code> parameter on the List Domains call. For example,
                            <?sbr?><code>?name=hoola.com</code> matches <code>hoola.com</code> and
                        similar names such as <code>main.hoola.com</code> and
                            <code>sub.hoola.com</code>. </para>
                    <note>
                        <para> The pattern matching always starts from the left side of the search
                            string provided. Therefore <code>?name=hoola.com</code> matches
                                <code>main.hoola.com</code>, however it does not match
                                <code>hoola.com.au</code>. </para>
                    </note>
                    <note>
                        <para>This call returns by default a maximum of 100 items at a time if no
                                <code>limit</code> is specified. To navigate the collection
                            returned, the parameters <code>limit</code> and <code>offset</code> can
                            be set in the URI (for example: <code>limit=10&amp;offset=0</code>), as
                            described in <xref linkend="pagination"/>.</para>
                    </note>
                    <para>In the following example, the specified search name is
                            <code>rtb201104281842.com</code>:</para>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-domain-by-name-request.xml" parse="text"/></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-domain-by-name-request.json" parse="text"/></programlisting>
                    </example>
                    <para><?rax-fo keep-with-next?> The response matches one domain and four
                        subdomains:</para>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-domain-by-name-response.xml" parse="text"/></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-domain-by-name-response.json" parse="text"/></programlisting>
                    </example>
                    <para> In the following example, the specified search name is
                            <code>sub1.rtb201104281842.com</code>:</para>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-name-request.xml" parse="text"/></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-name-request.json" parse="text"/></programlisting>
                    </example>
                    <para>The response matches one domain:</para>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-name-response.xml" parse="text"/></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-name-response.json" parse="text"/></programlisting>
                    </example>
                    <para> In the following example, the specified search name is
                            <code>2.rtb201104281842.com</code>: </para>
                    <example>
                        <title>Filter by Partial Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-partial-name-request.xml" parse="text"/></programlisting>
                    </example>
                    <example>
                        <title>Filter by Partial Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-partial-name-request.json" parse="text"/></programlisting>
                    </example>
                    <para>The response matches one domain:</para>
                    <example>
                        <title>Filter by Partial Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-partial-name-response.xml" parse="text"/></programlisting>
                    </example>
                    <example>
                        <title>Filter by Partial Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-partial-name-response.json" parse="text"/></programlisting>
                    </example>
                </section>
            </section>
            <section xml:id="list_domain_details">
                <title>List Domain Details</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter></td>
                            <td colspan="3">List details of the specified domain, with record
                                information but without subdomains. </td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                    >/domains/<parameter>domainId</parameter>?<?sbr?><parameter>showRecords</parameter>=<code>true</code>
                                or
                                    <?sbr?><?sbr?><code>false</code>&amp;<parameter>showSubdomains</parameter> =<?sbr?>
                                <code>true</code>or<code>false</code></td>
                            <td colspan="3">List details of the specified domain. Display details,
                                as specified by the <parameter>showRecords</parameter> and
                                    <parameter>showSubdomains</parameter> parameters. </td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <para> This operation provides the detailed output for a specific domain configured
                    and associated with an account. This operation is not capable of returning
                    details for a domain that has been deleted. </para>
                <para>This operation does not require a request body.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <para><?rax-fo keep-with-next?> Two parameters are available to specify the
                    information about subdomains and records to be returned by the List Domain
                    Details call:<itemizedlist>
                        <listitem>
                            <para><code>showRecords</code> - if this parameter is set to
                                    <code>true</code>, then information about records is returned;
                                if this parameter is set to <code>false</code>, then information
                                about records is not returned.</para>
                        </listitem>
                        <listitem>
                            <para><code>showSubdomains</code> - if this parameter is set to
                                    <code>true</code>, then information about subdomains is
                                returned; if this parameter is set to <code>false</code>, then
                                information about subdomains is not returned.</para>
                        </listitem>
                    </itemizedlist></para>
                <para>The following examples show the default parameter settings
                        (<code>showRecords</code>=<code>true</code>,
                        <code>showSubdomains</code>=<code>false</code>) for the List Domain Details
                    call. This call returns information with records but no information about
                    subdomains. Since these parameter values are the defaults, this call works the
                    same way if both of the parameters are omitted.</para>
                <example>
                    <title>List Domain Details with Records, no Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-no-subdomains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-no-subdomains-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-no-subdomains-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="samples/dns-list-domain-details-with-records-no-subdomains-response.json" parse="text"/></programlisting>
                </example>
                <para>The following examples show the parameter settings to return information for
                    both records and subdomains (<code>showSubdomains</code>=<code>true</code>,
                        <code>showRecords</code>=<code>true</code>) for the List Domain Details
                    call:</para>
                <example>
                    <title>List Domain Details with Records and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-and-subdomains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-and-subdomains-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-and-subdomains-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="samples/dns-list-domain-details-with-records-and-subdomains-response.json" parse="text"/></programlisting>
                </example>
                <para>The following examples show the parameter settings to return basic information
                    only, without records or subdomains (<code>showRecords</code>=<code>false</code>
                    and <code>showSubdomains</code>=<code>false</code>) for the List Domain Details
                    call:</para>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-no-records-no-subdomains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-no-records-no-subdomains-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-no-records-no-subdomains-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="samples/dns-list-domain-details-no-records-no-subdomains-response.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="export_domain">
                <title>Export Domain</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/export</td>
                            <td colspan="3">Export details of the specified domain.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This operation provides the BIND (Berkeley Internet Name Domain) 9 formatted
                    contents of the requested domain. This operation is for a
                        <emphasis>single</emphasis> domain only, and as such, does not traverse up
                    or down the domain hierarchy for details (that is, no subdomain information is
                    provided). </para>
                <note>
                    <para> This operation is not capable of returning anything for a domain that has
                        been deleted. </para>
                </note>
                <note>
                    <para linkend="import_domain_request_xml"> The BIND 9 formatted contents of the
                        requested domain will have no comments listed for the domain or for the
                        records of the domain being exported.</para>
                </note>
                <example>
                    <title>Export Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-export-domain-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Export Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-export-domain-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Export Domain Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-export-domain-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Export Domain Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="samples/dns-export-domain-response.json" parse="text"/></programlisting>
                </example>
            </section>
            <section xml:id="create_domains">
                <title>Create Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">Create a new domain with the configuration defined by
                                the request.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), domainExistsFault (<errorcode>409</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>), unauthorized
                        (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                    notFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para> This operation provisions one or more new DNS domains under the account
                    specified, based on the configuration defined in the request object. If the
                    corresponding request cannot be fulfilled due to insufficient or invalid data,
                    an <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and &POST; the request again. <note>
                        <para> This process allows multiple records to be created along with the
                            domain. This is an atomic operation: if there is a failure in creation
                            of even a single record, the entire process will fail. </para>
                    </note><note>
                        <para> DNS record propagation may take up to 15 minutes. </para>
                    </note><note>
                        <para>When a domain is created, and no Time To Live (TTL) is specified, the
                            SOA minTTL (3600 seconds) is used as the default. When a record is added
                            without a specified TTL, it will receive the domain TTL by default. When
                            the domain and/or record TTL is supplied by the user, either via a
                            create or update operation, the TTL values must be 300 seconds or
                            more.</para>
                    </note><note>
                        <para>Subdomains are managed in separate zone files in the DNS system and
                            will add some overhead to domain management.</para>
                    </note>
                </para>
                <example>
                    <title>Create Domain(s) Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-create-domains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Create Domain(s) Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-create-domains-request.json" parse="text"/></programlisting>
                </example>
                <example xml:id="create_domains_resp">
                    <title>Create Domain(s) Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-create-domains-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Create Domain(s) Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="samples/dns-create-domains-response.json"><xi:include href="samples/dns-create-domains-response.json" parse="text"/></programlisting>
                </example>
                <para>
                    <remark>Reviewer:  Need new example for previous call.</remark>
                </para>
            </section>
            <?hard-pagebreak?>
            <section xml:id="import_domain">
                <title>Import Domain</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/domains/import</td>
                            <td colspan="3"> Import a new domain with the configuration specified by
                                the request.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue></simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), domainExistsFault (<errorcode>409</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>), unauthorized
                        (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                    notFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para> This operation provisions a new DNS domain under the account specified by the
                    BIND 9 formatted file configuration contents defined in the request object.  If
                    the corresponding request cannot be fulfilled due to insufficient or invalid
                    data, an <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and &POST; the request again. </para>
                <para> For all practical purposes, a successful import domain operation creates a
                    domain, and is therefore similar in response to a Create Domain call. </para>
                <note>
                    <para> DNS record propagation may take up to 15 minutes.</para>
                </note>
                <note>
                    <para> This process allows multiple records to be created along with the domain.
                        This is an atomic operation, so if there is a failure in the creation of
                        even a single record, the entire process will fail.</para>
                </note>
                <para> Ensure that the BIND 9 formatted file configuration contents are valid by
                    ensuring that records are placed on separate lines with no other white space
                    characters other than a single space or tab between the values. For example,
                    there should be no tabs or extra spaces before the start of any record, and
                    after every record there should be a newline character at the end. Otherwise the
                    user will receive an <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response with the message
                    "The request could not be understood by the server due to malformed
                    syntax."</para>
                <note>
                    <para linkend="import_domain_request_xml"> The domain can have a comment
                        attribute specified in the import domain request (see <xref
                            linkend="import_domain_request_xml"/>), and that comment is transferred
                        to the new domain. However the domain contents cannot have comments
                        specified in them. For example, no record level comments can be used in the
                        import domain request.</para>
                </note>
                <note>
                    <para linkend="import_domain_request_xml">The normal bind rules apply to any
                        imported bind file, and in particular, records without a specified TTL will
                        receive the domain TTL as the default. If the domain TTL is not specified,
                        the SOA minTTL (3600 seconds) is used as the default instead.</para>
                </note>
                <example xml:id="import_domain_request_xml">
                    <title>Import Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-import-domains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Import Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-import-domains-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Import Domain Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-import-domains-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Import Domain Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="samples/dns-import-domains-response.json" parse="text"/></programlisting>
                </example>
            </section>
            <section>
                <title>Modify Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter></td>
                            <td colspan="3">Modify the configuration of a domain.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">Modify the configurations of multiple domains.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> DNS record propagation may take up to 15 minutes. </para>
                </note>
                <note>
                    <para> These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara>Normal Response Code(s): <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This operation modifies DNS domain(s) attributes only. Records cannot be
                    added, modified, or removed. Only the TTL and email address attributes of a
                    domain can be modified. </para>
                <para>If a request cannot be fulfilled due to insufficient or invalid data, an
                        <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and POST the request again. </para>
                <note>
                    <para>A domain's <code>id</code> is immutable. </para>
                </note>
                <note>
                    <para>When the domain and/or record TTL is supplied by the user, either via a
                        create or update operation, the TTL values must be 300 seconds or
                        more.</para>
                </note>
                <example>
                    <title>Modify Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-domain-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Modify Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-domain-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Modify Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-domains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Modify Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-domains-request.json" parse="text"/></programlisting>
                </example>
            </section>
            <section>
                <title>Remove Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="3">URI</td>
                            <td colspan="2">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3">/domains/<parameter>domainId</parameter></td>
                            <td colspan="2">Remove a domain from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                    >/domains?id=<parameter>domainId1</parameter><?sbr?>&amp;id=<parameter>domainId2</parameter></td>
                            <td colspan="2">Remove multiple domains from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                >/domains/<parameter>domainId</parameter>?deleteSubdomains=true</td>
                            <td colspan="2">Remove a domain and its subdomains from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                    >/domains/?id=<parameter>domainId1</parameter><?sbr?>&amp;id=<parameter>domainId2</parameter><?sbr?>&amp;deleteSubdomains=true</td>
                            <td colspan="2">Remove multiple domains and their subdomains from an
                                account.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <para> This operation removes one or more specified domains from the account; when a
                    domain is deleted, its immediate resource records are also deleted from the
                    account. By default, if a deleted domain had subdomains, each subdomain becomes
                    a root domain and is not deleted; this can be overridden by the optional
                        <code>deleteSubdomains</code> parameter. Utilizing the optional
                        <code>deleteSubdomains</code> parameter on domains without subdomains does
                    not result in a failure. When a domain is deleted, any and all configuration
                    data is immediately purged and is not recoverable via the API. So on a
                    successful delete, subsequent requests for the deleted object should return
                    notFound (<errorcode>404</errorcode>).</para>
                <example>
                    <title>Delete Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domain-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Delete Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domain-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Delete Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Delete Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domains-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Delete Domain and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domain-subdomains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Delete Domain and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domain-subdomains-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domains-subdomains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domains-subdomains-request.json" parse="text"/></programlisting>
                </example>
                <para>Transactionally, delete operations behave differently than other operations in
                    that deletes are never rolled back on exceptions, and multiple deletes in the
                    same request do not fail as a group. Instead, each delete is attempted even if
                    one or more fail. The response for a delete request in which one or more items
                    fail contains information regarding which items failed as well as information
                    regarding specific issues that caused the failure(s). See the examples that
                    follow.</para>
                <example>
                    <title>Delete Domains and Subdomains Response (Failure): XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-multi-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Response (Failure): JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-multi-response.json" parse="text"/></programlisting>
                </example>
                <para>In the previous two response examples, the requested domain objects could not
                    be deleted, since they were not found.</para>
            </section>
        </section>
        <section xml:id="using_subdomains">
            <title>Subdomains</title>
            <section>
                <title>List Subdomains</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="3">URI</td>
                            <td colspan="2">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="3">/domains/<parameter>domainId</parameter>/subdomains</td>
                            <td colspan="2">List domains that are subdomains of the specified
                                domain.</td>
                        </tr>
                   
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue></simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound
                    (<errorcode>404</errorcode>)</simpara>
                <para> This operation provides a list of all DNS domains that are subdomains of the
                    specified domain. The resulting list is flat, and does not break the domains
                    down hierarchically by subdomain.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <example>
                    <title>List Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-subdomains-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-subdomains-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Subdomains Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-subdomains-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Subdomains Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-subdomains-response.json" parse="text"/></programlisting>
                </example>
            </section>
        </section>
        <?hard-pagebreak?>
        <section>
            <title>Records</title>
            <para> In the following examples, <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID. </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="2">Description</td>
                        <td colspan="3">Example Call</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                        <td colspan="2">List all records configured for the domain. SOA cannot be
                            modified.</td>
                        <td colspan="3"
                                    >https://dns.api.rackspacecloud.com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/2720150/records/</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                        <td colspan="2">List details for a specific record.</td>
                        <td colspan="3"
                                    >https://dns.api.rackspacecloud.com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/2720150/records/A-6817754</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records</td>
                        <td colspan="2">Add new record(s) to the domain.</td>
                        <td colspan="3"
                                    >https://dns.api.rackspacecloud.com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/2610338/records/
                            &lt;records xmlns="http://docs.rackspacecloud.com/dns/api/v1.0">
                            &lt;record type="CNAME" data="dev.bbunittestacct2static3.com"
                            name="sub.bbunittestacct2static3.com"/>     &lt;record type="A"
                            data="172.23.2.212" name="bbunittestacct2static3.com"/>
                            &lt;/records></td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                        <td colspan="2">Modify the configuration of a record in the domain.</td>
                        <td colspan="3"
                                    >https://dns.api.rackspacecloud.com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/2720150/records/MX-3150315
                            &lt;record data="mail.testingorwhat3.com" name="testingorwhat3.com"
                            ttl="4544">  &lt;/record></td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                        <td colspan="2">Modify the configuration of records in the domain.</td>
                        <td colspan="3"
                                    >https://dns.api.rackspacecloud.com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/2720150/records/
                            &lt;records xmlns="http://docs.rackspacecloud.com/dns/api/v1.0">
                            &lt;record id="MX-3150315" data="mail.testingorwhat3.com"
                            name="testingorwhat3.com"   ttl="4544">  &lt;/record>  &lt;record
                            id="NS-6240783" comment="a comment string">  &lt;/record>
                            &lt;/records></td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records/<parameter><replaceable>recordId</replaceable></parameter></td>
                        <td colspan="2">Remove a record from the domain.</td>
                        <td colspan="3"
                                    >https://dns.api.rackspacecloud.com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/2720150/records/MX-3150315</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records?id=<parameter><replaceable>recordId1</replaceable></parameter><?sbr?>&amp;id=<parameter><replaceable>recordId2</replaceable></parameter></td>
                        <td colspan="2">Remove multiple records from the domain.</td>
                        <td colspan="3"
                                    >https://dns.api.rackspacecloud.com/v1.0/<parameter><replaceable>1234</replaceable></parameter>/domains/2720150/records/?id=A-6817754&amp;id=NS-6240783</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>,  and for remove record(s) also
                    <returnvalue>204</returnvalue></simpara>
            <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                notFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara> 
            <section>
                <title>List Records</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center" >
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                            <td colspan="3">List all records configured for the domain. SOA cannot be modified.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>
                </para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
            <example>
                <title>List Records Request: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-list-records-request.xml" parse="text"/></programlisting>
            </example>
                <example>
                    <title>List Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-records-request.json" parse="text"/></programlisting>
                </example>
            <example>
                <title>List Records Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-list-records-response.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>List Records Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="javascript"><xi:include href="samples/dns-list-records-response.json" parse="text"/></programlisting>
            </example>
            </section>
            <section>
                <title>List Record Details</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                            <td colspan="3">List details for a specific record.</td>
                        </tr>
                    </tbody>
                    
                    
                </informaltable>
                <para> Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue>
                </para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <example>
                    <title>List Record Details Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">  <xi:include href="samples/dns-list-record-details-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Record Details Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">  <xi:include href="samples/dns-list-record-details-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Record Details Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-record-details-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Record Details Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="javascript"><xi:include href="samples/dns-list-record-details-response.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section>
                <title>Add Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records</td>
                            <td colspan="3">Add new record(s) to the domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <para> Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue>
                </para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <note>
                    <para> When a domain and/or record are created, and no TTL (Time To Live) is
                        specified, a default value of 3600 seconds is used. When the domain and/or
                        record TTL is supplied by the user, either via a create or update operation,
                        the TTL values must be 300 seconds or more.</para>
                </note>
                <example>
                    <title>Add Records Request: XML</title>
                    <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-add-records-request.xml" parse="text"/></programlisting>
                    </example>
                <example>
                    <title>Add Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-add-records-request.json" parse="text"/></programlisting>
                </example>
                <remark>Need new .json example for previous item.</remark>
                <example>
                    <title>Add Records Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-add-records-response.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Add Records Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="javascript"><xi:include href="samples/dns-add-records-response.json" parse="text"/></programlisting>
                </example>                
            </section>
            <?hard-pagebreak?>
            <section>
                <title>Modify Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                            <td colspan="3">Modify the configuration of a record in the domain.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                            <td colspan="3">Modify the configuration of records in the domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>204</returnvalue>,
                    <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <note>
                    <para> When the domain and/or record TTL is supplied by the user, either via a
                        create or update operation, the TTL values must be 300 seconds or
                        more.</para>
                </note>
                <example>
                    <title>Modify Record Configuration Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-record-config-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Modify Record Configuration Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-record-config-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Modify Records Configuration Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-records-config-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Modify Records Configuration Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-records-config-request.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section>
                <title>Remove Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records/<parameter><replaceable>recordId</replaceable></parameter></td>
                            <td colspan="3">Remove a record from the domain.</td>
                        </tr> 
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records?id=<parameter><replaceable>recordId1</replaceable></parameter><?sbr?>&amp;id=<parameter><replaceable>recordId2</replaceable></parameter></td>
                            <td colspan="3">Remove multiple records from the domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <para> Normal Response Code(s): <returnvalue>204</returnvalue>,
                    <returnvalue>202</returnvalue>
                </para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), notFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <example>
                    <title>Remove Record Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-record-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Remove Record Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-record-request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Remove Records Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-records-request.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Remove Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-records-request.xml" parse="text"/></programlisting>
                </example>
                <para>Transactionally, delete operations behave differently than other operations in
                    that deletes are never rolled back on exceptions, and multiple deletes in the
                    same request do not fail as a group. Instead, each delete is attempted even if
                    one or more fail. The response for a delete request in which one or more items
                    fail contains information regarding which items failed as well as information
                    regarding specific issues that caused the failure(s). See the examples that
                    follow.</para>
                <example>
                    <title>Delete Records Response (Failure): XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-multi-response.xml" parse="text"/></programlisting>
                </example>
                <remark>Mike- remember to reference new example from Randall (in repository):
                    dns-remove-records-failure-response.xml </remark>
                <example>
                    <title>Delete Records Response (Failure): JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-multi-response.json" parse="text"/></programlisting>
                </example>
                <remark>Mike- remember to reference new example from Randall (in repository):
                    dns-remove-records-failure-response.json. Also need to add a sentence describing
                    why the deletes failed?</remark>
            </section>
        </section>
        <?hard-pagebreak?>
    </chapter>
</book>
