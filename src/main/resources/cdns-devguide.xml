<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>

        <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="cdns-devguide"
    version="5.0">
    <?rax status.bar.text="BETA"?>
    <title>Cloud DNS BETA Developer Guide</title>

    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0 BETA</releaseinfo>
        <productname>Cloud DNS BETA</productname>
        <pubdate>2011-09-06</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers interested in developing
                applications using the Rackspace Cloud DNS Application Programming Interface
                    (<abbrev>API</abbrev>). </para>
        </abstract>
    <cover>
        <para>this is a placeholder for the front cover</para>
    </cover>
    <cover>
        <para>this is a placeholder for the back cover</para>
    </cover>
    </info>
    <chapter xml:id="overview">
        <title>Overview</title>
        <para> Rackspace Cloud DNS is a Domain Name System (DNS) available to Rackspace Cloud
            customers. Interactions with Rackspace Cloud DNS occur programmatically via the
            Rackspace Cloud DNS API as described in this Cloud DNS Developer Guide.</para>
        <note>
            <para> DNS propagation may take up to 15 minutes.</para>
        </note>
        <para>The following figure shows an overview of Cloud DNS Infrastructure:
	<informalfigure>
	  <mediaobject>
	    <imageobject role="fo">
	      <imagedata fileref="images/Cloud_DNS_Infographic-1.svg" contentwidth="6in"/>
	    </imageobject>
	    <imageobject role="html">
	      <imagedata fileref="images/Cloud_DNS_Infographic-1.png"/>
	    </imageobject>	    
	  </mediaobject>
	</informalfigure>
	</para>
        <para>We welcome feedback, comments, and bug reports at <link
                xlink:href="http://feedback.rackspacecloud.com"
                >http://feedback.rackspacecloud.com</link>.</para>
        <para>Issues and bug reports can be directed to your support team via ticket, chat, email,
            or phone.</para>
        <section xml:id="Intended_Audience-d1e122">
            <title>Intended Audience</title>
            <para> This Guide is intended to assist software developers who want to develop
                applications using the Cloud DNS Service API. To use the information provided here,
                you should first have a general understanding of the DNS service. You should also be
                familiar with: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>DNS terminology</para>
                </listitem>
                <listitem>
                    <para>General operating principles of DNS</para>
                </listitem>
                <listitem>
                    <para>RESTful web services</para>
                </listitem>
                <listitem>
                    <para>HTTP/1.1 conventions</para>
                </listitem>
                <listitem>
                    <para>JSON and/or XML data serialization formats</para>
                </listitem>
            </itemizedlist>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Document_Change_History-d1e166">
            <title>Document Change History</title>
            <para>This version of the Developer Guide replaces and
            obsoletes all previous versions.  The most recent changes
            are described in the table below:</para>
            <table rules="all">
                <caption>Document Change History</caption>
                <thead>
                    <tr align="center">
                        <td colspan="1">Revision Date</td>
                        <td colspan="4">Summary of Changes</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="1">Sept. 6, 2011</td>
                        <td colspan="4">
                            <itemizedlist spacing="compact">
                                <listitem>
                                    <para>Added new <xref
                                   linkend="viewing_status_all_asynch_jobs"
                                   />.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                <tr align="left">
                    <td colspan="1">Aug. 30, 2011</td>
                    <td colspan="4">
                        <itemizedlist spacing="compact">
                            <listitem>
                               <para>Added examples and updated
                                   information for <xref
                                   linkend="sync_asynch_responses"
                                   />.</para>
                            </listitem>
                        </itemizedlist>
                    </td>
                </tr>
                <tr align="left">
                    <td colspan="1">Aug. 23, 2011</td>
                    <td colspan="4">
                        <itemizedlist spacing="compact">
                            <listitem>
                               <para>Updated <xref
                                   linkend="sync_asynch_responses"/>
                                   to reflect API changes.</para>
                            </listitem>
                        </itemizedlist>
                    </td>
                </tr>
                <tr align="left">
                    <td colspan="1">Aug. 10, 2011</td>
                    <td colspan="4"
                        ><itemizedlist spacing="compact">
                                <listitem>
                                   <para>Added information that the
                                   <code>name</code> parameter is
                                   required for modify record(s) API
                                   calls.</para>
                                </listitem>
                            <listitem>
                                <para>Updated default domain and record limits.</para>
                            </listitem>
                        </itemizedlist>
                    </td>
                </tr>
                    <tr align="left">
                        <td colspan="1">Aug. 9, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Fixed "type" for CNAME records in <xref
                                            linkend="supported_record_types"/>.</para>
                                </listitem>
                                <listitem>
                                    <para>Added information in <xref
                                            linkend="Service_Access_Endpoints-d1e753"/> about how to
                                        access the account id returned by the authentication
                                        response.</para>
                                </listitem>
                                <listitem>
                                    <para>Updated table of Default Rate Limits in <xref
                                            linkend="Rate_Limits-d1e1222"/>.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="Domain_Limits"/>.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="Record_Limits"/>.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="DNS_faults"/> and replaced the
                                        following faults throughout the manual:</para>
                                    <itemizedlist spacing="compact">
                                        <listitem>
                                            <para><code>notFound</code> with
                                                  <code>itemNotFound</code></para>
                                        </listitem>
                                        <listitem>
                                            <para><code>domainExistsFault</code> with
                                                  <code>itemAlreadyExists</code></para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr><tr align="left">
                        <td colspan="1">Jul. 8, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Updated default nameserver values.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr><tr align="left">
                        <td colspan="1">Jul. 7, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Released for Public Beta.</para>
                                </listitem>
                                <listitem>
                                    <para>Added information in <xref linkend="Authentication-d1e647"
                                        /> that describes accessing the Authentication Service,
                                        based on whether your account is US-based or UK-based.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="DNS_service_versions"/> that
                                        describes the contract and build information for the API.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para> Added new <xref linkend="datetimeformat"/> that describes
                                        the date/time format used by the DNS service. </para>
                                </listitem>
                                <listitem>
                                    <para> Added new <xref linkend="supported_record_types"/> with a
                                        table of supported DNS record types. </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="1">June 28, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Updated DNS architecture diagram in <xref
                                            linkend="overview"/>.</para>
                                </listitem>
                                <listitem>
                                    <para>Updated all examples to reflect the latest API
                                        changes.</para>
                                </listitem>
                                <listitem>
                                    <para>Updated <xref linkend="subdomain"/> that explains what a
                                        subdomain is.</para>
                                </listitem>
                                <listitem>
                                    <para>Updated <xref linkend="list_domain_details"/> with
                                        information about the <code>showRecords</code> and
                                            <code>showSubdomains</code> parameters that control
                                        which information is returned for records and
                                        subdomains.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="comments"/> that describes how to
                                        use comments for domains and records.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="pagination"/> that describes how
                                        paging works.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="supported_record_types"/> that
                                        lists the record types currently supported by Rackspace
                                        Cloud DNS.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="export_domain"/> that describes
                                        how to use export domain to provide the BIND 9 formatted
                                        contents of the requested domain.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="import_domain"/> that describes
                                        how to use import domain to create a domain.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="using_subdomains"/> that
                                        describes how to use subdomains.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="1">May 20, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Added new <xref linkend="sync_asynch_responses"/> that
                                        describes how to use synchronous and asynchronous API
                                        calls.</para>
                                </listitem>
                                <listitem>
                                    <para>Added 404 NOT FOUND error code to all API calls.</para>
                                </listitem>
                                <listitem>
                                    <para>Added new <xref linkend="search_domains_w_filters"/> that
                                        describes how to use filtering to search domains.</para>
                                </listitem>
                                <listitem>
                                    <para>Corrected invalid URLs containing <code>localhost</code>
                                        to be valid URLs.</para>
                                </listitem>
                                <listitem>
                                    <para>Removed the following API calls for domains (and their
                                        corresponding examples) that are no longer supported from
                                            <xref linkend="Domains"/>:<itemizedlist
                                            spacing="compact">
                                            <listitem>
                                                <para>
                                                  <code>GET /version</code></para>
                                            </listitem>
                                            <listitem>
                                                <para><code>GET /domains/detail</code></para>
                                            </listitem>
                                            <listitem>
                                                <para><code>PUT
                                                  /domains/records/recordID</code></para>
                                            </listitem>
                                        </itemizedlist></para>
                                </listitem>
                                <listitem>
                                    <para>Removed <code>DNAME</code> records, which are no longer
                                        supported, from List Domains and List Domains Detail
                                        Responses.</para>
                                </listitem>
                                <listitem>
                                    <para>Corrected <xref linkend="create_domains_resp"/> to be a
                                        valid XML example.</para>
                                </listitem>
                                <listitem>
                                    <para>Added notes about Time To Live (TTL) values for
                                        create/modify calls for domains and add/modify calls for
                                        records.</para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="1">Apr. 27, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para>Added 201 response code to Create Domains.</para>
                                </listitem>
                                <listitem>
                                    <para>Deleted reference to load balancers from Section
                                        3.2.</para>
                                </listitem>
                                <listitem>
                                    <para>Modified reference to the twitter account rackcloud, which
                                        has been merged with the rackspace twitter account.</para>
                                </listitem>
                                <listitem>
                                    <para>Modified incorrect endpoint ord.dns.api.rackspacecloud.com
                                        to dns.api.rackspacecloud.com.</para>
                                </listitem>
                                <listitem>
                                    <para>Modified incorrect URI
                                        /domains<emphasis>domainId</emphasis> to
                                        /domains/<emphasis>domainId</emphasis>. </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr><tr align="left">
                        <td colspan="1">Apr. 4, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para> Identified authentication endpoints. </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr><tr align="left">
                        <td colspan="1">Mar. 30, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para> Added 406 error code to List Domains. </para>
                                </listitem>
                                <listitem>
                                    <para> Added record ID to code sample for Modify Records.
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr><tr align="left">
                        <td colspan="1">Mar. 21, 2011</td>
                        <td colspan="4"
                            ><itemizedlist spacing="compact">
                                <listitem>
                                    <para> Initial release for Private Beta. </para>
                                </listitem>
                            </itemizedlist>
                        </td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="Additional_Resources-d1e532">
            <title>Additional Resources</title>
            <para>You can download the most current versions of other API-related documents from
                    <link xlink:href="http://docs.rackspace.com/api/"
                        >http://docs.rackspace.com/api/</link>. </para>
            <para>For information about Rackspace Cloud products, refer to <link
                    xlink:href="http://www.rackspace.com/cloud/"
                    >http://www.rackspace.com/cloud</link>. This site also offers links to
                Rackspace's official support channels, including knowledge base articles, forums,
                phone, chat, and email. </para>
            <para>You can also follow Rackspace updates and announcements via twitter at <link
                    xlink:href="http://www.twitter.com/rackspace"
                    >http://www.twitter.com/rackspace</link>. </para>
            <para>This API uses standard HTTP 1.1 response codes as documented at <link
                    xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
                    >http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>. </para>
        </section>
    </chapter>
    <chapter xml:id="Concepts-d1e563">
        <title>Concepts</title>
        <?dbhtml stop-chunking?>
        <para> To use the DNS API effectively, you should understand several key concepts: </para>
        <section xml:id="DNS-d1e573">
            <title>DNS</title>
            <para> The Domain Name System (DNS) is a system by which internet domain name-to-address
                and address-to-name resolutions are determined. All domains and their components,
                such as mail servers, utilize DNS to resolve to the appropriate locations. DNS
                servers are usually set up in a master-slave relationship such that failure of the
                master invokes the slave. DNS servers may also be clustered or  replicated such that
                changes made to one DNS server are automatically propagated to other active servers. </para>
            <note>
            <para>
                DNS understands only ASCII, so the Cloud DNS Service provides conversion between UTF-8 and ASCII on all calls into the
                system. 
            </para>
            </note>
        </section>
        <section xml:id="Domain-d1e588">
            <title>Domain</title>
            <para> A domain is an entity/container of all DNS-related information containing one or
                more records. </para>
        </section>
        <section xml:id="subdomain">
            <title>Subdomain</title>
            <para>Subdomains are domains within a parent domain, and subdomains cannot be
                registered. Subdomains allow you to delegate domains. Subdomains can themselves have
                subdomains, so third-level, fourth-level, fifth-level, and deeper levels of nesting
                are possible. </para>
        </section>
        <section xml:id="Record-d1e607">
            <title>Record</title>
            <para> A DNS record belongs to a particular domain and is used to specify information
                about the domain. There are several types of DNS records. Each record type contains
                particular information used to describe that record's purpose. Examples include mail
                exchange (MX) records, which specify the mail server for a particular domain, and
                name server (NS) records, which specify the authoritative name servers for a domain. </para>
        </section>
        <section xml:id="Domain_Owner-d1e616">
            <title>Domain Owner</title>
            <para> Within Rackspace DNS, the account which creates the domain is the domain
                owner.</para>
            <note>
                <para>Domain registration is currently outside the scope of the Rackspace DNS API.
                    Any references to ownership and management of domain information is only
                    relevant within the context of the Rackspace DNS system.</para>
            </note>
        </section>
    </chapter>
    <chapter xml:id="General_API_Information-d1e633">
        <title>General API Information</title>
        <para> The DNS Service API is implemented using a RESTful web service interface. Like other
            products in the Rackspace Cloud suite, the DNS Service shares a common token-based
            authentication system that allows seamless access between products and services. </para>
        <note>
            <para> All requests to authenticate against and operate the service are performed using
                SSL over HTTP (HTTPS) on TCP port 443. </para>
        </note>
        <section xml:id="Authentication-d1e647">
            <title>Authentication</title>
            <?dbhtml stop-chunking?>
            <para> Every ReST request against the DNS Service requires the inclusion of a specific
                authorization token, supplied by the <code>X-Auth-Token</code> HTTP header.
                Customers obtain this token by first using the Rackspace Cloud Authentication
                Service and supplying a valid username and API access key. </para>
            <section xml:id="request">
                <title>Geographic Endpoints</title>
                <para> The Rackspace Cloud Authentication Service serves as the entry point to all
                Rackspace Cloud APIs and is itself a RESTful web service. </para>
                <para> To access the Authentication Service, you must know whether your account is
                    US-based or UK-based: 
                </para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>
                            US-based accounts authenticate through <link xlink:href="https://auth.api.rackspacecloud.com/v1.0">https://auth.api.rackspacecloud.com/v1.0</link>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            UK-based accounts authenticate through <link xlink:href="https://lon.auth.api.rackspacecloud.com/v1.0">https://lon.auth.api.rackspacecloud.com/v1.0</link>.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    Your account may be based in either the US or the UK; this is not determined
                    by your physical location but by the location of the Rackspace retail site which
                    was used to create your account: 
                </para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>
                            If your account was
                            created via <link xlink:href="http://www.rackspacecloud.com">http://www.rackspacecloud.com</link>, it is a US-based account.
                        </para>   
                    </listitem>
                    <listitem>
                        <para>
                            If your account was
                            created via <link xlink:href="http:/www.rackspace.co.uk">http:/www.rackspace.co.uk</link>, it is a UK-based account.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    If you are unsure how your account was created, use the Rackspace contact
                    information at either site to ask for help.
                </para>
            </section>
            <section xml:id="Authenticate-d1e171">
                <title>Retrieving the Authentication Token</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="1">URI</td>
                            <td colspan="4">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;
                            </td>
                            <td colspan="1">/auth</td>
                            <td colspan="4">
                                Authenticate to receive a token and a service catalog.
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>
                    Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
                </simpara>
                <simpara>
                    Error Response Code(s):
                    unauthorized (<errorcode>401</errorcode>),
                    userDisabled (<errorcode>403</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    authFault (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>)
                </simpara>
                <para>
                    The authenticate operation provides clients with an
                    authentication token and a list of regional cloud endpoints.
                </para>
                <example>
                    <title>Auth Request: XML</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="credentials.xml.user" units="linecolumn" coords="5 32"/>
                            <area xml:id="credentials.xml.key" units="linecolumn" coords="6 52"/>
                        </areaspec>
                        <programlisting language="xml">
<xi:include href="../../../target/samples/credentials.xml" parse="text"/>
                        </programlisting>
                    </programlistingco>
                </example>
                <example>
                    <title>Auth Request: JSON</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="credentials.json.user" units="linecolumn" coords="4 32"/>
                            <area xml:id="credentials.json.key" units="linecolumn" coords="5 52"/>
                        </areaspec>
                        <programlisting language="javascript">
<xi:include href="../../../target/samples/credentials.json" parse="text"/>
                        </programlisting>
                    </programlistingco>
                </example>
                <calloutlist>
                    <callout arearefs="credentials.xml.user">
                        <para>
                            The username supplied here is your common Rackspace Cloud
                            username.
                        </para>
                    </callout>
                    <callout arearefs="credentials.xml.key">
                        <para> The key is your API access key. The key can be obtained from the
                            Rackspace Cloud Control Panel in the <guimenu>Your Account</guimenu>/
                            <guimenuitem>API Access</guimenuitem> section. </para>
                    </callout>
                </calloutlist>
                <example>
                    <title>Auth Response: XML</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="auth.xml.token.expires" units="linecolumn" coords="6 45"/>
                            <area xml:id="auth.xml.sc.s.e.region" units="linecolumn" coords="10 23"/>
                            <area xml:id="auth.xml.sc.s.e.v1d" units="linecolumn" coords="11 27"/>
                            <area xml:id="auth.xml.sc.s.e.pu" units="linecolumn" coords="12 20"/>
                            <area xml:id="auth.xml.sc.s.e.iu" units="linecolumn" coords="13 22"/>
                            <area xml:id="auth.xml.sc.s.e.nr" units="linecolumn" coords="29 16"/>
                        </areaspec>
                        <programlisting language="xml">
<xi:include href="../../../target/samples/auth.xml" parse="text"/>
                        </programlisting>
                    </programlistingco>
                </example>
                <example>
                    <title>Auth Response: JSON</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="auth.json.token.expires" units="linecolumn" coords="6 52"/>
                            <area xml:id="auth.json.sc.s.e.region" units="linecolumn" coords="11 38"/>
                            <area xml:id="auth.json.sc.s.e.v1d" units="linecolumn" coords="12 40"/>
                            <area xml:id="auth.json.sc.s.e.pu" units="linecolumn" coords="13 32"/>
                            <area xml:id="auth.json.sc.s.e.iu" units="linecolumn" coords="14 34"/>
                            <area xml:id="auth.json.sc.s.e.nr" units="linecolumn" coords="33 31"/>
                        </areaspec>
                        <programlisting language="javascript">
<xi:include href="../../../target/samples/auth.json" parse="text"/>
                        </programlisting>
                    </programlistingco>
                </example>
                <calloutlist>
                    <callout arearefs="auth.xml.token.expires">
                        <para> Tokens are valid for a finite duration. The <code>expires</code>
                            attribute denotes the time after which the token will automatically become
                            invalid. A token may be manually revoked before the time identified by the
                            <code>expires</code> attribute; <code>expires</code> predicts a token's maximum possible lifespan but does not guarantee that it will reach that lifespan. 
                            Clients are encouraged to cache a
                            token until it expires. </para>
                    </callout>
                    <callout arearefs="auth.xml.sc.s.e.region">
                        <para>
                            A service may expose endpoints in different regions.
                            Regional endpoints allow clients to provision resources in
                            a manner that provides high availability.
                        </para>
                    </callout>
                    <callout arearefs="auth.xml.sc.s.e.v1d">
                        <para> The <code>v1Default</code> attribute denotes that an endpoint is being
                            returned in version 1.0 of the Cloud Authentication Service. The default
                            value of <code>v1Default</code> is <code>false</code>; clients
                            should assume the value is <code>false</code> when the attribute is missing. Auth 1.0
                            does not offer support for regional endpoints and therefore only returns one
                            endpoint per service. Resources stored in endpoints where
                            <code>v1Default</code> is<code>false</code>, will not be seen by Auth
                            1.0 clients. </para>
                    </callout>
                    <callout arearefs="auth.xml.sc.s.e.pu auth.xml.sc.s.e.iu">
                        <para>
                            An endpoint can be assigned public and internal URLs. A
                            public URL is accessible from anywhere. Access to a public
                            URL usually incurs traffic charges. Internal URLs are only
                            accessible to services within the same region. Access to
                            an internal URL is free of charge.
                        </para>
                    </callout>
                    <callout arearefs="auth.xml.sc.s.e.nr">
                        <para> Some services are not region-specific. These services supply a single
                            non-regional endpoint and do not provide access to internal URLs. </para>
                    </callout>
                </calloutlist>
            </section>
        </section>
        <section xml:id="Service_Access_Endpoints-d1e753">
            <title>Service Access/Endpoints</title>
            <para>The DNS service is a regionalized service. DNS is therefore responsible for
                appropriate replication, caching, and overall maintenance of DNS data across
                regional boundaries to other DNS servers.</para>
            <para>To determine which region to operate against, select an endpoint from the table
                below.</para>
            <para>
                <table rules="all">
                    <caption>Regionalized Service Endpoints</caption>
                    <thead>
                        <tr align="center">
                            <td colspan="1">Region</td>
                            <td colspan="4">Endpoint</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">
                            <td colspan="1">US</td>
                            <td colspan="4"
                                    ><code>https://dns.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                        <tr align="left">
                            <td colspan="1">UK</td>
                            <td colspan="4">
                                <code>https://lon.dns.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>Replace the sample account ID number, <parameter>1234</parameter>, with your
                actual Rackspace Cloud account number.</para>
        </section>
        <section xml:id="DNS_service_versions">
            <title>DNS Service Versions</title>
            <para> The Cloud DNS Service version defines the contract and build information for the
                API. </para>
            <section xml:id="Contract_Version-d1e825">
                <title>Contract Version</title>
                <para> The contract version denotes the data model and behavior that the API
                    supports. The requested contract version is included in all request URLs.
                    Different contract versions of the API may be available at any given time and
                    are not guaranteed to be compatible with one another. <example>
                        <title>Example Request URL (contract version in <emphasis role="strong"
                                >bold</emphasis>)</title>
                        <programlisting>https://dns.api.rackspacecloud.com/<emphasis role="strong">v1.0</emphasis>/1234/domains</programlisting>
                    </example>
                    <note>
                        <para>This document pertains to contract version 1.0.</para>
                    </note>
                </para>
            </section>
            <section xml:id="API_Version_Headers-d1e855">
                <title>API Version Headers</title>
                <para>Every response from the Cloud DNS Service includes custom headers that
                    identify the specific release version of the API that is in use. This
                    information is used to assist in diagnosing issues and should be included in any
                    support request. </para>
                <table rules="all">
                    <caption>API Version Headers</caption>
                    <?dbfo keep-together="always"?>
                    <thead>
                        <tr align="center">
                            <td>Header Name</td>
                            <td>Description</td>
                            <td>Example Value</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>X-API-VERSION</td>
                            <td>The deployed version of the Cloud DNS Service. This is used to
                                identify releases, and it should correspond to the contract version
                                in the URL (that is, v1.0).</td>
                            <td>X-API-VERSION=1.0.8</td>
                        </tr>
                    </tbody>
                </table>
            </section>
        </section>
        <section xml:id="Request_Response_Types-d1e903">
            <title>Request/Response Types</title>
            <para> The DNS API supports both the JSON and XML data serialization formats. The
                request format is specified using the <code>Content-Type</code> header and is
                required for calls that have a request body. The response format can be specified in
                requests either by using the <code>Accept</code> header or by adding an
                    <code>.xml</code> or <code>.json</code> extension to the request URI. Note that
                it is possible for a response to be serialized using a format different from the
                request. If no response format is specified, JSON is the default. If conflicting
                formats are specified using both an <code>Accept</code> header and a query
                extension, the query extension takes precedence. </para>
            <table rules="all">
                <caption>Response Formats</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td>Format</td>
                        <td>Accept Header</td>
                        <td>Query Extension</td>
                        <td>Default</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>JSON</td>
                        <td>application/json</td>
                        <td>.json</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>XML</td>
                        <td>application/xml</td>
                        <td>.xml</td>
                        <td>No</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="sync_asynch_responses">
            <title>Synchronous and Asynchronous Responses</title>
            <para> All successful &GET; requests are <emphasis>synchronous</emphasis> calls, since
                they are always retrieving (reading) existing information. With these requests, the
                caller waits until the call returns with the specified code and response body. For
                an example, see <xref linkend="list_domains"/>. </para>
            <para>&PUT;, &POST;, and &DELETE; calls are <emphasis>asynchronous</emphasis>, however,
                since they may take some time to process. Therefore they return 202 ACCEPTED
                responses containing information with a callback URL, which allows the progress,
                status, and/or response information of the call to be retrieved at a later point in
                time.
            </para>
            <para>When the status of a request is queried (via a <code>callbackUrl</code> supplied by the API), only basic information
                  regarding the status of the job is returned by default. If more detail is desired, any status URL may include an optional
                  <code>showDetails</code> query parameter that will display more information regarding the original request.</para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                        <td colspan="2">Representations</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">
                            /status/<parameter>jobId</parameter>?<?sbr?><parameter>showDetails</parameter>=<code>[true|false]</code>
                        </td>
                        <td colspan="3">List status of the specified
                            asynchronous request. Display details, as
                            specified by the
                                <parameter>showDetails</parameter>
                            parameter. </td>
                        <td colspan="2">XML, JSON</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
            </simpara>
            <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable
                (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                badRequest (<errorcode>400</errorcode>), itemNotFound
                    (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
            <para>The following table shows the complete set of
                attributes for asynchronous responses:</para>
            <table rules="all">
                <caption>Attributes for Asynchronous Responses</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td colspan="1">Attribute</td>
                        <td colspan="4">Description</td>
                        <td colspan="1">Inclusion</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">jobId</td>
                        <td colspan="4">An identifier for the specific request.</td>
                        <td colspan="1">Basic and Detail</td>
                    </tr>
                    <tr>
                        <td colspan="1">callbackUrl</td>
                        <td colspan="4">Resource locator for querying the status of the request.</td>
                        <td colspan="1">Basic and Detail</td>
                    </tr>
                    <tr>
                        <td colspan="1">status</td>
                        <td colspan="4">An indicator of the request
                            status: RUNNING, COMPLETED, or ERROR.</td>
                        <td colspan="1">Basic and Detail</td>
                    </tr>
                    <tr>
                        <td colspan="1">requestUrl</td>
                        <td colspan="4">The url of the original request.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                    <tr>
                        <td colspan="1">verb</td>
                        <td colspan="4">The type of the original
                            request: PUT, POST, or DELETE.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                    <tr>
                        <td colspan="1">request</td>
                        <td colspan="4">The original request data, if any.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                    <tr>
                        <td colspan="1">response</td>
                        <td colspan="4">The results of a COMPLETE operation, if any.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                    <tr>
                        <td colspan="1">error</td>
                        <td colspan="4">The results of an ERROR operation.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                </tbody>
            </table>
            <para>The asynchronous response body will look similar to
                the following examples, depending on the format and
                level of detail requested.</para>
            <note>
                <para>The results of asynchronous calls are retained for up to 24 hours.</para>
            </note>
            <example>
                <title>202 ACCEPTED Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async_response.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>202 ACCEPTED Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async_response.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <note>
                <para>If a request body does not pass initial validation or an error condition
                    arises, you may receive an immediate error response from the request.</para>
            </note>
            <para>Next, you need to make a request to the callback URL
                provided to get the status information. If you use the
                callback URL <emphasis>without</emphasis> specifying
                the query parameter <code>showDetails=true</code>,
                only basic information is requested:</para>
            <example>
                <title>Basic Success Asynchronous Request: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-success_request.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-success_request.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Basic Success Asynchronous Request: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-success_request.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-success_request.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>When a request is made to the callback URL provided
                and the job is still running, another
                    <returnvalue>202</returnvalue> ACCEPTED response
                is returned with the same information as the previous
                one.</para>
            <para> If the request is successful, the
                    <code>status</code> is
                <code>COMPLETED</code>:</para>
            <example>
                <title>Basic Success Asynchronous Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-success_response.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-success_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Basic Success Asynchronous Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-success_response.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-success_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>If you specified the query parameter
                    <code>showDetails=true</code> for the callback
                URL, detailed information is requested:</para>
            <example>
                <title>Detail Success Asynchronous Request: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-success-detail_request.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-success-detail_request.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Detail Success Asynchronous Request: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-success-detail_request.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-success-detail_request.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>If the request is successful, this includes the
                    <code>response</code>,  which contains the results
                of the operation:</para>
            <example>
                <title>Detail Success Asynchronous Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-success-detail_response.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-success-detail_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Detail Success Asynchronous Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-success-detail_response.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-success-detail_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <note>
                  <para>Examples of successful responses in the rest
                    of this guide only demonstrate the
                        <emphasis>contents</emphasis> of the
                    asynchronous <code>response</code> attribute.
                    Additional attributes and elements have been
                    omitted for clarity.</para>
            </note>
            <para>If an error occurs as a result of processing the
                original request, querying the callback URL will
                return the information about the error. If you use the
                callback URL without specifying the query parameter
                    <code>showDetails=true</code>, only basic
                information is provided:</para>
            <example>
                <title>Basic Error Asynchronous Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-error_response.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-error_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Basic Error Asynchronous Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-error_response.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-error_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>If you use the callback URL with the query parameter
                    <code>showDetails=true</code>, then detailed
                information is provided:</para>
            <example>
                <title>Detail Error Asynchronous Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-error-detail_response.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-error_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Detail Error Asynchronous Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-async-error-detail_response.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-async-error_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <note>
                <para>Examples of error responses in the rest of this
                    guide only show the <emphasis>contents</emphasis>
                    of the asynchronous <code>error</code> attribute.
                    Additional attributes and elements have been
                    omitted for clarity.</para>
            </note>
<section xml:id="viewing_status_all_asynch_jobs">
                <title>Viewing Status of All Asynchronous Job
                    Requests<?sbr?></title>
                <para>As well as viewing status for a
                        <emphasis>particular job ID</emphasis>, as
                    described in the previous section, you can also
                    view status information for
                        <emphasis>all</emphasis> asynchronous job
                    requests for an account. You can also filter the
                    information requested by using the following
                    optional boolean request parameters:<itemizedlist
                        spacing="compact">
                        <listitem>
                            <para><code>showErrors</code> &ndash; if
                                   <code>true</code>, specifies that
                                errors are shown</para>
                        </listitem>
                        <listitem>
                            <para><code>showRunning</code> &ndash; if
                                   <code>true</code>, specifies that
                                jobs still running are shown</para>
                        </listitem>
                        <listitem>
                            <para><code>showCompleted</code> &ndash;
                                if <code>true</code>, specifies that
                                completed jobs are shown</para>
                        </listitem>
                        <listitem>
                            <para><code>showDetails</code>&ndash; if
                                   <code>true</code>, specifies that
                                job details are shown</para>
                        </listitem>
                    </itemizedlist>In addition, paging request
                    parameters <code>limit</code> and
                        <code>offset</code> can also be supplied for
                    the request. Refer to <xref linkend="pagination"/>
                    for details.</para>
                <para>The default values for these request parameters
                    (if they are not specified) are:</para>
                <itemizedlist 
                    spacing="compact">
                    <listitem>
                        <para><code>showErrors=true</code></para>
                    </listitem>
                    <listitem>
                        <para><code>showRunning=true</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para><code>showCompleted=true</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para><code>showDetails=false</code></para>
                    </listitem>
                    <listitem>
                        <para><code>limit=100</code></para>
                    </listitem>
                    <listitem>
                        <para><code>offset=0</code></para>
                    </listitem>
                </itemizedlist>
                <para>By omitting the
                        <parameter>showDetails</parameter> parameter
                    from the request (or explicitly setting it to
                        <code>false</code>), you can request basic
                    information for all errors, running jobs, and
                    completed jobs for the account. By default (with
                    no query parameters specified) only
                        <emphasis>basic</emphasis> information is
                    requested:</para>
                <example>
                    <title>Get Basic Status for All Jobs Request:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-get-jobs-status-no-details_request.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-get-jobs-status-no-details_request.xml<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Get Basic Status for All Jobs Request:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-get-jobs-status-no-details_request.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-get-jobs-status-no-details_request.json<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The response lists all the user's jobs that have
                    had errors, followed by those still running, and
                    then those that have completed:</para>
                <example>
                    <title>Get Basic Status for All Jobs Response:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-get-jobs-status-no-details_response.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-get-jobs-status-no-details_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Get Basic Status for All Jobs Response:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-get-jobs-status-no-details_response.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-get-jobs-status-no-details_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>To get <emphasis>detailed</emphasis> status
                    information for all jobs, set the
                        <parameter>showDetails</parameter> parameter
                    to true (<code>showDetails=true</code>).</para>
                <example>
                    <title>Get Detailed Status for All Jobs Request:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-get-jobs-status-with-details_request.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-get-jobs-status-with-details_request.xml<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Get Detailed Status for All Jobs Request:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-get-jobs-status-with-details_request.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-get-jobs-status-with-details_request.json<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The response lists all the user's jobs that have
                    had errors, followed by those still running, and
                    then those that have completed:</para>
                <example>
                    <title>Get Detailed Status for All Jobs Response:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-get-jobs-status-with-details_response.xml" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-get-jobs-status-with-details_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Get Detailed Status for All Jobs Response:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-get-jobs-status-with-details_response.json" parse="text"><xi:fallback>Missing code sample ../../../target/samples/dns-get-jobs-status-with-details_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>            

        </section>
           <section xml:id="Content_Compression-d1e1120">
            <title>Content Compression</title>
            <para> Request and response body data may be encoded with gzip compression to accelerate
                interactive performance of API calls and responses. This is controlled using the
                    <code>Accept-Encoding</code> header on the request from the client and indicated
                by the <code>Content-Encoding</code> header in the server response. Unless the
                header is explicitly set, encoding defaults to disabled. </para>
            <table rules="all">
                <caption>Encoding Headers</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td>Header Type</td>
                        <td>Name</td>
                        <td>Value</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>HTTP/1.1 Request</td>
                        <td><code>Accept-Encoding</code></td>
                        <td>gzip</td>
                    </tr>
                    <tr>
                        <td>HTTP/1.1 Response</td>
                        <td><code>Content-Encoding</code></td>
                        <td>gzip</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="Persistent_Connections-d1e1187">
            <title>Persistent Connections</title>
            <para>
                By default, the API supports persistent connections
                via HTTP/1.1 keepalives.  All connections will be kept
                alive unless the connection header is set to close.
            </para>
            <para>
                To prevent abuse, HTTP sessions have a timeout of 20
                seconds before being closed.
            </para>
            <note>
                <para>
                    The server may close the connection at any time
                    and clients should not rely on this behavior.
                </para>
            </note>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Limits-d1e1208">
            <title>Limits</title>
            <para>
                All accounts, by default, have a preconfigured set of
                thresholds (or limits) to manage capacity and prevent
                abuse of the system.  The system recognizes two kinds
                of limits: <firstterm>rate limits</firstterm> and
                <firstterm>absolute limits</firstterm>. Rate limits
                are thresholds that are reset after a certain amount
                of time passes. Absolute limits are fixed.
            </para>
            <section xml:id="Rate_Limits-d1e1222">
                <title>Rate Limits</title>
                <para> Rate limits are specified in terms of both a human-readable wild-card URI and
                    a machine-processable regular expression. The regular expression boundary
                    matcher '^' takes effect after the root URI path. For example, the regular
                    expression ^/v1.0/<parameter>1234</parameter>/domains would match the bolded
                    portion of the following URI: https://dns.api.rackspacecloud.com<emphasis
                        role="bold">/v1.0/1234/domains</emphasis>. </para>
                <para>The following table specifies the default rate limits for all API operations
                    for all &GET;, &POST;, &PUT;, and &DELETE; calls for domains, subdomains, or
                    records: </para>
                <table rules="all">
                    <caption>Default Rate Limits</caption>
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="2">RegEx</td>
                            <td colspan="1">Default</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"> /v\d+\.\d+/* </td>
                            <td colspan="2"> /v\d+\.\d+/(\d+/domains).* </td>
                            <td colspan="1">5/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"> /v\d+\.\d+/* </td>
                            <td colspan="2"> /v\d+\.\d+/(\d+/domains).* </td>
                            <td colspan="1">100/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">  /v\d+\.\d+/\d+/status/*  </td>
                            <td colspan="2">  /v\d+\.\d+/(\d+/status).*  </td>
                            <td colspan="1">5/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"> /v\d+\.\d+/* </td>
                            <td colspan="2"> /v\d+\.\d+/(\d+/domains).* </td>
                            <td colspan="1">2/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"> /v\d+\.\d+/* </td>
                            <td colspan="2"> /v\d+\.\d+/(\d+/domains).* </td>
                            <td colspan="1">25/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2"> /v\d+\.\d+/* </td>
                            <td colspan="2"> /v\d+\.\d+/(\d+/domains).* </td>
                            <td colspan="1">5/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2"> /v\d+\.\d+/* </td>
                            <td colspan="2"> /v\d+\.\d+/(\d+/domains).* </td>
                            <td colspan="1">50/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"> /v\d+\.\d+/* </td>
                            <td colspan="2"> /v\d+\.\d+/(\d+/domains).* </td>
                            <td colspan="1">2/second</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"> /v\d+\.\d+/* </td>
                            <td colspan="2"> /v\d+\.\d+/(\d+/domains).* </td>
                            <td colspan="1">50/minute</td>
                        </tr>
                    </tbody>
                </table>
               <para> Rate limits are applied in order relative to the verb, going from least to
                    most specific. For example, although the threshold for &POST; to /v1.0/* is 25
                    per minute, one cannot &POST; to /v1.0/* more than 2 times within a single
                    second because the rate limit for any &POST; is 2 per second. </para>
                <para> If you exceed the thresholds established for your account, a <errorcode>413
                        (Rate Control)</errorcode> HTTP response will be returned with a
                        <code>Reply-After</code> header to notify the client when it can attempt to
                    try again. <note>
                        <para>The third entry in the Default Rate Limits table above is for simple
                            STATUS calls after a &POST; or &PUT;, to retrieve the status details,
                            for example: <link
                                xlink:href="https://dns.api.rackspacecloud.com/v1.0/1234/status/0062ac6e-3d07-4980-afab-5fd3a806ef4d"
                                >https://dns.api.rackspacecloud.com/v1.0/1234/status/0062ac6e-3d07-4980-afab-5fd3a806ef4d</link>.
                            This status call has a limit of 5 requests per second. </para>
                    </note></para>
            </section>
            <section xml:id="Absolute_Limits-d1e1397">
                <title>Absolute Limits</title>
                <para> &POST; and &PUT; calls are limited to the creation or modification of a
                    maximum of 100 entities per call where an entity is defined as a record, domain,
                    or subdomain. For example, when using &POST; <code>/domains</code> to create a
                    new domain with nine subdomains, you could create a maximum of ninety records
                    across the domain and subdomains. This would total 100 entities: 1 domain + 9
                    subdomains + 90 records. Additional records and/or subdomains could be created
                    for the domain in subsequent calls.</para>
            </section>
            <section xml:id="Domain_Limits">
                <title>Domain Limits</title>
                <para>By default users may have up to 500 domains per Cloud account (including
                    sub-domains). When a user submits a request to create new domains and/or
                    sub-domains, the system will only accept the request if the total number of
                    existing plus requested domains and sub-domains is within the account domain
                    limit. If the total exceeds the account domain limit, the entire request will be
                    rejected and the following message will be returned: </para>
                <para>
                    <programlisting>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;badRequest xmlns="http://docs.rackspacecloud.com/dns/api/v1.0"  code="400"&gt;
  &lt;message&gt;The request could not be understood by the server due to malformed syntax.&lt;/message&gt;
  &lt;details&gt;Limit of 500 domains has been reached.&lt;/details&gt;
&lt;/badRequest&gt; </programlisting>
                </para>
                <note>
                    <para>Any domains/sub-domains or records that are submitted in any request that
                        causes domain limits to be exceeded will not be provisioned and the entire
                        request will be rejected. </para>
                </note>
                <note>
                    <para>The account domain limit applies to any API request that can be used to
                        create a domain and/or sub-domain. An account may have a non-default limit
                        if determined necessary by Support. </para>
                </note>
            </section>
            <section xml:id="Record_Limits">
                <title>Record Limits</title>
                <para> By default users may have up to 500 records per domain per Cloud account.
                    When a user submits a request to create one or more new records, the system will
                    only accept the request if the total number of existing plus requested records
                    is within the account record limit. If the total number of records on a
                    specified domain exceeds the record limit, the entire request will be rejected
                    and the following message will be returned: </para>
                <para>
                    <programlisting>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;badRequest xmlns="http://docs.rackspacecloud.com/dns/api/v1.0"  code="400"&gt;
  &lt;message&gt;The request could not be understood by the server due to malformed syntax.&lt;/message&gt;
  &lt;details&gt;Limit of 500 records per domain has been  reached.&lt;/details&gt;
&lt;/badRequest&gt; </programlisting>
                </para>
                <note>
                    <para> Any domains/sub-domains or records that are submitted in any request that
                        causes record limits to be exceeded will not be provisioned and the entire
                        request will be rejected. </para>
                </note>
                <note>
                    <para> The limits apply to any API request that can be used to create one or
                        more records. An account may have a non-default record limit if determined
                        necessary by Support. </para>
                </note>
            </section>
        </section>
        <section xml:id="datetimeformat">
            <title>Date/Time Format</title>
            <para>
                The DNS service uses an ISO-8601 compliant date format for the display and consumption of date/time values.
                </para>
                <example>
                    <title>DNS Service Date/Time Format</title>
                    <programlisting>yyyy-MM-dd'T'HH:mm:ssZ</programlisting>
                <para>See the table below for a description of the date/time format codes.</para>
                    <para>May 19th, 2011 at 8:07:08 AM, GMT-5 would have the following
                    format:</para>
                    <programlisting>2011-05-19T08:07:08-05:00</programlisting>
                </example>
            <table rules="all">
                <caption>Explanation of Date/Time Format Codes</caption>
                <thead>
                    <tr>
                        <td>Code</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>yyyy</td>
                        <td>Four digit year</td>
                    </tr>
                    <tr>
                        <td>MM</td>
                        <td>Two digit month</td>
                    </tr>
                    <tr>
                        <td>dd</td>
                        <td>Two digit day of month</td>
                    </tr>
                    <tr>
                        <td>T</td>
                        <td>Separator for date/time</td>
                    </tr>
                    <tr>
                        <td>HH</td>
                        <td>Two digit hour of day (00-23)</td>
                    </tr>
                    <tr>
                        <td>mm</td>
                        <td>Two digit minutes of hour</td>
                    </tr>
                    <tr>
                        <td>ss</td>
                        <td>Two digit seconds of the minute</td>
                    </tr>
                    <tr>
                        <td>Z</td>
                        <td>RFC-822 timezone</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="comments">
            <title>Comments</title>
            <para> Comments are supported for domains and records and their requests and responses.
                See the examples that follow.</para>
            <example>
                <title>Example Response with Comments: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-example-response-w-comment_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Example Response with Comments: JSON</title>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-example-response-w-comment_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>Notes for comments:<itemizedlist>
                    <listitem>
                        <para>Are limited to 160 characters each</para>
                    </listitem>
                    <listitem>
                        <para>Can be any text characters</para>
                    </listitem>
                    <listitem>
                        <para>Are optional</para>
                    </listitem>
                    <listitem>
                        <para>To remove a comment, set it to the empty string, for example:
                            comment=""</para>
                    </listitem>
                    <listitem>
                        <para>Are returned on &GET; calls for both domain and records regardless of
                            whether the call is a single or multiple call, and regardless of whether
                            it is a detail or non-detail call</para>
                    </listitem>
                </itemizedlist></para>
            <para>In summary, all Create Domain and Create Record(s) and all Modify Domain and
                Modify Record(s) calls can take an optional comment (<code>comment="value of
                    comment"</code>). In other words, all these request calls can have an optional
                comment attribute.</para>
        </section>
        <section xml:id="pagination">
            <title>Pagination</title>
            <para> Pagination is the ability to limit the size of the returned data as well as
                retrieve a specified subset of a large data set. Pagination has two key concepts:
                limit and offset. <emphasis>Limit</emphasis> is the restriction on the maximum
                number of items for that type that can be returned. <emphasis>Offset</emphasis> is
                the starting point for the return data. For example, an offset of 50 specifies that
                the items that are returned should start with item number 51 (since the numbering is
                one-based) in the collection. </para>
            <para>It is important to note that offset <emphasis>must</emphasis> be a multiple of the
                limit (or zero), otherwise a Bad Request Exception will be thrown. Both limit and
                offset are specified via request parameters on the URI. The parameters are named
                    <code>limit</code> and <code>offset</code> respectively, and both apply only to
                &GET; calls. If unspecified, they default to <code>limit=100</code> and
                    <code>offset=0</code>. See the examples that follow.</para>
            <example>
                <title>Examples of Limits and Offsets for Paging Calls</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">
  ....\domains?limit=50              -- returns the first 50 domains, that is: 1 - 50 
  ....\domains?limit=50&amp;offset=50    -- returns the domains 51-100 
  ....\domains?limit=25&amp;offset=50    -- returns the domains 51-75  
  ....\domains?limit=25              -- returns the domains 1-25  
  ....\domains?limit=25&amp;offset=5     -- returns Bad Request Exception; offset must be a multiple of the limit or 0  
  ....\domains?offset=5              -- returns Bad Request Exception; offset must be a multiple of the limit or 0  
  ....\domains?offset=200            -- returns back the 201-300th domains if they exist (default limit of 100 applies) 
  ....\domains                       -- returns the current maximum items allowable (currently 100) 
</programlisting>
            </example>
            <para>Pagination applies only to the calls listed in the following table: </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/</td>
                        <td colspan="3">List all domains manageable by the account specified. </td>
                    </tr>
                
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/?name=<replaceable>domainName</replaceable></td>
                        <td colspan="3">Filter domains by domain name: list all domains manageable
                            by the account specified that match the name domainName.</td>
                    </tr>
               
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<replaceable>domainID</replaceable></td>
                        <td colspan="3">List details of the specified domain. Applies to the records
                            and subdomains lists.</td>
                    </tr>
               
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<replaceable>domainID</replaceable>/subdomains</td>
                        <td colspan="3">List domains that are subdomains of the specified
                            domain.</td>
                    </tr>
               
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<replaceable>domainID</replaceable>/records</td>
                        <td colspan="3">List all records configured for the domain.</td>
                    </tr>
                
                    
                    
                </tbody>
            </informaltable>
            <para>See the following section for examples of paged List Domains calls.</para>
            <section xml:id="Pagination_Elements_and_Attributes-d1e1754">
                <title>Pagination Elements and Attributes</title>
                <para>For any collection in a result, there is a <code>totalEntries</code> attribute
                    representing the total number of entries there are for this item type. If the
                    number of items requested in the &GET; call is less then the total number of
                    items for this type, then there will be pagination links <code>previous</code>
                    and/or <code>next</code>, specifying how to get to the previous and/or next set
                    of records. </para>
                <note>
                    <para>The <code>previous</code> and/or <code>next</code> link elements are
                        displayed only if there are items available in the corresponding link. See
                        the following examples for details.</para>
                </note>
                <example>
                    <title>List Domains Request with limit: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-pagination-list-domains-limit_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Request with limit:  JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-pagination-list-domains-limit_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Response with totalEntries: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-pagination-list-domains-limit_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Response with totalEntries: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-pagination-list-domains-limit_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para> In the previous two response examples, note that
                        <code>totalEntries=112</code> and that a link has been provided to retrieve
                    the next 3 results (<code>limit=3</code>) in the link element identified by the
                    attribute <code>rel="next"</code> (XML) or <code>"rel":"next"</code> (JSON). </para>
                <para>The following example shows links to both previous and next results in the
                    responses, since the request specified to start with the fourth item in the
                    collection (<code>offset=3</code>):</para>
                <example>
                    <title>List Domains Request with limit and offset: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-pagination-list-domains-limit-offset_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Request with limit and offset: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-pagination-list-domains-limit-offset_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Response with Links to previous and next Results:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-pagination-list-domains-limit-offset_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Response with Links to previous and next Results:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-pagination-list-domains-limit-offset_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>
                    <?rax-fo keep-with-next?> In the previous two response examples, note that
                        <code>totalEntries=112</code> and two links have been provided to:<itemizedlist>
                        <listitem>
                            <para>Retrieve the next 3 results (<code>limit=3</code>) via the link
                                element identified by the attribute <code>rel="next"</code> (XML) or
                                    <code>"rel":"next"</code> (JSON)</para>
                        </listitem>
                        <listitem>
                            <para>Retrieve the previous 3 results via the link element identified by
                                the attribute <code>rel="previous"</code> (XML) or
                                    <code>"rel":"previous"</code> (JSON) </para>
                        </listitem>
                    </itemizedlist></para>
            </section>
        </section>
        <section xml:id="supported_record_types"><?dbfo keep-together="always"?>
            <title>Supported Record Types</title>
            <para>The Rackspace Cloud DNS Service supports the record types listed in the following
                table.</para>
            
            <table rules="all">
                <caption>Rackspace Cloud DNS Supported Record Types</caption>
                <thead>
                    <tr>
                        <td>Record Type</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td colspan="2">Examples</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>A</td> 
                        <td>Maps an IPV4 address to a domain</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>A Record : XML</title>
                                <para><programlisting language="xml">&lt;record id="A-123" type="A" name="example.foo.com" data="123.456.78.9" ttl="86400"/&gt;</programlisting></para>
                                
                            </formalpara>
                            <formalpara>
                                <title>A Record : JSON</title>
                                <para>
                                    <programlisting language="json">{ "id" : "A-123", "type" : "A", "name" : "example.foo.com", "data" : "123.456.78.9", "ttl" : 86400 }</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td>AAAA</td>
                        <td>Maps an IPV6 address to a domain</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>AAAA Record : XML</title>
                                <para>
                                    <programlisting language="xml">&lt;record id="AAAA-123" type="AAAA" name="example.foo.com" data="4321:0:1:2:3:4:567:89ab" ttl="86400"/&gt;</programlisting>
                                </para>
                            </formalpara>
                            <formalpara>
                                <title>AAAA Record : JSON</title>
                                <para>
                                    <programlisting language="json">{ "id" : "AAAA-123", "type" : "AAAA", "name" : "example.foo.com", "data" : "4321:0:1:2:3:4:567:89ab", "ttl" : 86400 }</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td>CNAME</td>
                        <td>Creates an alias for a domain</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>CNAME Record : XML</title>
                                <para>
                                    <programlisting language="xml">&lt;record id="CNAME-123" type="CNAME" name="www.example.foo.com" data="example.foo.com" ttl="86400"/&gt;</programlisting>
                                </para>
                            </formalpara>
                            <formalpara>
                                <title>CNAME Record : JSON</title>
                                <para>
                                    <programlisting language="json">{ "id" : "CNAME-123", "type" : "CNAME", "name" : "www.example.foo.com", "data" : "example.foo.com", "ttl" : 86400 }</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td>MX</td>
                        <td>Designates a domain's mail server</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>MX Record : XML</title>
                                <para>
                                    <programlisting language="xml">&lt;record id="MX-123" priority="10" type="MX" name="example.foo.com" data="mail.example.foo.com" ttl="3600"/&gt;</programlisting>
                                </para>
                            </formalpara>
                            <formalpara>
                                <title>MX Record : JSON</title>
                                <para>
                                    <programlisting language="json">{ "id" : "MX-123", "priority" : 10, "type" : "MX", "name" : "example.foo.com", "data" : "mail.example.foo.com", "ttl" : 3600 }</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td>NS</td>
                        <td>Designates a domain's authoritative name server</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>NS Record : XML</title>
                                <para>
                                    <programlisting>&lt;record id="NS-123" type="NS" name="example.foo.com" data="ns1.foo.com" ttl="54000"/&gt;</programlisting>
                                </para>
                            </formalpara>
                            <formalpara>
                                <title>NS Record : JSON</title>
                                <para>
                                    <programlisting>{ "id" : "NS-123", "type" : "NS" "name" : "example.foo.com", "data" : "ns1.foo.com", "ttl" : 54000 }</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td>TXT</td>
                        <td>Arbitrary text for a domain record</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>TXT Record : XML</title>
                                <para>
                                    <programlisting>&lt;record id="TXT-123" type="TXT" name="example.foo.com" data="Some example text" ttl="3600"/&gt;</programlisting>
                                </para>
                            </formalpara>
                            <formalpara>
                                <title>TXT Record : JSON</title>
                                <para>
                                    <programlisting>{ "id" : "TXT-123", "type" : "TXT", "name" : "example.foo.com", "data" : "Some example text", "ttl" : 3600 }</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <note>
                                <para><code>DKIM</code> and <code>SPF</code> records are supported
                                    using <code>TXT</code> records with appropriately formatted data
                                    fields. </para>
                            </note>
                        </td>
                    </tr>
                    <tr>
                        <td>SRV</td>
                        <td>General service locator record for a domain</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>SRV Record : XML</title>
                                <para>
                                    <programlisting>&lt;record id="SRV-123" type="SRV" name="_tcp._sip.example.foo.com" priority="30" data="1 3443 sip.foo.com" ttl="86400"/&gt;</programlisting>
                                </para>
                            </formalpara>
                            <formalpara>
                                <title>SRV Record : JSON</title>
                                <para>
                                    <programlisting>{ "id" : "SRV-123", "type" : "SRV", "name" : "_tcp._sip.example.foo.com", "priority" : 30, "data" : "1 3443 sip.foo.com", "ttl" : 86400 }</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="DNS_faults">
            <title>Faults</title>
            <para> When an error occurs, the DNS Service returns a fault object containing an HTTP
                error response code that denotes the type of error. In the body of the response, the
                system will return additional information about the fault. </para>
            <para>The following table lists possible fault types with their associated error codes
                and descriptions.</para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="2">Fault Type</td>
                        <td colspan="1">Associated Error Code</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="2"><code>dnsFault</code></td>
                        <td colspan="1">500, as well as any of the following others:</td>
                        <td colspan="3">Generic catch-all. Should not be seen as often as the
                            specific faults below. See the <code>details</code> element for more
                            specifics.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>serviceUnavailable</code></td>
                        <td colspan="1">503</td>
                        <td colspan="3">The request could not be processed because back-end services
                            were temporarily unavailable. This condition should be temporary;
                            contact support if the error persists.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>unauthorized</code></td>
                        <td colspan="1">401</td>
                        <td colspan="3">The user is not authorized to access the API functionality
                            in question. The user may not have authenticated to the API. If the user
                            should have access to the API functionality, contact support.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>badRequest</code></td>
                        <td colspan="1">400</td>
                        <td colspan="3">The request is missing one or more elements, or the values
                            of some elements are invalid. See the <code>details</code> element or
                                <code>validationErrors</code> element for specifics.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>itemNotFound</code></td>
                        <td colspan="1">404</td>
                        <td colspan="3">The back-end services did not find anything matching the
                            Request-URI.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>overLimit</code></td>
                        <td colspan="1">413</td>
                        <td colspan="3">Either the number of entities in the request is larger than
                            allowed limits, or the user has exceeded allowable request rate limits.
                            See the <code>details</code> element for more specifics. Contact support
                            if you think you need higher request rate limits.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>itemAlreadyExists</code></td>
                        <td colspan="1">409</td>
                        <td colspan="3">The back-end services could not complete the request due to
                            a conflict with the current state of the resource. Possibly, the user is
                            trying to create an entity that already exists. See the
                                <code>details</code> element for specifics.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>deleteFault</code></td>
                        <td colspan="1">500 and nested other fault codes</td>
                        <td colspan="3">The back-end services could not successfully delete some of
                            a number of entities requested to be deleted. See the
                                <code>failedItems</code> element for specifics.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>internalServerError</code></td>
                        <td colspan="1">500</td>
                        <td colspan="3">The back-end services encountered an unexpected condition
                            that prevented it from fulfilling the request. See the
                                <code>details</code> element for specifics.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>The base of all fault types is <code>dnsFault</code>. From an XML schema
                perspective, all API faults are extensions of the base fault type
                    <code>dnsFault</code>. When working with a system such as JAXB that binds XML to
                actual classes, <code>dnsFault</code> can be used as a catch-all if there is no
                interest in distinguishing between individual fault types.</para>
            <para><code>dnsFault</code> has the structure and elements shown below. All other fault
                types extend <code>dnsFault</code>. Currently only fault types
                    <code>badRequest</code> and <code>deleteFault</code> actually add additional
                elements to their structure as compared to the parent <code>dnsFault</code>. These
                two fault types are described later. </para>
            <example>
                <title>Example Fault Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;dnsFault xmlns="http://docs.rackspacecloud.com/dns/api/v1.0" code="500">
     &lt;message>Main fault&lt;/message>
     &lt;details>Error Details&lt;/details>
&lt;/dnsFault></programlisting>
            </example>
            <example>
                <title>Example Fault Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">{
  "message" : "Main fault",
  "code" : 500,
  "details" : "Error Details"
}</programlisting>
            </example>
            <para> The error code (<code>code</code>) is returned in the body of the response for
                convenience. The <code>message</code> element returns a human-readable message that
                is appropriate for display to the end user. The <code>details</code> element is
                optional and may contain information that is useful for tracking down an error, such
                as a stack trace. The <code>details</code> element may or may not be appropriate for
                display to an end user, depending on the role and experience of the end user.</para>
            <para>The fault's root element (for example, <code>dnsFault</code>) may change depending
                on the type of error. <code>badRequest</code> fault adds a
                    <code>validationErrors</code> element that contains a list of error messages for
                invalid requests. The first two <code>badRequest</code> examples show errors when
                the request structure is wrong:</para>
            <example>
                <title>Example badRequest Fault on Request Structure Errors: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;badRequest xmlns="http://docs.rackspacecloud.com/dns/api/v1.0" code="400">
     &lt;message>The request could not be processed.&lt;/message>
     &lt;details>Unexpected close tag &lt;/domains>; expected &lt;/domain>.
     &lt;/details>
&lt;/badRequest></programlisting>
            </example>
            <example>
                <title>Example badRequest Fault on Request Structure Errors: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">{
  "message":"The request could not be processed.",
  "code":400,
  "details":"Unexpected close tag &lt;/domains>; expected &lt;/domain>."
}</programlisting>
            </example>
            <para> The next two <code>badRequest</code> examples show validation errors:</para>
            <example>
                <title>Example badRequest Fault on Validation Errors: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;badRequest xmlns="http://docs.rackspacecloud.com/dns/api/v1.0" code="400">
     &lt;validationErrors>
          &lt;messages>Must provide a name for each domain.&lt;/messages>
          &lt;messages>null is not a valid domain name.&lt;/messages>
     &lt;/validationErrors>
&lt;/badRequest></programlisting>
            </example>
            <example>
                <title>Example badRequest Fault on Validation Errors: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">{
  "validationErrors":
  {
    "messages":
    [
      "Must provide a name for each domain.",
      "null is not a valid domain name."
    ]
  },
  "code":400
}</programlisting>
            </example>
            <para><code>deleteFault</code> adds a <code>failedItems</code> element that contains
                details on entities that could not be deleted:</para>
            <example>
                <title>Example deleteFault: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>
&lt;deleteFault xmlns="http://docs.rackspacecloud.com/dns/api/v1.0" code="500">
     &lt;message>One or more items could not be deleted.&lt;/message>
     &lt;details>See errors list for details.&lt;/details>
     &lt;failedItems>
          &lt;fault code="503">
               &lt;message>The DNS API is currently not available.&lt;/message>
               &lt;details>Domain ID: 123&lt;/details>
          &lt;/fault>
     &lt;/failedItems>
&lt;/deleteFault></programlisting>
            </example>
            <example>
                <title>Example deleteFault: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">{
    "failedItems":
     {
        "faults":
         [
          {
            "message":"The DNS API is currently not available.",
            "code":503,
            "details":"Domain ID: 123"
          }
         ]
     },
     "message":"One or more items could not be deleted.",
     "code":500,
     "details":"See errors list for details."
}</programlisting>
            </example>
        </section>
    </chapter>
    <chapter xml:id="API_Operations-d1e2264">
        <title>API Operations</title>
        <section xml:id="Domains">
            <title>Domains</title>
            <para> In the following examples, <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID. </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="2">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="2">List all account domains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/?name=<parameter>domainName</parameter></td>
                        <td colspan="2">Filter domains by domain name: list all domains
                            manageable by the account specified that match the name
                            <parameter>domainName</parameter>. Display IDs and names
                            only.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter></td>
                        <td colspan="2">List details for a specific domain. By default this call
                            displays information for records but not subdomains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>?<?sbr?><parameter>showRecords</parameter>=<?sbr?><code>[true|false]&amp;<?sbr?></code><parameter>showSubdomains</parameter>=<code>[true|false]</code><?sbr?></td>
                        <td colspan="2">List details for a specific domain, using the
                                <parameter>showRecords</parameter> and
                                <parameter>showSubdomains</parameter> parameters that specify
                            whether to request information for records and subdomains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/changes?<?sbr?><parameter>since</parameter>=<?sbr?><code>[date/time]</code></td>
                        <td colspan="2">Show all changes to the specified domain since the specified date. The <parameter>since</parameter>
                                        parameter is optional and defaults to midnight of the current day. See 
                                        <xref linkend="datetimeformat"/> for how to specify this parameter's value.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/export</td>
                        <td colspan="2">Export details of the specified domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="2">Create a new domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/domains/import</td>
                        <td colspan="2"> Import a new domain with the configuration specified by
                            the request.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains<?sbr?>/<parameter>domainId</parameter></td>
                        <td colspan="2">Modify the configuration of a domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="2">Modify multiple domains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2">/domains<?sbr?>/<parameter>domainId</parameter></td>
                        <td colspan="2">Remove a domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                            >/domains<?sbr?>/<parameter>domainId</parameter>?<?sbr?>deleteSubdomains=<?sbr?>true</td>
                        <td colspan="2">Remove a domain and all its subdomains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains?id=<parameter>domainId1</parameter>&amp;<?sbr?>id=<parameter>domainId2</parameter></td>
                        <td colspan="2">Remove multiple domains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains?id=<parameter>domainId1</parameter>&amp;<?sbr?>id=<parameter>domainId2</parameter>&amp;<?sbr?>deleteSubdomains=<?sbr?>true</td>
                        <td colspan="2">Remove multiple domains and their subdomains.</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>, and for remove domain(s) also
                    <returnvalue>204</returnvalue>
            </simpara>
            <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                itemNotFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
            <?hard-pagebreak?>
            <section xml:id="list_domains">
                <title>List Domains</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">List all domains manageable by the account specified.
                                Display IDs and names only.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/?name=<parameter>domainName</parameter></td>
                            <td colspan="3">Filter domains by domain name: list all domains
                                manageable by the account specified that match the name
                                    <parameter>domainName</parameter>. Display IDs and names
                                only.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>, <errorcode>406</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
                <para> These calls provide a list of all DNS domains manageable by a given account.
                    The resulting list is flat, and does not break the domains down hierarchically
                    by subdomain. All representative domains are included in the list, even if a
                    domain is conceptually a subdomain of another domain in the list.</para>
                <note>
                    <para>These calls return by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <para> In the examples that follow, the request is made for a <code>limit</code> of
                        <code>10</code> records, starting at <code>offset</code>
                    <code>20</code> (record 21).</para>
                <example>
                    <title>List Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Response: JSON</title>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para>Since the current set of 10 records in the previous response examples
                        begins at <code>offset=20</code>, note that the <code>previous</code> link
                        points to a group of 10 records starting at <code>offset=10</code>, while
                        the <code>next</code> link points to a group of 10 records starting at
                            <code>offset=30</code>.</para>
                </note>
                <section xml:id="search_domains_w_filters">
                    <title>Search Domains with Filtering</title>
                    <para> As illustrated by the examples above, the List Domains call provides a
                        list of all DNS domains manageable by a given account. Filtering the search
                        to limit the results returned can be performed by using the
                            <code>name</code> parameter on the List Domains call. For example,
                        <?sbr?><code>?&#xfeff;name=hoola.com</code> matches <code>hoola.com</code> and
                        similar names such as <code>main.hoola.com</code> and
                            <code>sub.hoola.com</code>. </para>
                    <note>
                        <para>This call returns by default a maximum of 100 items at a time if no
                                <code>limit</code> is specified. To navigate the collection
                            returned, the parameters <code>limit</code> and <code>offset</code> can
                            be set in the URI (for example: <code>limit=10&amp;offset=0</code>), as
                            described in <xref linkend="pagination"/>.</para>
                    </note>
                    <para><?rax-fo keep-with-next?> In the following example, the specified search
                        name is <code>secondlevel434706.com</code>:</para>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-domain-by-name_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-domain-by-name_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para><?rax-fo keep-with-next?> The response matches one domain:</para>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-domain-by-name_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-domain-by-name_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para><?rax-fo keep-with-next?> In the following example, the specified search
                        name is <code>sub1.secondlevel434706.com</code>:</para>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-subdomain-by-name_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-subdomain-by-name_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para>The response matches one subdomain:</para>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-subdomain-by-name_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-subdomain-by-name_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para>
                        <?rax-fo keep-with-next?>In the following example, the specified search name
                        is <code>sub1.rtb000</code>: </para>
                    <example>
                        <title>Filter by Partial Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-subdomain-by-partial-name_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Partial Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-subdomain-by-partial-name_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para><?rax-fo keep-with-next?> The response matches one subdomain:</para>
                    <example>
                        <title>Filter by Partial Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-subdomain-by-partial-name_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Partial Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="../../../target/samples/dns-filter-subdomain-by-partial-name_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                </section>
            </section>
            <section xml:id="list_domain_details">
                <title>List Domain Details</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter></td>
                            <td colspan="3">List details of the specified domain, with record
                                information but without subdomains. </td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                    >/domains/<parameter>domainId</parameter>?<?sbr?><parameter>showRecords</parameter>=<code>true</code>
                                or
                                    <?sbr?><?sbr?><code>false</code>&amp;<parameter>showSubdomains</parameter> =<?sbr?>
                                <code>true</code>or<code>false</code></td>
                            <td colspan="3">List details of the specified domain. Display details,
                                as specified by the <parameter>showRecords</parameter> and
                                    <parameter>showSubdomains</parameter> parameters. </td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para> This call provides the detailed output for a specific domain configured and
                    associated with an account. This call is not capable of returning details for a
                    domain that has been deleted. </para>
                <para>This call does not require a request body.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <para><?rax-fo keep-with-next?> Two parameters are available to specify the
                    information about subdomains and records to be returned by the List Domain
                    Details call:<itemizedlist>
                        <listitem>
                            <para><code>showRecords</code> - if this parameter is set to
                                    <code>true</code>, then information about records is returned;
                                if this parameter is set to <code>false</code>, then information
                                about records is not returned.</para>
                        </listitem>
                        <listitem>
                            <para><code>showSubdomains</code> - if this parameter is set to
                                    <code>true</code>, then information about subdomains is
                                returned; if this parameter is set to <code>false</code>, then
                                information about subdomains is not returned.</para>
                        </listitem>
                    </itemizedlist></para>
                <para>The following examples show the default parameter settings
                        (<code>showRecords</code>=<code>true&amp;</code><code>showSubdomains</code>=<code>false</code>)
                    for the List Domain Details call. This call returns information with records but
                    no information about subdomains. Since these parameter values are the defaults,
                    this call works the same way if both of the parameters are omitted.</para>
                <example>
                    <title>List Domain Details with Records, no Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-with-records-no-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-with-records-no-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-with-records-no-subdomains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="../../../target/samples/dns-list-domain-details-with-records-no-subdomains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The following examples show the parameter settings to return information for
                    both records and subdomains
                        (<code>showSubdomains</code>=<code>true&amp;</code><code>showRecords</code>=<code>true</code>)
                    for the List Domain Details call:</para>
                <example>
                    <title>List Domain Details with Records and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-with-records-and-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-with-records-and-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-with-records-and-subdomains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="../../../target/samples/dns-list-domain-details-with-records-and-subdomains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The following examples show the parameter settings to return basic information
                    only, without records or subdomains
                        (<code>showRecords</code>=<code>false&amp;</code><code>showSubdomains</code>=<code>false</code>)
                    for the List Domain Details call:</para>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-no-records-no-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-no-records-no-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-details-no-records-no-subdomains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example><?dbfo keep-together="always"?>
                    <title>List Domain Details, no Records, no Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="../../../target/samples/dns-list-domain-details-no-records-no-subdomains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section>
                <title>List Domain Changes</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/changes?<?sbr?><parameter>since</parameter>=<?sbr?><code>[date/time]</code></td>
                            <td colspan="3">Show all changes to the specified domain since the specified date. The <parameter>since</parameter>
                                        parameter is optional and defaults to midnight of the current day. See 
                                        <xref linkend="datetimeformat"/> for how to specify this parameter's value.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>)</simpara>
                <example>
                    <title>List Domain Changes Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-changes_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Changes Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-changes_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Changes Response: XML</title>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-changes_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Changes Response: JSON</title>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-domain-changes_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="export_domain">
                <title>Export Domain</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/export</td>
                            <td colspan="3">Export details of the specified domain.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call provides the BIND (Berkeley Internet Name Domain) 9 formatted
                    contents of the requested domain. This call is for a <emphasis>single</emphasis>
                    domain only, and as such, does not traverse up or down the domain hierarchy for
                    details (that is, no subdomain information is provided). </para>
                <note>
                    <para> This call is not capable of returning anything for a domain that has been
                        deleted. </para>
                </note>
                <note>
                    <para linkend="import_domain_request_xml"> The BIND 9 formatted contents of the
                        requested domain will have no comments listed for the domain or for the
                        records of the domain being exported.</para>
                </note>
                <example>
                    <title>Export Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-export-domain_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Export Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-export-domain_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para> The following examples show the <emphasis>final</emphasis> successful
                        response for the asynchronous call. Refer to <xref
                            linkend="sync_asynch_responses"/> for a description of how the
                        asynchronous call works.</para>
                </note>
                <example><?dbfo keep-together="always"?>
                    <title>Export Domain Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-export-domain_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Export Domain Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="../../../target/samples/dns-export-domain_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="create_domains">
                <title>Create Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">Create a new domain with the configuration defined by
                                the request.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <note>
                    <para> Subdomains are also created the same way as domains.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), itemAlreadyExists (<errorcode>409</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>), unauthorized
                        (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
                <para> This call provisions one or more new DNS domains under the account specified,
                    based on the configuration defined in the request object. If the corresponding
                    request cannot be fulfilled due to insufficient or invalid data, an
                        <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and &POST; the request again. <note>
                        <para> This process allows multiple records to be created along with the
                            domain. This is an atomic operation: if there is a failure in creation
                            of even a single record, the entire process will fail. </para>
                    </note><note>
                        <para> DNS propagation may take up to 15 minutes. </para>
                    </note><note>
                        <para>When a domain is created, and no Time To Live (TTL) is specified, the
                            SOA minTTL (3600 seconds) is used as the default. When a record is added
                            without a specified TTL, it will receive the domain TTL by default. When
                            the domain and/or record TTL is supplied by the user, either via a
                            create or update call, the TTL values must be 300 seconds or
                            more.</para>
                    </note><note>
                        <para>Subdomains are managed in separate zone files in the DNS system and
                            will add some overhead to domain management.</para>
                    </note>
                </para>
                <example>
                    <title>Create Domain(s) Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-create-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Create Domain(s) Request: JSON</title>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-create-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para> The following examples show the <emphasis>final</emphasis> successful
                        response for the asynchronous call. Refer to <xref
                            linkend="sync_asynch_responses"/> for a description of how the
                        asynchronous call works.</para>
                </note>
                <example xml:id="create_domains_resp">
                    <title>Create Domain(s) Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-create-domains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Create Domain(s) Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="samples/dns-create-domains_response.json"><xi:include href="../../../target/samples/dns-create-domains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="import_domain">
                <title>Import Domain</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                            <td colspan="2">Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/domains/import</td>
                            <td colspan="3"> Import a new domain with the configuration specified by
                                the request.</td>
                            <td colspan="2">XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue></simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), itemAlreadyExists (<errorcode>409</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>), unauthorized
                        (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
                <para> This call provisions a new DNS domain under the account specified by the BIND
                    9 formatted file configuration contents defined in the request object.  If the
                    corresponding request cannot be fulfilled due to insufficient or invalid data,
                    an <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and &POST; the request again. </para>
                <para> For all practical purposes, a successful Import Domain call creates a domain,
                    and is therefore similar in response to a Create Domain call. </para>
                <note>
                    <para> DNS propagation may take up to 15 minutes.</para>
                </note>
                <note>
                    <para> This process allows multiple records to be created along with the domain.
                        This is an atomic operation, so if there is a failure in the creation of
                        even a single record, the entire process will fail.</para>
                </note>
                <para> Ensure that the BIND 9 formatted file configuration contents are valid by
                    ensuring that records are placed on separate lines with no other white space
                    characters other than a single space or tab between the values. For example,
                    there should be no tabs or extra spaces before the start of any record, and
                    after every record there should be a newline character at the end. Otherwise the
                    user will receive an <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response with the message
                    "The request could not be understood by the server due to malformed
                    syntax."</para>
                <note>
                    <para linkend="import_domain_request_xml"> The domain can have a comment
                        attribute specified in the import domain request (see <xref
                            linkend="import_domain_request_xml"/>), and that comment is transferred
                        to the new domain. However the domain contents cannot have comments
                        specified in them. For example, no record level comments can be used in the
                        import domain request.</para>
                </note>
                <note>
                    <para linkend="import_domain_request_xml">The normal bind rules apply to any
                        imported bind file, and in particular, records without a specified TTL will
                        receive the domain TTL as the default. If the domain TTL is not specified,
                        the SOA minTTL (3600 seconds) is used as the default instead.</para>
                </note>
                <example xml:id="import_domain_request_xml">
                    <title>Import Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-import-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Import Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-import-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para> The following examples show the <emphasis>final</emphasis> successful
                        response for the asynchronous call. Refer to <xref
                            linkend="sync_asynch_responses"/> for a description of how the
                        asynchronous call works.</para>
                </note>
                <example>
                    <title>Import Domain Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-import-domains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Import Domain Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="javascript"><xi:include href="../../../target/samples/dns-import-domains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="Modify_Domain_s_-d1e3848">
                <title>Modify Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter></td>
                            <td colspan="3">Modify the configuration of a domain.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">Modify the configurations of multiple domains.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> DNS propagation may take up to 15 minutes. </para>
                </note>
                <note>
                    <para> These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara>Normal Response Code(s): <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call modifies DNS domain(s) attributes only. Records cannot be added,
                    modified, or removed. Only the TTL, email address and comment attributes of a domain can
                    be modified. </para>
                <para>If a request cannot be fulfilled due to insufficient or invalid data, an
                        <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and POST the request again. </para>
                <note>
                    <para>A domain's <code>id</code> is immutable. </para>
                </note>
                <note>
                    <para>When the domain and/or record TTL is supplied by the user, either via a
                        create or update call, the TTL values must be 300 seconds or more.</para>
                </note>
                <example>
                    <title>Modify Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-modify-domain_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-modify-domain_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-modify-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-modify-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="Remove_Domain_s_-d1e4022">
                <title>Remove Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="3">URI</td>
                            <td colspan="2">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3">/domains/<parameter>domainId</parameter></td>
                            <td colspan="2">Remove a domain from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                    >/domains?id=<parameter>domainId1</parameter><?sbr?>&amp;id=<parameter>domainId2</parameter></td>
                            <td colspan="2">Remove multiple domains from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                >/domains/<parameter>domainId</parameter>?deleteSubdomains=true</td>
                            <td colspan="2">Remove a domain and its subdomains from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                    >/domains/?id=<parameter>domainId1</parameter><?sbr?>&amp;id=<parameter>domainId2</parameter><?sbr?>&amp;deleteSubdomains=true</td>
                            <td colspan="2">Remove multiple domains and their subdomains from an
                                account.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para> This call removes one or more specified domains from the account; when a
                    domain is deleted, its immediate resource records are also deleted from the
                    account. By default, if a deleted domain had subdomains, each subdomain becomes
                    a root domain and is not deleted; this can be overridden by the optional
                        <code>deleteSubdomains</code> parameter. Utilizing the optional
                        <code>deleteSubdomains</code> parameter on domains without subdomains does
                    not result in a failure. When a domain is deleted, any and all domain data is
                    immediately purged and is not recoverable via the API. So on a successful
                    delete, subsequent requests for the deleted object should return itemNotFound
                        (<errorcode>404</errorcode>).</para>
                <example>
                    <title>Delete Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-domain_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-domain_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domain and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-domain-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domain and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-domain-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-domains-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-domains-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Transactionally, delete calls behave differently than other calls in that
                    deletes are never rolled back on exceptions, and multiple deletes in the same
                    request do not fail as a group. Instead, each delete is attempted even if one or
                    more fail. The response for a delete request in which one or more items fail
                    contains information regarding which items failed as well as information
                    regarding specific issues that caused the failure(s). See the examples that
                    follow.</para>
                <example>
                    <title>Delete Domains and Subdomains Response (Failure): XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-multi_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Response (Failure): JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-delete-multi_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>In the previous two response examples, the requested domain objects could not
                    be deleted, since they were not found.</para>
            </section>
        </section>
        <section xml:id="using_subdomains">
            <title>Subdomains</title>
            <section xml:id="List_Subdomains-d1e4295">
                <title>List Subdomains</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="3">URI</td>
                            <td colspan="2">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="3">/domains/<parameter>domainId</parameter>/subdomains</td>
                            <td colspan="2">List domains that are subdomains of the specified
                                domain.</td>
                        </tr>
                   
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue></simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>)</simpara>
                <para> This call provides a list of all DNS domains that are subdomains of the
                    specified domain. The resulting list is flat, and does not break the domains
                    down hierarchically by subdomain.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <example>
                    <title>List Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Subdomains Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-subdomains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Subdomains Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-subdomains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
        </section>
        <section xml:id="Records-d1e4435">
            <title>Records</title>
            <para>In the following examples, <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID. </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="2">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                        <td colspan="2">List all records configured for the domain. SOA cannot be
                            modified.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                        <td colspan="2">List details for a specific record.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records</td>
                        <td colspan="2">Add new record(s) to the domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                        <td colspan="2">Modify the configuration of a record in the domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                        <td colspan="2">Modify the configuration of records in the domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records/<parameter><replaceable>recordId</replaceable></parameter></td>
                        <td colspan="2">Remove a record from the domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records?id=<parameter><replaceable>recordId1</replaceable></parameter><?sbr?>&amp;id=<parameter><replaceable>recordId2</replaceable></parameter></td>
                        <td colspan="2">Remove multiple records from the domain.</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>,  and for remove record(s) also
                    <returnvalue>204</returnvalue></simpara>
            <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                itemNotFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara> 
            <section xml:id="List_Records-d1e4629">
                <title>List Records</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center" >
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                            <td colspan="3">List all records configured for the domain. SOA cannot be modified.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>
                </para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
            <example>
                <title>List Records Request: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-records_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
                <example>
                    <title>List Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-records_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            <example>
                <title>List Records Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-records_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>List Records Response: JSON</title>
                <programlisting language="javascript"><xi:include href="../../../target/samples/dns-list-records_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            </section>
            <section xml:id="List_Record_Details-d1e4770">
                <title>List Record Details</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                            <td colspan="3">List details for a specific record.</td>
                        </tr>
                    </tbody>
                    
                    
                </informaltable>
                <para> Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue>
                </para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <example>
                    <title>List Record Details Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">  <xi:include href="../../../target/samples/dns-list-record-details_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Record Details Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">  <xi:include href="../../../target/samples/dns-list-record-details_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Record Details Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-list-record-details_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Record Details Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="javascript"><xi:include href="../../../target/samples/dns-list-record-details_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Add_Records-d1e4895">
                <title>Add Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records</td>
                            <td colspan="3">Add new record(s) to the domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <para> Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue>
                </para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <note>
                    <para> When a domain is created, and no TTL (Time
                        To Live) is specified, a default value of 3600
                        seconds is used. The domain's TTL value is
                        inherited by the record. When the domain
                        and/or record TTL is supplied by the user,
                        either via a create or update call, the TTL
                        values must be 300 seconds or more.</para>
                </note>
                <example>
                    <title>Add Records Request: XML</title>
                    <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../target/samples/dns-add-records_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                <example>
                    <title>Add Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-add-records_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para> The following examples show the <emphasis>final</emphasis> successful
                        response for the asynchronous call. Refer to <xref
                            linkend="sync_asynch_responses"/> for a description of how the
                        asynchronous call works.</para>
                </note>
                <example>
                    <title>Add Records Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-add-records_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Add Records Response: JSON</title>
                    <programlisting language="javascript"><xi:include href="../../../target/samples/dns-add-records_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <section xml:id="Wildcard_Records">
                    <title>Wildcard Records</title>
                    <para>Users can add one or more <emphasis>wildcard</emphasis> records to any
                        domain or sub-domain on their account. For information on the intent and use
                        of wildcard records, see the DNS literature including RFC 1034, section
                        4.3.3, and RFC 4595.</para>
                    <para>Wildcards are supported for A, AAAA, CNAME, MX, SRV and TXT record
                        types.</para>
                    <note>
                        <para>Wildcards are not supported for NS records. It is invalid to use a
                            wildcard in an NS record.</para>
                    </note>
                    <para>A valid wildcard DNS record is specified by using an asterisk
                            ("<code>*</code>") as the leftmost part of a record name, for example
                            <code>*.example.com</code>. An asterisk in any other part of a record
                        name is invalid. Only the asterisk ("<code>*</code>") is accepted as a
                        wildcard character. </para>
                </section>                
            </section>
            <?hard-pagebreak?>
            <section xml:id="Modify_Records-d1e5033">
                <title>Modify Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                            <td colspan="3">Modify the configuration of a record in the domain.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                            <td colspan="3">Modify the configuration of records in the domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>204</returnvalue>,
                    <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <note>
                    <para> When the domain and/or record TTL is supplied by the user, either via a
                        create or update call, the TTL values must be 300 seconds or more.</para>
                </note>
                <para>The only attributes that you can modify on a
                    record (during a &PUT;) are the <code>data</code>,
                        <code>ttl</code>, and <code>comment</code>
                    attributes. However, the <code>name</code>
                    attribute of the record must always be specified
                    in the modify request as well.</para>
                <example>
                    <title>Modify Record Configuration Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-modify-record-config_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Record Configuration Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-modify-record-config_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Records Configuration Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-modify-records-config_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Records Configuration Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-modify-records-config_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Remove_Records-d1e5188">
                <title>Remove Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records/<parameter><replaceable>recordId</replaceable></parameter></td>
                            <td colspan="3">Remove a record from the domain.</td>
                        </tr> 
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records?id=<parameter><replaceable>recordId1</replaceable></parameter><?sbr?>&amp;id=<parameter><replaceable>recordId2</replaceable></parameter></td>
                            <td colspan="3">Remove multiple records from the domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para> These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <para> Normal Response Code(s): <returnvalue>204</returnvalue>,
                    <returnvalue>202</returnvalue>
                </para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>When a record is deleted, any and all record data is immediately purged and is
                    not recoverable via the API. So on a successful delete, subsequent requests for
                    the deleted record should return itemNotFound
                    (<errorcode>404</errorcode>).</para>
                <example>
                    <title>Remove Record Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-remove-record_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Remove Record Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-remove-record_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Remove Records Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-remove-records_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Remove Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-remove-records_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Transactionally, delete calls behave differently than other calls in that
                    deletes are never rolled back on exceptions, and multiple deletes in the same
                    request do not fail as a group. Instead, each delete is attempted even if one or
                    more fail. The response for a delete request in which one or more items fail
                    contains information regarding which items failed as well as information
                    regarding specific issues that caused the failure(s). See the examples that
                    follow.</para>
                <example>
                    <title>Delete Records Response (Failure): XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-remove-records-failure_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Records Response (Failure): JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../target/samples/dns-remove-records-failure_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>In the previous two response examples, the requested record objects could not
                    be deleted, since they were not found.</para>
            </section>
        </section>
        <?hard-pagebreak?>
    </chapter>
</book>
