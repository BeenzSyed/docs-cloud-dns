<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY PATCH   '<command xmlns="http://docbook.org/ns/docbook">PATCH</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">

]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="cdns-devguide-2"
    version="5.0">
    <title>Rackspace Managed DNS Developer Guide</title>
    <?rax status.bar.text="PREVIEW"?>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <year>2012</year>
            <year>2013</year>
            <year>2014</year>
            <year>2015</year>
            <year>2016</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v2</releaseinfo>
        <productname>Rackspace Managed DNS</productname>
        <pubdate>2016-01-11</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the
                    template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers
                interested in developing applications using the
                Rackspace Managed DNS Application Programming
                Interface (<abbrev>API</abbrev>).</para>
        </abstract>
        <revhistory>
            
            <revision>
                <date>2015-12-17</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial Preview release.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
        <raxm:metadata
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:displayname>API Developer Guide</raxm:displayname>
            <raxm:product version="v2">cdns</raxm:product>
            <raxm:priority>2</raxm:priority>
        </raxm:metadata>
    </info>
    <chapter xml:id="overview">
        <title>Overview</title>
        <info>
            <raxm:metadata
                xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <raxm:type>concept</raxm:type>
                <raxm:product version="v2">cdns</raxm:product>
                <raxm:priority>1</raxm:priority>
            </raxm:metadata>
        </info>
        <para>Rackspace Managed <glossterm>DNS</glossterm> is a
            globally distributed (Anycast network) service that allows
            Rackspace customers to manage Domain Name System (DNS)
            zones and resource records via a REST-based API for their
            account. Interactions with Rackspace Managed DNS occur
            programmatically via the API described in this Rackspace
            Managed DNS Developer Guide. </para>
        <para>Rackspace Managed DNS is powered by OpenStack Designate
            v2.0 (DNSaaS). Duplicate zones and resource records may
            not exist between Rackspace Cloud DNS and Rackspace
            Managed DNS.<note>
                <itemizedlist>
                    <listitem>
                        <para>Rackspace Managed DNS is currently
                            limited to Rackspace Cloud
                            accounts.</para>
                    </listitem>
                    <listitem>
                        <para>PTR records are currently supported in
                            Rackspace Cloud DNS, but will not be
                            supported by Managed DNS until the
                            Unlimited Availability launch phase. </para>
                    </listitem>
                </itemizedlist>
            </note></para>
        <note>
            <para>Refer to <xref linkend="dns_propagation"/> for
                information about DNS propagation.</para>
        </note>
        <para>The following figure shows an overview of Rackspace
            Managed DNS Infrastructure: <informalfigure>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/Cloud_DNS_Infographic-1.svg"
                            contentwidth="6in"/>
                    </imageobject>
                </mediaobject>
            </informalfigure>
        </para>
        <para>Issues and bug reports can be directed to:
                <email>ManagedDNS_Preview@rackspace.com</email>.</para>
        <para security="writeronly">We welcome feedback, comments, and bug reports at <link
                xlink:href="http://feedback.rackspace.com">Product
                Feedback Forum</link>.</para>
        <para security="reviewer">Reviewer: please give me the name of
            the list to use for EA to report feedback for previous
            line, pending EA email list creation.</para>
        <para security="writeronly">Issues and bug reports can be directed to your support
            team via ticket, chat, email, or phone.</para>
        <section xml:id="Intended_Audience-d1e122">
            <title>Intended Audience</title>
            <para>This Guide is intended to assist software developers
                who want to develop applications using the Managed DNS
                Service API. To use the information provided here, you
                should first have a general understanding of the DNS
                service. You should also be familiar with:</para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>DNS terminology</para>
                </listitem>
                <listitem>
                    <para>General operating principles of DNS</para>
                </listitem>
                <listitem>
                    <para>ReSTful web services</para>
                </listitem>
                <listitem>
                    <para>HTTP/1.1 conventions</para>
                </listitem>
                <listitem>
                    <para>JSON and/or XML data serialization
                        formats</para>
                </listitem>
            </itemizedlist>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Document_Change_History-d1e166">
            <title>Document Change History</title>
            <para>This version of the Developer Guide replaces and
                obsoletes all previous versions. The most recent
                changes are described in the table below:</para>
            <?rax revhistory?>
        </section>
        <section xml:id="Additional_Resources-d1e532">
            <title>Additional Resources</title>
            <para>You can download the most current versions of other
                API-related documents from <link
                    xlink:href="https://developer.rackspace.com/docs/"
                    >https://developer.rackspace.com/docs/</link>.</para>
            <para>For information about Rackspace Cloud products,
                refer to <link
                    xlink:href="http://www.rackspace.com/cloud/"
                    >http://www.rackspace.com/cloud</link>. This site
                also offers links to Rackspace's official support
                channels, including knowledge base articles, forums,
                phone, chat, and email.</para>
            <para>You can also follow Rackspace updates and
                announcements via twitter at <link
                    xlink:href="http://www.twitter.com/rackspace"
                    >http://www.twitter.com/rackspace</link>.</para>
            <para>This API uses standard HTTP 1.1 response codes as
                documented at <link
                    xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
                    >http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>.
            </para>
        </section>
    </chapter>
    <chapter xml:id="Concepts-d1e563">
        <title>Concepts</title>
        <info>
            <raxm:metadata
                xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <raxm:type>concept</raxm:type>
                <raxm:product version="v2">cdns</raxm:product>
                <raxm:priority>1</raxm:priority>
            </raxm:metadata>
        </info>
        <?dbhtml stop-chunking?>
        <para>To use the DNS API effectively, you should understand
            several key concepts:</para>
        <section xml:id="DNS-d1e573">
            <title>DNS</title>
            <para>The Domain Name System (DNS) is a system by which
                internet domain name-to-address and address-to-name
                resolutions are determined. All domains and their
                components, such as mail servers, utilize DNS to
                resolve to the appropriate locations. DNS servers are
                usually set up in a master-slave relationship such
                that failure of the master invokes the slave. DNS
                servers may also be clustered or replicated such that
                changes made to one DNS server are automatically
                propagated to other active servers.</para>
            <note>
                <para>DNS understands only ASCII, so the Managed DNS
                    Service provides conversion between UTF-8 and
                    ASCII on all calls into the system.</para>
            </note>
        </section>
        <section xml:id="Domain-d1e588">
            <title>Domain / Zone</title>
            <para>A domain, also known as a zone, is an
                entity/container of all DNS-related information
                containing one or more records.</para>
        </section>
        <section xml:id="subdomain">
            <title>Subdomain</title>
            <para>Also known as second level or child domains, a
                subdomain is any domain that is part of a larger
                domain. Subdomains allow you to divide and delegate a
                domain, or parent. Subdomains cannot be registered and
                are controlled by the parent domain.</para>
        </section>
        <section xml:id="Record-d1e607">
            <title>Record</title>
            <para>A DNS record belongs to a particular domain and is
                used to specify information about the domain. There
                are several types of DNS records. Each record type
                contains particular information used to describe that
                record's purpose. Examples include mail exchange (MX)
                records, which specify the mail server for a
                particular domain, and name server (NS) records, which
                specify the authoritative name servers for a domain.
            </para>
        </section>
        <section xml:id="RecordSet-d1e508">
            <title>Record Set</title>
            <para>A record set groups together a list of related
                records of the same type. It is the essential content
                of your zone file. Record sets are also referred to as
                    <emphasis>Resource Record Sets</emphasis> or
                    <emphasis>RRSets</emphasis>. </para>
        </section>
        <section xml:id="Domain_Owner-d1e616">
            <title>Domain Owner</title>
            <para>Within Rackspace Managed DNS, the account which
                creates the domain is the domain owner.</para>
            <note>
                <para>Domain registration is currently outside the
                    scope of the Rackspace Managed DNS API. Any
                    references to ownership and management of domain
                    information is only relevant within the context of
                    the Rackspace Managed DNS system.</para>
            </note>
        </section>
        <section xml:id="Zone-d1e254">
            <title>Zone</title>
            <para>A zone corresponds to a Cloud DNS domain.</para>
        </section>
    </chapter>
    <chapter xml:id="General_API_Information-d1e633">
        <title>General API Information</title>
        <info>
            <raxm:metadata
                xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <raxm:type>concept</raxm:type>
                <raxm:product version="v2">cdns</raxm:product>
                <raxm:priority>1</raxm:priority>
            </raxm:metadata>
        </info>
        <para>The Rackspace Managed DNS Service API is implemented
            using a ReSTful web service interface. Like other products
            in the Rackspace Cloud suite, the Managed DNS Service
            shares a common token-based authentication system that
            allows seamless access between products and
            services.</para>
        <note>
            <para>All requests to authenticate against and operate the
                service are performed using SSL over HTTP (HTTPS) on
                TCP port 443.</para>
        </note>
        <section xml:id="Authentication-d1e647">
            <title>Authentication</title>
            <?dbhtml stop-chunking?>
            <para>Every ReST request against the DNS service requires
                the inclusion of a specific authorization token,
                supplied by the <code>X-Auth-Token</code> HTTP header.
                Customers obtain this token by first using the
                Rackspace Cloud Authentication Service and supplying a
                valid username and API access key.</para>
            <section xml:id="Geographic_Endpoints_dle467">
                <title>Geographic Endpoints</title>
                <para>The Rackspace Cloud Authentication Service
                    serves as the entry point to all Rackspace Cloud
                    APIs and is itself a ReSTful web service.</para>
                <para>Use the following endpoint to access the
                    Authentication Service, regardless of US or UK
                    identities: </para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para><link xlink:href="&ENDPOINT-US-20;"
                                >&ENDPOINT-US-20;</link>
                        </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="Authenticate-d1e171">
                <title>Retrieving the Authentication Token</title>
                <informaltable rules="all">
                    <tbody>
                        <tr>
                            <td colspan="1">&POST; </td>
                            <td colspan="1"> v2.0/tokens </td>
                            <td colspan="4"> Authenticate to receive a
                                token and a service catalog. </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): unauthorized
                        (<errorcode>401</errorcode>), userDisabled
                        (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), authFault
                        (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>) </simpara>
                <para>The authenticate operation provides clients with
                    an authentication token and a list of regional
                    cloud endpoints. The sample requests and responses
                    in this section illustrate a general case. In your
                    authentication request, use your own credentials
                    rather than the sample values shown here for
                        <code>username</code> and <code>apiKey</code>.
                    When you authenticate successfully, the response
                    to your authentication request will include a
                    catalog of the services to which you have
                    subscribed rather than the sample values shown
                    here.</para>
                <note>
                    <title>Notes</title>
                    <itemizedlist>
                        <listitem>
                            <para>If you authenticate with username
                                and password credentials, you can set
                                up multi-factor authentication to add
                                an additional level of security to
                                your account. This feature is not
                                available for username and API key
                                credentials. For information about
                                setting up and using multi-factor
                                authentication, see <link
                                   xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/MFA_Ops.html"
                                   >Multi-factor authentication</link>
                                in the <citetitle>Cloud Identity
                                   Client Developer
                                Guide</citetitle>.</para>
                        </listitem>
                        <listitem>
                            <para>For information about other
                                authentication methods with examples,
                                see <link
                                   xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Token_Calls.html"
                                   >Authentication tokens</link> in
                                the <citetitle>Cloud Identity Client
                                   Developer Guide</citetitle>.
                            </para>
                        </listitem>
                    </itemizedlist>
                </note>
                <example security="writeronly">
                    <title>Auth Request for US Endpoint: XML</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="credentials.xml.user"
                                units="linecolumn" coords="13 17"/>
                            <area xml:id="credentials.xml.key"
                                units="linecolumn" coords="14 15"/>
                        </areaspec>
                        <programlisting language="xml">
<xi:include href="samples/db-credentials-20.xml" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <example>
                    <title>Auth Request for US Endpoint: JSON</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="credentials.xml.user"
                                units="linecolumn" coords="14 22"/>
                            <area xml:id="credentials.xml.key"
                                units="linecolumn" coords="15 20"/>
                        </areaspec>
                        <programlisting language="json">
<xi:include href="samples/db-credentials-20.json" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <calloutlist>
                    <callout arearefs="credentials.xml.user">
                        <para>The username supplied here is your
                            common Rackspace Cloud username.</para>
                    </callout>
                    <callout arearefs="credentials.xml.key">
                        <para>The key is your API access key. The key
                            can be obtained from the Rackspace Cloud
                            Control Panel in the <guimenu>&lt;Your
                                Account></guimenu>/<guimenuitem>API
                                Access</guimenuitem> section (login
                            here: <link
                                xlink:href="http://mycloud.rackspace.com/"
                                >Control Panel Login</link>).</para>
                    </callout>
                </calloutlist>
                <example security="writeronly">
                    <title>Auth Response for US Endpoint: XML</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="response.xml.namespaces"
                                units="linecolumn" coords="7 9"/>
                            <area xml:id="response.xml.token"
                                units="linecolumn" coords="15 10"/>
                            <area xml:id="response.xml.dfltregion"
                                units="linecolumn" coords="16 67"/>
                            <area xml:id="response.xml.role"
                                units="linecolumn" coords="17 12"/>
                            <area xml:id="response.xml.catalog"
                                units="linecolumn" coords="22 21"/>
                            <area xml:id="response.xml.servicetype"
                                units="linecolumn" coords="51 34"/>
                            <area xml:id="response.xml.servicename"
                                units="linecolumn" coords="51 54"/>
                            <area xml:id="response.xml.region"
                                units="linecolumn" coords="52 30"/>
                            <area xml:id="response.xml.tenant"
                                units="linecolumn" coords="53 66"/>
                            <area xml:id="response.xml.url"
                                units="linecolumn" coords="54 9"/>
                        </areaspec>
                        <programlisting language="xml"><xi:include href="samples/db-auth-20.xml" parse="text"/></programlisting>
                    </programlistingco>
                </example>
                <example xml:id="auth-response-example-json">
                    <title>Auth Response for US Endpoint: JSON</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="response.json.token"
                                units="linecolumn" coords="9 8"/>
                            <area xml:id="response.json.dfltregion"
                                units="linecolumn" coords="16 45"/>
                            <area xml:id="response.json.role"
                                units="linecolumn" coords="17 12"/>
                            <area xml:id="response.json.catalog"
                                units="linecolumn" coords="30 8"/>
                            <area xml:id="response.json.servicetype"
                                units="linecolumn" coords="114 16"/>
                            <area xml:id="response.json.servicename"
                                units="linecolumn" coords="113 16"/>
                            <area xml:id="response.json.region"
                                units="linecolumn" coords="104 24"/>
                            <area xml:id="response.json.tenant"
                                units="linecolumn" coords="101 24"/>
                            <area xml:id="response.json.url"
                                units="linecolumn" coords="102 24"/>
                        </areaspec>
                        <programlisting language="json"><xi:include href="samples/db-auth-20.json" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <para security="reviewer">Reviewer: service catalog
                    example above has been modified to add in DNS v2
                    endpoint. Please remember to fix the production
                    endpoint for EA.</para>
                <note>
                    <para>The information shown in the Auth Response
                        examples is for US-based accounts. If you
                        authenticate using a UK-based account, you
                        will see the service catalog information for
                        UK-based accounts.</para>
                </note>
                <calloutlist>
                    <callout arearefs="response.json.token">
                        <para>This token can be presented to a service
                            as evidence of authentication. Tokens are
                            valid for a finite duration; a token's
                            default lifespan is twenty-four
                            hours.</para>
                        <para>The token's <code>expires</code>
                            attribute denotes the time after which the
                            token will automatically become invalid. A
                            token may be manually revoked before the
                            time identified by the
                                <code>expires</code> attribute;
                                <code>expires</code> predicts a
                            token's maximum possible lifespan but does
                            not guarantee that it will reach that
                            lifespan. Clients are encouraged to cache
                            a token until it expires.</para>
                        <note>
                            <para>The token's expiration time is
                                formatted differently in the US and
                                UK. These response examples show the
                                US format.</para>
                        </note>
                        <para/>
                    </callout>
                    <callout arearefs="response.json.dfltregion">
                        <para>Users can be assigned a default region
                            so that, when there is a choice between
                            multiple endpoints associated with a
                            service in the user's catalog, the
                            endpoint for the user's default region
                            will be selected if it is available. In
                            this example, the user's default region is
                            DFW and several of the services in the
                            user's catalog offer endpoints in that
                            region and the ORD region; this user's
                            work will be directed to the DFW region
                            whenever possible.</para>
                        <para/>
                    </callout>
                    <callout arearefs="response.json.role">
                        <para>Users can be assigned multiple roles,
                            with each role providing specific
                            privileges. In this example,
                                <code>jsmith</code> is the
                            administrative user for the account,
                            holding the fully-privileged
                                <code>identity:admin</code> role.
                            Other users might hold other roles with
                            different privileges. Roles need not be
                            associated with actual job functions such
                            as Administrator, Operator, Developer,
                            Tester, or Trainer.</para>
                        <para/>
                    </callout>
                    <callout arearefs="response.json.catalog">
                        <para>The service catalog lists the services
                            this user can access. In this example, the
                            user can access one database service, one
                            load balancing service, two compute
                            services (Cloud Servers OpenStack and
                            Cloud Servers), two object storage
                            services (Cloud Files Content Distribution
                            Network (CDN), and Cloud Files), and one
                            DNS service. The catalog listing for each
                            service provides at least one endpoint URL
                            for that service. Other information, such
                            as regions, versions, and tenants, is
                            provided if it's relevant to this user's
                            access to this service.</para>
                        <para/>
                    </callout>
                    <callout arearefs="response.json.servicetype">
                        <para>The service type attribute identifies
                            services that perform similar functions,
                            whatever those services might be named. In
                            this example, the services named
                            cloudServers and cloudServersOpenStack are
                            both identified as
                                <code>type="compute"</code>,
                            identifying them as compute services even
                            though the word "compute" does not appear
                            in their names.</para>
                        <important>
                            <para>Use service type as the primary
                                value for locating a service. If
                                multiple endpoints of the same service
                                type exist in the same region, use
                                service name as the tiebreaker.</para>
                        </important>
                        <para/>
                    </callout>
                    <callout arearefs="response.json.servicename">
                        <para>The service name attribute identifies
                            each unique service in the catalog. Once a
                            service is created, its name does not
                            change. However, new services of the same
                            service type may be added to the catalog
                            with new names.</para>
                        <important>
                            <para>If you are programmatically parsing
                                an authentication response, use
                                service type rather than service name
                                as the basis for determining whether a
                                user has access to a particular kind
                                of service. Service type is stable
                                across all releases; new service types
                                may be developed, but existing service
                                types are not renamed. In this
                                example, <code>type="compute"</code>
                                identifies all the available compute
                                services, one of which is named
                                cloudServers and one of which is named
                                cloudServersOpenStack. New compute
                                service names may be added in future
                                releases; whatever the compute
                                services are named, you can always
                                recognize them by parsing for
                                   <code>type="compute"</code> in the
                                authentication response's service
                                catalog.</para>
                        </important>
                        <para/>
                    </callout>
                    <callout arearefs="response.json.region">
                        <para>A service may expose endpoints in
                            different regions. Regional endpoints
                            allow clients to provision resources in a
                            manner that provides high
                            availability.</para>
                        <para>Some services are not region-specific.
                            These services supply a single
                            non-regional endpoint and do not provide
                            access to internal URLs.</para>
                        <para/>
                    </callout>
                    <callout arearefs="response.json.tenant">
                        <para>Some services recognize specification of
                            a tenant. If a service does recognize
                            tenants, the format of the tenant
                            specification is defined only by the
                            service; for details about whether and how
                            to specify a tenant, check the
                            documentation for the service you are
                            using. The Managed DNS API requires the
                            use of a valid tenant.</para>
                        <para/>
                    </callout>
                    <callout arearefs="response.json.url">
                        <para>An endpoint can be assigned public and
                            internal URLs. A public URL is accessible
                            from anywhere. Access to a public URL
                            usually incurs traffic charges. Internal
                            URLs are only accessible to services
                            within the same region. Access to an
                            internal URL is free of charge.</para>
                        <para/>
                    </callout>
                </calloutlist>
                <para>Authentication tokens are typically valid for 24
                    hours. Applications should be designed to
                    re-authenticate after receiving a 401
                    (Unauthorized) response from a service
                    endpoint.</para>
                <important>
                    <para>If you are programmatically parsing an
                        authentication response, please be aware that
                        service names are stable for the life of the
                        particular service and can be used as keys.
                        You should also be aware that a user's service
                        catalog can include multiple uniquely-named
                        services which perform similar functions. For
                        example, cloudServersOpenStack is the
                        OpenStack version of compute whereas
                        cloudServers is the legacy version of compute;
                        the same user can have access to both
                        services. In Auth 2.0, the service type
                        attribute can be used as a key by which to
                        recognize similar services; see the tip
                        below.</para>
                </important>
                <tip>
                    <para>Beginning with Auth 2.0, the service catalog
                        includes a service type attribute to identify
                        services that perform similar functions but
                        have different names; for example,
                            <code>type="compute"</code> identifies
                        compute services such as cloudServers and
                        cloudServersOpenStack. Some developers have
                        found the service type attribute to be useful
                        in parsing the service catalog. For additional
                        information on Auth 2.0 (also known as the
                        Cloud Identity Service), refer to the
                            <citetitle>Cloud Identity Client Developer
                            Guide</citetitle> at <link
                            xlink:href="https://developer.rackspace.com/docs/"
                            >https://developer.rackspace.com/docs/</link>.</para>
                </tip>
                <para>DNS service endpoints are published in the
                    service catalog in the Auth response with the
                    account number, which is a required element of the
                    service endpoints. The examples shown here are for
                    authentication for US customers. Customers with
                    UK-based accounts will see different values in the
                    service catalog. Refer to the next section for
                    more information about service endpoints.</para>
            </section>
        </section>
        <section xml:id="Service_Access_Endpoints-d1e753">
            <title>Service Access/Endpoints</title>
            <para>The Managed DNS Service is not a regionalized
                service. DNS is therefore responsible for appropriate
                replication, caching, and overall maintenance of DNS
                data across regional boundaries to other DNS
                servers.</para>
            <para>You can find the service access/endpoint examples
                for Managed DNS in the table below.</para>
            <para>
                <table rules="all">
                    <caption>Service Access/Endpoint
                        Examples</caption>
                    <thead>
                        <tr align="center">

                            <td colspan="1">Endpoint</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">

                            <td colspan="1">
                                <code>https://preview.dns.api.rackspacecloud.com/v2/<replaceable>1234</replaceable></code></td>
                        </tr>
                    <tr align="left" security="writeronly">

                            <td colspan="1">
                                <code>https://lon.dns.api.rackspacecloud.com/v2.0/</code></td>
                        </tr>  
                              
                    </tbody>
                </table>
            </para>
            <para>Replace the sample tenant ID number, 1234, with your
                actual tenant id number returned as part of the
                authentication service response. You will find the
                actual account number after the final '/' in the
                publicURL field returned by the authentication
                response.</para>
            <para>
                <note><title>Notes</title>
                    <itemizedlist>
                        <listitem>
                            <para>The service catalog returned in the
                                auth response specifies the correct
                                service access endpoint to use for
                                accessing Managed DNS. Use the service
                                name (managedDNS) to locate the
                                correct endpoint in the service
                                catalog. See the auth response
                                examples in <xref
                                   linkend="Authenticate-d1e171"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </note>
            </para>
        </section>
        <section xml:id="DNS_service_versions">
            <title>DNS Service Versions</title>
            <para>The <glossterm>DNS</glossterm> service version
                defines the contract and build information for the
                API.</para>
            <section xml:id="Contract_Version-d1e825">
                <title>Contract Version</title>
                <para>The contract version denotes the data model and
                    behavior that the API supports. The requested
                    contract version is included in all request URLs.
                    Different contract versions of the API may be
                    available at any given time and are not guaranteed
                    to be compatible with one another. <example>
                        <title>Example Request URL (contract version
                            in <emphasis role="strong"
                            >bold</emphasis>)</title>
                        <programlisting>https://preview.dns.api.rackspacecloud.com/<emphasis role="strong">v2.0</emphasis>/zones</programlisting>
                    </example>
                    <note>
                        <para>This document pertains to contract
                            version 2.0.</para>
                    </note>
                </para>
            </section>
            <section xml:id="API_Version_Headers-d1e855" security="writeronly">
                <title>API Version Headers</title>
                <para>Every response from the Cloud DNS Service
                    includes custom headers that identify the specific
                    release version of the API that is in use. This
                    information is used to assist in diagnosing issues
                    and should be included in any support
                    request.</para>
                <para security="reviewer">Reviewer: I don't see the X-API-VERSION being
                    returned in the Getting Started response examples.
                    Is this section still accurate, or should it be
                    removed?</para>
                <table rules="all">
                    <caption>API Version Headers</caption>
                    <?dbfo keep-together="always"?>
                    <thead>
                        <tr align="center">
                            <td>Header Name</td>
                            <td>Description</td>
                            <td>Example Value</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>X-API-VERSION</td>
                            <td>The deployed version of the Cloud DNS
                                Service. This is used to identify
                                releases, and it should correspond to
                                the contract version in the URL (that
                                is, v2).</td>
                            <td>X-API-VERSION=2.0.1</td>
                        </tr>
                    </tbody>
                </table>
            </section>
        </section>
        <section xml:id="Request_Response_Types-d1e903">
            <title>Request/Response Types</title>
            <para>The DNS API supports the JSON data serialization
                format. The request format is specified using the
                    <code>Content-Type</code> header and is required
                for calls that have a request body. The response
                format can be specified in requests either by using
                the <code>Accept</code> header, or by adding a
                    <code>.json</code> extension to the request URI.
                If no response format is specified, JSON is the
                default. If conflicting formats are specified using
                both an <code>Accept</code> header and a query
                extension, the query extension takes
                precedence.</para>
            <table rules="all">
                <caption>Response Format</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td>Format</td>
                        <td>Accept Header</td>
                        <td>Query Extension</td>
                        <td>Default</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>JSON</td>
                        <td>application/json</td>
                        <td>.json</td>
                        <td>Yes</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="sync_asynch_responses">
            <title>Synchronous and Asynchronous Responses</title>
            <para>All Create, Update, and Delete operations can be
                either synchronous or asynchronous. </para>
            <para>With <emphasis>synchronous</emphasis> requests, the
                caller waits until the call returns with the specified
                code and response body.</para>
            <para>With <emphasis>asynchronous</emphasis> requests, the
                caller receives status information and can determine
                when the operation is complete at a later time. In
                other words, the caller does not need to wait for the
                results before continuing.</para>
            <para><emphasis role="bold">To determine whether a given
                    API call was synchronous or
                    asynchronous:</emphasis></para>
            <para>Synchronous</para>
            <para>Synchronous Create/Update/Delete API calls will
                return an HTTP status of 201 Created, 200 OK, or 204
                No Content respectively. Additionally, resources which
                contain a <code>status</code> property
                    <emphasis>must</emphasis> have the value
                    <code>ACTIVE</code>.</para>
            <para>Asynchronous</para>
            <para>Asynchronous Create/Update/Delete API calls will
                return an HTTP status of 202 Accepted. The
                    <code>status</code> property <emphasis>must
                    not</emphasis> have the value <code>ACTIVE</code>. </para>
            <para security="reviewer">Reviewer: please check with Paul
                Glass to validate that the following section reflects
                async differences for Managed DNS compared to behavior
                for async with Cloud DNS (aka Classic).  The section
                is generally correct except using
                https://preview.dns.api.rackspacecloud.com/v2/1234/
                for endpoint. Please update after the official prod
                endpoint becomes available. </para>
            <para><emphasis role="bold">There are two ways to check
                    whether an asynchronous request is
                    complete:</emphasis><itemizedlist>
                    <listitem>
                        <para>Query the collections link, for example:
                                <link
                                xlink:href="http://localhost:9001/v2/zones"
                                >https://preview.dns.api.rackspacecloud.com/v2/1234/zones</link>.
                            (Examples of collections are zones and
                            recordsets.) Note that you can also filter
                            collections by status, for example: <link
                                xlink:href="http://localhost:9001/v2/zones?status=PENDING"
                                >https://preview.dns.api.rackspacecloud.com/v2/1234/zones?status=PENDING</link>.</para>
                    </listitem>
                </itemizedlist><itemizedlist>
                    <listitem>
                        <para> Query the <code>self</code> link
                            included in a given response: </para>
                        <programlisting>    {

        "status": "ACTIVE",

        "description": null,

        "updated_at": "2014-07-08T20:28:31.000000",

        "ttl": 86400,

        "serial": 1404851315,

        "id": "a4e29ed3-d7a4-4e4d-945d-ce64678d3b94",

        "name": "example.com.",

        "created_at": "2014-07-08T20:28:19.000000",

        "pool_id": "572ba08c-d929-4c70-8e42-03824bb24ca2",

        "version": 1,

        "project_id": "noauth-project",

        "email": "hostmaster@example.com",

        "<emphasis role="bold">links</emphasis>": {

          "<emphasis role="bold">self</emphasis>": "http://dns.provider.com/v2/zones/a4e29ed3-d7a4-4e4d-945d-ce64678d3b94"

        }</programlisting>
                    </listitem>
                </itemizedlist></para>
            <para>Clients can determine if an asynchronous job is
                complete by querying the <code>self</code> link and
                checking the value of the <code>status</code>
                property. Once the job is complete, the
                    <code>status</code> field will be
                    <code>ACTIVE</code>.</para>
    <!--          <para security="reviewer">Reviewer: The material that
                follows below is from DNS v1 Devguide. Does any of it
                need to be maintained here, or can I delete it?</para>
            <para>&PUT;, &POST;, and &DELETE; calls are
                    <emphasis>asynchronous</emphasis>, however, since
                they may take some time to process. Therefore they
                return 202 ACCEPTED responses containing information
                with a callback URL, which allows the progress,
                status, and/or response information of the call to be
                retrieved at a later point in time.</para>
            <para>When the status of a request is queried (via a
                    <code>callbackUrl</code> supplied by the API),
                only basic information regarding the status of the job
                is returned by default. If more detail is desired, any
                status URL may include an optional
                    <code>showDetails</code> query parameter that will
                display more information regarding the original
                request:</para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                        <td colspan="2">Representations</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">
                                /status/<parameter>jobId</parameter>?<?sbr?><parameter>showDetails</parameter>=<code>[true|false]</code>
                        </td>
                        <td colspan="3">List status of the specified
                            asynchronous request. Display details, as
                            specified by the
                                <parameter>showDetails</parameter>
                            parameter. </td>
                        <td colspan="2">XML, JSON</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s):
                    <returnvalue>200</returnvalue>
            </simpara>
            <simpara> Error Response Code(s): dnsFault
                    (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized
                    (<errorcode>401</errorcode>), badRequest
                    (<errorcode>400</errorcode>), itemNotFound
                    (<errorcode>404</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
            <note>
                <para>The results of asynchronous calls are retained
                    for up to 24 hours.</para>
            </note>
            <note>
                <para>If a request body does not pass initial
                    validation or an error condition arises, you may
                    receive an immediate error response from the
                    request.</para>
            </note>
            <para>The following table shows the complete set of
                attributes for asynchronous responses:</para>
            <table rules="all">
                <caption>Attributes for Asynchronous
                    Responses</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td colspan="1">Attribute</td>
                        <td colspan="4">Description</td>
                        <td colspan="1">Inclusion</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">jobId</td>
                        <td colspan="4">An identifier for the specific
                            request.</td>
                        <td colspan="1">Basic and Detail</td>
                    </tr>
                    <tr>
                        <td colspan="1">callbackUrl</td>
                        <td colspan="4">Resource locator for querying
                            the status of the request.</td>
                        <td colspan="1">Basic and Detail</td>
                    </tr>
                    <tr>
                        <td colspan="1">status</td>
                        <td colspan="4">
                            <para>An indicator of the request status:
                                INITIALIZED, RUNNING, COMPLETED, or
                                ERROR.</para>
                            <note>
                                <para>INITIALIZED is the status that
                                   immediately precedes RUNNING and is
                                   the first possible state of a job.
                                   It indicates acceptance of the
                                   job.</para>
                            </note>
                        </td>
                        <td colspan="1">Basic and Detail</td>
                    </tr>
                    <tr>
                        <td colspan="1">requestUrl</td>
                        <td colspan="4">The url of the original
                            request.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                    <tr>
                        <td colspan="1">verb</td>
                        <td colspan="4">The type of the original
                            request: PUT, POST, or DELETE.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                    <tr>
                        <td colspan="1">request</td>
                        <td colspan="4">The original request data, if
                            any.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                    <tr>
                        <td colspan="1">response</td>
                        <td colspan="4">The results of a COMPLETE
                            operation, if any.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                    <tr>
                        <td colspan="1">error</td>
                        <td colspan="4">The results of an ERROR
                            operation.</td>
                        <td colspan="1">Detail only</td>
                    </tr>
                </tbody>
            </table>
            <para>The asynchronous response body will look similar to
                the following examples, depending on whether basic or
                detailed information is requested.</para>
            <para>If you use the callback URL
                    <emphasis>without</emphasis> specifying the query
                parameter <code>showDetails=true</code>, only
                    <emphasis>basic</emphasis> information is returned
                (jobId, callbackUrl, and status attributes):</para>
            <example>
                <title>Basic Success Asynchronous Request: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-success_request.xml" parse="text"><xi:fallback>Missing code sample samples/dns-async-success_request.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Basic Success Asynchronous Request:
                    JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-success_request.json" parse="text"><xi:fallback>Missing code sample samples/dns-async-success_request.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>When a request is made to the callback URL provided
                and the job is still running, another
                    <returnvalue>202</returnvalue> ACCEPTED response
                is returned with the same information as the previous
                one.</para>
            <para><?rax-fo keep-with-next?>If the request is
                successful, the <code>status</code> is
                    <code>COMPLETED</code>:</para>
            <example>
                <title>Basic Success Asynchronous Response:
                    XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-success_response.xml" parse="text"><xi:fallback>Missing code sample samples/dns-async-success_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Basic Success Asynchronous Response:
                    JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-success_response.json" parse="text"><xi:fallback>Missing code sample samples/dns-async-success_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>If you specify the query parameter
                    <code>showDetails=true</code> for the callback
                URL, <emphasis>detailed</emphasis> information is
                returned (all attributes) :</para>
            <example>
                <title>Detail Success Asynchronous Request:
                    XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-success-detail_request.xml" parse="text"><xi:fallback>Missing code sample samples/dns-async-success-detail_request.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Detail Success Asynchronous Request:
                    JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-success-detail_request.json" parse="text"><xi:fallback>Missing code sample samples/dns-async-success-detail_request.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para><?rax-fo keep-with-next?>If the request is
                successful, this includes the <code>response</code>,
                which contains the results of the operation:</para>
            <example>
                <title>Detail Success Asynchronous Response:
                    XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-success-detail_response.xml" parse="text"><xi:fallback>Missing code sample samples/dns-async-success-detail_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Detail Success Asynchronous Response:
                    JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-success-detail_response.json" parse="text"><xi:fallback>Missing code sample samples/dns-async-success-detail_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <note>
                <para>Examples of successful responses in the rest of
                    this guide only demonstrate the
                        <emphasis>contents</emphasis> of the
                    asynchronous <code>response</code> attribute.
                    Additional attributes and elements have been
                    omitted for clarity.</para>
            </note>
            <para><?rax-fo keep-with-next?>If an error occurs as a
                result of processing the original request, querying
                the callback URL will return the information about the
                error. If you use the callback URL without specifying
                the query parameter <code>showDetails=true</code>,
                only basic information is provided:</para>
            <example>
                <title>Basic Error Asynchronous Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-error_response.xml" parse="text"><xi:fallback>Missing code sample samples/dns-async-error_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Basic Error Asynchronous Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-error_response.json" parse="text"><xi:fallback>Missing code sample samples/dns-async-error_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para><?rax-fo keep-with-next?>If you use the callback URL
                with the query parameter
                <code>showDetails=true</code>, then detailed
                information is provided:</para>
            <example>
                <title>Detail Error Asynchronous Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-error-detail_response.xml" parse="text"><xi:fallback>Missing code sample samples/dns-async-error_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Detail Error Asynchronous Response:
                    JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-async-error-detail_response.json" parse="text"><xi:fallback>Missing code sample samples/dns-async-error_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <note>
                <para>Examples of error responses in the rest of this
                    guide only show the <emphasis>contents</emphasis>
                    of the asynchronous <code>error</code> attribute.
                    Additional attributes and elements have been
                    omitted for clarity.</para>
            </note>
            <section xml:id="viewing_status_all_asynch_jobs">
                <title>Viewing Status of All Asynchronous Job
                    Requests<?sbr?></title>
                <para>As well as viewing status for a
                        <emphasis>particular job ID</emphasis>, as
                    described in the previous section, you can also
                    view status information for
                        <emphasis>all</emphasis> asynchronous job
                    requests for an account. You can also filter the
                    information requested by using the following
                    optional boolean request parameters:</para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para><code>showErrors</code> &ndash; if
                                <code>true</code>, specifies that
                            errors are shown</para>
                    </listitem>
                    <listitem>
                        <para><code>showRunning</code> &ndash; if
                                <code>true</code>, specifies that jobs
                            still running are shown</para>
                    </listitem>
                    <listitem>
                        <para><code>showCompleted</code> &ndash; if
                                <code>true</code>, specifies that
                            completed jobs are shown</para>
                    </listitem>
                    <listitem>
                        <para><code>showDetails</code>&ndash; if
                                <code>true</code>, specifies that job
                            details are shown</para>
                    </listitem>
                </itemizedlist>
                <para>In addition, paging request parameters
                        <code>limit</code> and <code>offset</code> can
                    also be supplied for the request. Refer to <xref
                        linkend="pagination"/> for details.</para>
                <para>The default values for these request parameters
                    (if they are not specified) are:</para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para><code>showErrors=true</code></para>
                    </listitem>
                    <listitem>
                        <para><code>showRunning=true</code></para>
                    </listitem>
                    <listitem>
                        <para><code>showCompleted=true</code></para>
                    </listitem>
                    <listitem>
                        <para><code>showDetails=false</code></para>
                    </listitem>
                    <listitem>
                        <para><code>limit=100</code></para>
                    </listitem>
                    <listitem>
                        <para><code>offset=0</code></para>
                    </listitem>
                </itemizedlist>
                <informaltable rules="all" width="100%">
                    <col width="10%"/>
                    <col width="40%"/>
                    <col width="35%"/>
                    <col width="15%"/>

                    <thead>
                        <tr align="center">
                            <td>Verb</td>
                            <td>URI</td>
                            <td>Description</td>
                            <td>Representations</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>&GET;</td>
                            <td>
                                   /status?<?sbr?><parameter>showDetails</parameter>=<code>[true|false]</code>
                                   &amp;<parameter>showErrors</parameter>=<code>[true|false]</code>
                                   &amp;<parameter>showRunning</parameter>=<code>[true|false]</code>
                                   &amp;<parameter>showCompleted</parameter>=<code>[true|false]</code>
                                   &amp;<parameter>limit</parameter>=<replaceable>int1</replaceable>
                                   &amp;<parameter>offset</parameter>=<replaceable>int2</replaceable></td>
                            <td>List status of all asynchronous job
                                requests for an account and filter the
                                information requested by using the
                                optional boolean request parameters. </td>
                            <td>XML, JSON</td>
                        </tr>
                    </tbody>
                </informaltable>


                <simpara> Normal Response Code(s):
                        <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <para>By omitting the
                        <parameter>showDetails</parameter> parameter
                    from the request (or explicitly setting it to
                        <code>false</code>), you can request basic
                    information for all errors, running jobs, and
                    completed jobs for the account. By default (with
                    no query parameters specified) only
                        <emphasis>basic</emphasis> information is
                    requested:</para>
                <example>
                    <title>Get Basic Status for All Jobs Request:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-get-jobs-status-no-details_request.xml" parse="text"><xi:fallback>Missing code sample samples/dns-get-jobs-status-no-details_request.xml<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Get Basic Status for All Jobs Request:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-get-jobs-status-no-details_request.json" parse="text"><xi:fallback>Missing code sample samples/dns-get-jobs-status-no-details_request.json<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para><?rax-fo keep-with-next?>The response lists all
                    the user's jobs that have had errors, followed by
                    those still running, and then those that have
                    completed:</para>
                <example>
                    <title>Get Basic Status for All Jobs Response:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-get-jobs-status-no-details_response.xml" parse="text"><xi:fallback>Missing code sample samples/dns-get-jobs-status-no-details_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Get Basic Status for All Jobs Response:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-get-jobs-status-no-details_response.json" parse="text"><xi:fallback>Missing code sample samples/dns-get-jobs-status-no-details_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para><?rax-fo keep-with-next?>To get
                        <emphasis>detailed</emphasis> status
                    information for all jobs, set the
                        <parameter>showDetails</parameter> parameter
                    to true (<code>showDetails=true</code>):</para>

                <example>
                    <title>Get Detailed Status for All Jobs Request:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-get-jobs-status-with-details_request.xml" parse="text"><xi:fallback>Missing code sample samples/dns-get-jobs-status-with-details_request.xml<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Get Detailed Status for All Jobs Request:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-get-jobs-status-with-details_request.json" parse="text"><xi:fallback>Missing code sample samples/dns-get-jobs-status-with-details_request.json<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para><?rax-fo keep-with-next?>The response lists all
                    the user's jobs that have had errors, followed by
                    those still running, and then those that have
                    completed:</para>
                <example>
                    <title>Get Detailed Status for All Jobs Response:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-get-jobs-status-with-details_response.xml" parse="text"><xi:fallback>Missing code sample samples/dns-get-jobs-status-with-details_response.xml<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Get Detailed Status for All Jobs Response:
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-get-jobs-status-with-details_response.json" parse="text"><xi:fallback>Missing code sample samples/dns-get-jobs-status-with-details_response.json<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>  -->

        </section>
        <section xml:id="Content_Compression-d1e1120" security="writeronly">
            <title>Content Compression</title>
            <para security="reviewer">Reviewer: Can you please supply
                me with the necessary info to update this section for
                v2 as needed? See:  <link
                    xlink:href="https://repose.atlassian.net/wiki/display/REPOSE/Compression+filter"
                    >https://repose.atlassian.net/wiki/display/REPOSE/Compression+filter</link>.
                This will not be supported for early access but is
                planned for UA. </para>
            <para>Request and response body data may be encoded with
                gzip compression to accelerate interactive performance
                of API calls and responses. This is controlled using
                the <code>Accept-Encoding</code> header on the request
                from the client and indicated by the
                    <code>Content-Encoding</code> header in the server
                response. Unless the header is explicitly set,
                encoding defaults to disabled.</para>
            <table rules="all">
                <caption>Encoding Headers</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td>Header Type</td>
                        <td>Name</td>
                        <td>Value</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>HTTP/1.1 Request</td>
                        <td><code>Accept-Encoding</code></td>
                        <td>gzip</td>
                    </tr>
                    <tr>
                        <td>HTTP/1.1 Response</td>
                        <td><code>Content-Encoding</code></td>
                        <td>gzip</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="Persistent_Connections-d1e1187" security="writeronly">
            <title>Persistent Connections</title>
            <para security="reviewer">Reviewer: Can you please supply
                me with the necessary info to update this section for
                v2 as needed?</para>
            <para>By default, the API supports persistent connections
                via HTTP/1.1 keepalives. All connections will be kept
                alive unless the connection header is set to
                close.</para>
            <para>To prevent abuse, HTTP sessions have a timeout of 20
                seconds before being closed.</para>
            <note>
                <para>The server may close the connection at any time
                    and clients should not rely on this behavior.
                </para>
            </note>
        </section>
        <section xml:id="Limits-d1e1208">
            <title>Limits</title>
            <para>All accounts, by default, have a preconfigured set
                of thresholds (or limits) to manage capacity and
                prevent abuse of the system. The system recognizes two
                kinds of limits: <firstterm>rate limits</firstterm>
                and <firstterm>absolute limits</firstterm>. Rate
                limits are thresholds that are reset after a certain
                amount of time passes. Absolute limits are
                fixed.</para>
            <section xml:id="Rate_Limits-d1e1222">
                <title>Rate Limits</title>
                <para>Rate limits are specified in terms of both a
                    human-readable wild-card URI and a
                    machine-processable regular expression. The
                    regular expression boundary matcher '^' takes
                    effect after the root URI path. For example, the
                    regular expression
                        ^/v2/<parameter>1234</parameter>/zones would
                    match the bolded portion of the following URI:
                        https://dns.api.rackspacecloud.com<emphasis
                        role="bold">/v2/1234/zones</emphasis>.</para>
                <para>The following table specifies the default rate
                    limits for all API operations for all &GET;,
                    &POST;, &PUT;, and &DELETE; calls for zones:</para>
                <table rules="all">
                    <caption>Default Rate Limits</caption>
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            
                            <td colspan="1">Default</td>
                        </tr>
                    </thead>
                    <tbody>
                        
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">*/zones*</td>
                            
                            <td colspan="1">420/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">*/zones*</td>
                            
                            <td colspan="1">40/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">*/zones*</td>
                            
                            <td colspan="1">40/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PATCH;</td>
                            <td colspan="2">*/zones*</td>
                            
                            <td colspan="1">40/minute</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2">*/zones*</td>
                            
                            <td colspan="1">10/minute</td>
                        </tr>
                    </tbody>
                </table>
                <para>If you exceed the thresholds established for
                    your account, a <errorcode>413</errorcode> HTTP
                    response will be returned with a
                        <code>Reply-After</code> header to notify the
                    client when it can attempt to try again. The
                        <code>Reply-After</code> header is an ISO 8601
                    Date/Time field, for example "2012-10-10T21:21:15Z".<note>
                        <para>The first entry in the Default Rate
                            Limits table above is for simple STATUS
                            calls after a &POST;, &PUT;, or &DELETE;
                            to retrieve the status details; for
                            example: <link
                                xlink:href="https://dns.api.rackspacecloud.com/v2/1234/status/0062ac6e-3d07-4980-afab-5fd3a806ef4d"
                                >
                                https://dns.api.rackspacecloud.com/v2/1234/status/0062ac6e-3d07-4980-afab-5fd3a806ef4d</link>.
                            This status call has a limit of 5 requests
                            per second.</para>
                    </note></para>
            </section>
            <section xml:id="Absolute_Limits-d1e1397">
                <title>Absolute Limits</title>
                <para>&POST; and &PUT; and &PATCH; calls are subject to absolute
                    limits. Absoulte limits are quotas on the number of a certain
                    resource a user is allowed to create.</para>
                <section xml:id="Zone_Limits">
                    <title>Zone Limits</title>
                    <para>By default users may have up to 500 zones
                        per Cloud account (including sub-zones). When
                        a user submits a request to create new zones,
                        the system will only accept
                        the request if the total number of existing
                        plus requested zones is within
                        the account zone limit. If the total exceeds
                        the account zone limit, the entire request
                        will be rejected and the following message
                        will be returned:</para>
                    <example>
                        <title>Example Zone Limit Response:
                            JSON</title>
                        <programlisting language="xml"><xi:include href="samples-2/dns-example-zone-limit_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <note>
                        <para>Any zones or recordsets that
                            are submitted in any request that causes
                            zone limits to be exceeded will not be
                            provisioned and the entire request will be
                            rejected.</para>
                    </note>
                    <note>
                        <para>The account zone limit applies to any
                            API request that can be used to create a
                            zone. An account may have
                            a non-default limit if determined
                            necessary by Support.</para>
                    </note>
                    <section xml:id="Record_Limits">
                        <title>Recordset and Record Limits</title>
                        <para>By default, users may have up to 500
                            recordsets total per zone per Cloud account
                            and up to 50 records per
                            recordset.</para>
                        <para>When a user submits a request to create
                            a new recordset, the system
                            will only accept the request if the total
                            number of existing plus requested record
                            or recordset is within these limits. If
                            the total number of recordsets and/or
                            recordsets on a specified zone exceeds
                            these limits, the entire request will be
                            rejected and the following message will be
                            returned:</para>
                        <example>
                            <title>Example Zone Recordset Limit
                                Response: JSON</title>
                            <programlisting language="xml"><xi:include href="samples-2/dns-example-recordset-limit_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                        </example>
                        <note>
                            <para>Any zones or recordsets
                                that are submitted in any request that
                                causes recordset limits to be exceeded
                                will not be provisioned and the entire
                                request will be rejected.</para>
                        </note>
                        <note>
                            <para>The limits apply to any API request
                                that can be used to create one or more
                                recordsets. An account may have a
                                non-default recordset limit if
                                determined necessary by Support.
                            </para>
                        </note>
                    </section>
                </section>
            </section>
            <section security="writeronly" xml:id="view_limits_ov">
                <title>Viewing Current Limits</title>
                <para>Users can view their current rate and absolute
                    (including zone and recordset) limits.</para>
            </section>
        </section>
        <section xml:id="datetimeformat">
            <title>Date and Time Format</title>
            <para>The DNS service uses an ISO 8601 compliant date
                format for the display and consumption of date and
                time values.</para>
            <para>The system time is expressed as UTC.</para>
            <example>
                <title>Date and Time Format</title>
                <programlisting>yyyy-MM-dd'T'HH:mm:ssZ</programlisting>
                <para>For example, the UTC-5 format for May 19th, 2015
                    at 8:07:08 a.m. is</para>
                <programlisting>2015-05-19T08:07:08-05:00</programlisting>
            </example>
            <table rules="all">
                <caption>Date and Time Format Codes</caption>
                <thead>
                    <tr>
                        <td>Code</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>yyyy</td>
                        <td>Four digit year</td>
                    </tr>
                    <tr>
                        <td>MM</td>
                        <td>Two digit month</td>
                    </tr>
                    <tr>
                        <td>dd</td>
                        <td>Two digit day</td>
                    </tr>
                    <tr>
                        <td>T</td>
                        <td>Separator for date/time</td>
                    </tr>
                    <tr>
                        <td>HH</td>
                        <td>Two digit hour (00-23)</td>
                    </tr>
                    <tr>
                        <td>mm</td>
                        <td>Two digit minute</td>
                    </tr>
                    <tr>
                        <td>ss</td>
                        <td>Two digit second</td>
                    </tr>
                    <tr>
                        <td>Z</td>
                        <td>ISO 8601 timezone (offset from GMT). If Z
                            is not replaced with the offset from GMT,
                            it indicates a 00:00 offset.</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="descriptions">
            <title>Descriptions</title>
            <para>Descriptions are supported for zones and recordsets
                and their requests and responses using the
                    <code>description</code> attribute. See the
                examples that follow.</para>
            <example>
                <title>Example Response with Comments: JSON</title>
                <programlisting language="xml"><xi:include href="samples-2/dns-example-response-w-comment_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>Notes for descriptions:</para>
            <itemizedlist>
                <listitem>
                    <para>Are limited to 160 characters each</para>
                </listitem>
                <listitem>
                    <para>Can be any text characters</para>
                </listitem>
                <listitem>
                    <para>Are optional</para>
                </listitem>
                <listitem>
                    <para>To remove a comment, set it to the empty
                        string, for example: description=""</para>
                </listitem>
                <listitem>
                    <para>Are returned on &GET; calls for both zones
                        and recordsets regardless of whether the call
                        is a single or multiple call, and regardless
                        of whether it is a detail or non-detail
                        call</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="collections">
            <title>Collections</title>
            <para>A collection is a set of related objects, for
                example a collection of zones, or a collection of
                recordsets. </para>
            <para>The following conventions apply to all collections,
                unless otherwise noted. </para>
            <section xml:id="links">
                <title>Links</title>
                <para>A <code>links</code> object will exist at the
                    root of all collection responses. At the minimun,
                    it will contain a <code>self</code> link. If the
                    collection resultset is not complete, a
                        <code>next</code> and/or <code>previous</code>
                    link will be included for pagination to point to
                    the respective items in the collection. </para>
                <example>
                    <title>Example of <code>links</code> in the
                        response for a collection</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">HTTP/1.1 200 OK
Vary: Accept
Content-Type: application/json  
</programlisting>
                    <programlisting language="xml"> {
   "examples": [{
     "id": "a86dba58-0043-4cc6-a1bb-69d5e86f3ca3",
     "....": "...."
   }, {
     "id": "fdd7b0dc-52a3-491e-829f-41d18e1d3ada",
     "....": "...."
   }],
   "links": {
     "self": "&lt;URL for This Page>",
     "next": "&lt;URL for Next Page>",
     "previous": "&lt;URL for Previous Page>"
   }
 }   
</programlisting>
                </example>
            </section>
            <section xml:id="pagination">
                <title>Pagination</title>
                <para>Pagination is available on all collections and
                    is controlled using a combination of two query
                    parameters:
                        <code>marker=&lt;UUID&gt;&amp;limit=&lt;INTEGER&gt;</code>.
                    Collection responses will include a
                        <code>links</code> object containing absolute
                    URLs for the next and previous pages. These links
                    may be omitted, or null, at the edges of a
                    paginated collection.</para>
                <para>To navigate the collection, the parameters
                        <code>limit</code> and <code>marker</code> can
                    be set in the URI (for example:
                        <code>?limit=100&amp;marker=&lt;UUID&gt;</code>).
                    The <code>marker</code> parameter is the ID of the
                    last item in the previous list. Items are sorted
                    by create time in descending order. When a create
                    time is not available, they are sorted by ID. The
                        <code>limit</code> parameter sets the page
                    size. Both parameters are optional.</para>
                <example>
                    <title>Request example for a paginated
                        collection</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">GET /v2/examples?marker=c74af170-0673-11e3-8ffd-0800200c9a66&amp;limit=2 HTTP/1.1
 Host: dns.provider.com
 Accept: application/json
 X-Auth-Token: ************  
</programlisting>
                </example>
                <example>
                    <title>Response example for a paginated
                        collection</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">HTTP/1.1 200 OK
 Vary: Accept
 Content-Type: application/json  
</programlisting>
                    <programlisting language="xml"> {
   "examples": [{
     "id": "a86dba58-0043-4cc6-a1bb-69d5e86f3ca3",
     "....": "...."
   }, {
     "id": "fdd7b0dc-52a3-491e-829f-41d18e1d3ada",
     "....": "...."
   }],
   "links": {
     "self": "https://dns.provider.com/v2/examples?marker=e728bfe0-0673-11e3-8ffd-0800200c9a66&amp;limit=2",
     "next": "https://dns.provider.com/v2/examples?marker=fdd7b0dc-52a3-491e-829f-41d18e1d3ada&amp;limit=2",
     "previous": "https://dns.provider.com/v2/examples?marker=d9890c50-0673-11e3-8ffd-0800200c9a66&amp;limit=2" 
   }
 }  
</programlisting>
                </example>
            </section>
            <section xml:id="filtering">
                <title>Filtering</title>
                <para>Filtering is available on all collections and is
                    controlled using query parameters, which match the
                    name of the attribute being filtered. It is
                        <emphasis>not</emphasis> required that all
                    attributes are available as filter targets, but
                    the majority will be. Filters are an exact match.
                    Use of wildcard or substring matching is not
                    supported.</para>
                <para>Currently, the following attributes support filtering:<itemizedlist>
                        <listitem>
                            <para>Record sets: name, type, ttl, data,
                                description, status</para>
                        </listitem>
                        <listitem>
                            <para>Zones: name, email, ttl,
                                description, status</para>
                        </listitem>
                    </itemizedlist></para>
                <para>Filters can be an exact match search or a
                    wildcard search. Currently, wildcard search is
                    supported using the '*' character.</para>
                <para>The following example takes a collection of
                    zones and filters it by the “name”
                    parameter.</para>
                <example>
                    <title>Request example for a collection of
                        zones</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"> GET /v2/zones?name=example.com. HTTP/1.1 
 Host: dns.provider.com
 Accept: application/json
 X-Auth-Token: *************  
</programlisting>
                </example>
                <example>
                    <title>Response example for a collection of
                        zones</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">HTTP/1.1 200 OK
Content-Type: application/json

{
  "zones": [{
    "status": "ACTIVE",
    "description": null,
    "updated_at": "2014-07-08T20:28:31.000000",
    "ttl": 86400,
    "serial": 1404851315,
    "id": "a4e29ed3-d7a4-4e4d-945d-ce64678d3b94",
    "name": "example.com.",
    "created_at": "2014-07-08T20:28:19.000000",
    "pool_id": "572ba08c-d929-4c70-8e42-03824bb24ca2",
    "version": 1,
    "project_id": "noauth-project",
    "email": "hostmaster@example.com",
    "links": {
      "self": "http://dns.provider.com/v2/zones/a4e29ed3-d7a4-4e4d-945d-ce64678d3b94"
    }
  }],
  "links": {
    "self": "https://dns.provider.com/v2/zones?name=example.com."
  }
} 
</programlisting>
                </example>
                <para>Wildcards can be placed anywhere within the
                    query. The following example demonstrates the use
                    of wildcards on the right side of a query:</para>
                <example>
                    <title>Request example for a wildcard</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">GET /v2/zones?name=example* HTTP/1.1
Host: dns.provider.com
Accept: application/json
X-Auth-Token: ************* 
</programlisting>
                </example>
                <example>
                    <title>Response example for a wildcard</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">HTTP/1.1 200 OK
Content-Type: application/json

{
  "zones": [{
    "status": "ACTIVE",
    "description": null,
    "updated_at": "2014-07-08T20:28:31.000000",
    "ttl": 86400,
    "serial": 1404851315,
    "id": "a4e29ed3-d7a4-4e4d-945d-ce64678d3b94",
    "name": "example.com.",
    "created_at": "2014-07-08T20:28:19.000000",
    "pool_id": "572ba08c-d929-4c70-8e42-03824bb24ca2",
    "version": 1,
    "project_id": "noauth-project",
    "email": "hostmaster@example.com",
    "links": {
      "self": "http://dns.provider.com/v2/zones/a4e29ed3-d7a4-4e4d-945d-ce64678d3b94"
    }
  },
  {
    "status": "ACTIVE",
    "description": null,
    "updated_at": null,
    "ttl": 3600,
    "serial": 1405435142,
    "id": "38dbf635-45cb-4873-8300-6c273f0283c7",
    "name": "example.org.",
    "created_at": "2014-07-15T14:39:02.000000",
    "pool_id": "572ba08c-d929-4c70-8e42-03824bb24ca2",
    "version": 1,
    "project_id": "noauth-project",
    "email": "hostmaster@example.org",
    "links": {
      "self": "http://dns.provider.com/v2/zones/38dbf635-45cb-4873-8300-6c273f0283c7"
    }
  }],
  "links": {
    "self": "https://dns.provider.com/v2/zones?name=example*"
  }
} 
</programlisting>
                </example>
                <para>This example demonstrates the use of multiple
                    wildcards:</para>
                <example>
                    <title>Request example for multiple
                        wildcards</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">GET /v2/zones?name=*example* HTTP/1.1
Host: dns.provider.com
Accept: application/json
X-Auth-Token: ************* 
</programlisting>
                </example>
                <example>
                    <title>Response example for multiple
                        wildcards</title>
                     
                    <programlisting language="xml">HTTP/1.1 200 OK
Content-Type: application/json

{
  "zones": [{
    "status": "ACTIVE",
    "description": null,
    "updated_at": "2014-07-08T20:28:31.000000",
    "ttl": 86400,
    "serial": 1404851315,
    "id": "a4e29ed3-d7a4-4e4d-945d-ce64678d3b94",
    "name": "example.com.",
    "created_at": "2014-07-08T20:28:19.000000",
    "pool_id": "572ba08c-d929-4c70-8e42-03824bb24ca2",
    "version": 1,
    "project_id": "noauth-project",
    "email": "hostmaster@example.com",
    "links": {
      "self": "http://dns.provider.com/v2/zones/a4e29ed3-d7a4-4e4d-945d-ce64678d3b94"
    }
  },
  {
    "status": "ACTIVE",
    "description": null,
    "updated_at": null,
    "ttl": 3600,
    "serial": 1405435099,
    "id": "13db810b-917d-4898-bc28-4d4ee370d20d",
    "name": "abc.example.com.",
    "created_at": "2014-07-15T14:38:19.000000",
    "pool_id": "572ba08c-d929-4c70-8e42-03824bb24ca2",
    "version": 1,
    "project_id": "noauth-project",
    "email": "hostmaster@example.com",
    "links": {
      "self": "http://dns.provider.com/v2/zones/13db810b-917d-4898-bc28-4d4ee370d20d"
    }
  },
  {
    "status": "ACTIVE",
    "description": null,
    "updated_at": null,
    "ttl": 3600,
    "serial": 1405435142,
    "id": "38dbf635-45cb-4873-8300-6c273f0283c7",
    "name": "example.org.",
    "created_at": "2014-07-15T14:39:02.000000",
    "pool_id": "572ba08c-d929-4c70-8e42-03824bb24ca2",
    "version": 1,
    "project_id": "noauth-project",
    "email": "hostmaster@example.org",
    "links": {
      "self": "http://dns.provider.com/v2/zones/38dbf635-45cb-4873-8300-6c273f0283c7"
    }
  },
  {
    "status": "ACTIVE",
    "description": null,
    "updated_at": null,
    "ttl": 3600,
    "serial": 1405435156,
    "id": "c316def0-8599-4030-9dcd-2ce566348115",
    "name": "abc.example.net.",
    "created_at": "2014-07-15T14:39:16.000000",
    "pool_id": "572ba08c-d929-4c70-8e42-03824bb24ca2",
    "version": 1,
    "project_id": "noauth-project",
    "email": "hostmaster@example.net",
    "links": {
      "self": "http://dns.provider.com/v2/zones/c316def0-8599-4030-9dcd-2ce566348115"
    }
  }],
  "links": {
    "self": "https://dns.provider.com/v2/zones?name=*example*"
  }
}
</programlisting>
                </example>
            </section>
            <section xml:id="nested_collections">
                <title>Nested collections</title>
                <para>A nested collection is a collection without a
                    URI of its own. The only current example of this
                    is the <code>records</code> array underneath the
                        <code>recordsets</code> resource. </para>
                <para>By default, nested collections are
                    included in the listing of its parent resource.
                    For example, Listing recordsets will include
                    the <code>records</code> collection for each of
                    the <code>recordsets</code> returned. For an
                    example, see Section 4.2.2 List Record
                    Sets.</para>
            </section>
        </section>
        <section xml:id="resources">
            <title>Resources</title>
            <para>A resource is an item you access
                in an API operation, such as a zone or
                recordset.</para>
            <para>A <code>links</code> object will exist inside the
                resource object. At the minimum, it will contain a
                    <code>self</code> link that points to the given
                resource.</para>
            <example>
                <title>Example of <code>links</code> in the response
                    for a resource</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">HTTP/1.1 200 OK
Vary: Accept
Content-Type: application/json  
</programlisting>
                <programlisting language="xml">  {
   "example": {
     "id": "a86dba58-0043-4cc6-a1bb-69d5e86f3ca3",
     "....": "....",
     "links": {
       "self": "https://preview.dns.api.rackspacecloud.com/v2/examples/a86dba58-0043-4cc6-a1bb-69d5e86f3ca3",
     }
   }
 } 
</programlisting>
            </example>
        </section>
        <section xml:id="supported_record_types">
            <?dbfo keep-together="always"?>
            <title>Supported Record Types</title>
            <para>The Rackspace Managed DNS Service supports the
                    <glossterm>record</glossterm> types listed in the
                following table.</para>

            <table rules="all">
                <caption>Rackspace Managed DNS Supported Record
                    Types</caption>
                <thead>
                    <tr>
                        <td>Record Type</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td colspan="2">Examples</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>A</td>
                        <td>Maps an IPV4 address to a domain</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>A Record : JSON</title>
                                <para>
                                   <programlisting language="json">{ 
  “name” : “example.com”, 
  “description” : “This is an example A record set.”, 
  “type” : “A”, 
  “ttl” : 3600, 
  “records” : [
    “123.456.78.9”
  ]
}</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td>AAAA</td>
                        <td>Maps an IPV6 address to a domain</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>AAAA Record : JSON</title>
                                <para>
                                   <programlisting language="json">{ 
  “name” : “example.com”, 
  “description” : “This is an example AAAA record set.”, 
  “type” : “AAAA”, 
  “ttl” : 3600, 
  “records” : [
     "4321:0:1:2:3:4:567:89ab" 
  ]
}</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td>CNAME</td>
                        <td>Creates an alias for a domain</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>CNAME Record : JSON</title>
                                <para>
                                   <programlisting language="json">{
  "name" : “www.example.com.",
  "description" : "This is an example CNAME record set.",
  "type" : “CNAME",
  "ttl" : 3600,
  "records" : [
      “example.com."
  ]
}}</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <note>
                                <para>A CNAME record label (name) can
                                   have underscores anywhere in any
                                   subdomain labels, but not in the
                                   main domain name of the domain to
                                   which the record belongs. For
                                   example, for the domain
                                   example.com, a CNAME record
                                   belonging to that domain can have
                                   the label
                                   <code>_ab_b_.cd_e.example.com</code></para>
                            </note>
                        </td>
                    </tr>
                    <tr>
                        <td>MX</td>
                        <td>Designates a domain's mail server</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>MX Record : JSON</title>
                                <para>
                                   <programlisting language="json">{
  "name" : “mail.example.com.”,
  “description”: “This is an example MX record set.",
  "type" : “MX",
  "ttl" : 3600,
  "records" : [
      “10 mail.example.com."
  ]
}</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <note>
                                <para> MX record set data format is
                                   “&lt;priority&gt; &lt;host&gt;”, so
                                   in the above recordset, the
                                   priority = <code>10</code> and host
                                   = <code>mail.example.com</code>. </para>
                            </note>
                        </td>
                    </tr>
                    <tr>
                        <td>NS</td>
                        <td>Designates a domain's authoritative name
                            server</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>NS Record : JSON</title>
                                <para>
                                   <programlisting>{
  "name" : “example.com.",
  "description" : "This is an example NS record set.",
  "type" : "NS",
  "ttl" : 3600,
  "records" : [
      “ns1.com"
  ]
}
</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td>PTR</td>
                        <td>Designates a reverse DNS record</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>PTR Record : JSON</title>
                                <para>
                                   <programlisting>
{
  "name" : “7.0.2.192.in-addr.arpa.”,
  “description”: “This is an example PTR record set.",
  "type" : “PTR",
  "ttl" : 3600,
  "records" : [
      “example.com."
  ]
}
</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <note>
                                <para>PTR records can only be managed
                                   by API administrators.</para>
                            </note>
                        </td>
                    </tr>
                    <tr>
                        <td>SRV</td>
                        <td>General service locator record for a
                            domain</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>SRV Record : JSON</title>
                                <para>
                                   <programlisting>
{
  "name" : “_sip.tcp.example.com.”,
  “description”: “This is an example SRV record set.",
  "type" : “SRV",
  "ttl" : 3600,
  "records" : [
      “10 0 5060 server.example.com."
  ]
}
</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <note>
                                <title>Notes</title>
                                <itemizedlist>
                                   <listitem>
                                   <para>SRV record set data format is
                                   “&lt;priority&gt; &lt;weight&gt;
                                   &lt;port&gt;
                                   &lt;target-hostname&gt;” (for
                                   example: <code>10 0 5060
                                   server.example.org</code>, as shown
                                   in the example above.). The
                                   <code>name</code> attribute should
                                   contain the service name, protocol,
                                   and domain name (for example:
                                   <code>_sip.tcp.example.org</code>.).
                                   </para>
                                   </listitem>
                                   <listitem>
                                   <para>The DNS API flags two SRV
                                   records as duplicates if their
                                   service name,  protocol, zone name,
                                   priority, and weight all match,
                                   <emphasis role="bold"
                                   >and</emphasis> both records are
                                   targeted to the same server (host
                                   and port combination) as well. So,
                                   for the zone example.com, the DNS
                                   API will accept the following SRV
                                   records for the zone and will not
                                   flag them as duplicates  (in the
                                   format “&lt;name&gt;&lt;ttl&gt; IN
                                   &lt;type&gt;&lt;priority&gt;&lt;weight&gt;&lt;port&gt;&lt;target-hostname&gt;”): </para>
                                   <itemizedlist>
                                   <listitem>
                                   <para>_sip._tcp.example.com. 86400
                                   IN SRV 20 0 5060
                                   backupbox1.example.com.</para>
                                   </listitem>
                                   <listitem>
                                   <para>_sip._tcp.example.com. 86400
                                   IN SRV 20 0 5061
                                   backupbox1.example.com.</para>
                                   </listitem>
                                   <listitem>
                                   <para>_ftp._tcp.example.com. 86400
                                   IN SRV 20 0 5062
                                   backupbox2.example.com.</para>
                                   </listitem>
                                   <listitem>
                                   <para>_sip._tcp.example.com. 86400
                                   IN SRV 20 0 5061
                                   backupbox2.example.com.</para>
                                   </listitem>
                                   </itemizedlist>
                                   </listitem>
                                </itemizedlist>
                                <itemizedlist>
                                   <listitem>
                                   <para>The data attribute of an SRV
                                   record specifies the
                                   <emphasis>weight</emphasis>,
                                   <emphasis>port</emphasis>, and
                                   <emphasis>target</emphasis> of the
                                   service represented by the record.
                                   These values are space delimited.
                                   The DNS API makes the following
                                   assumptions when parsing the data
                                   attribute of an SRV record:</para>
                                   <itemizedlist>
                                   <listitem>
                                   <para>The values for the
                                   <emphasis>weight</emphasis>,
                                   <emphasis>port</emphasis> and
                                   <emphasis>target</emphasis> are
                                   specified in that order.</para>
                                   </listitem>
                                   <listitem>
                                   <para>If only one field is provided
                                   in the data attribute, it is
                                   assumed to be the
                                   <emphasis>target</emphasis>.</para>
                                   </listitem>
                                   <listitem>
                                   <para>If two fields are provided in
                                   the data attribute, it is assumed
                                   they are the
                                   <emphasis>port</emphasis> and
                                   <emphasis>target</emphasis> (in
                                   that order).</para>
                                   </listitem>
                                   <listitem>
                                   <para>If all three fields are
                                   provided, it is assumed they are
                                   the <emphasis>weight</emphasis>,
                                   <emphasis>port</emphasis>, and
                                   <emphasis>target</emphasis> (in
                                   that order).</para>
                                   </listitem>
                                   <listitem>
                                   <para>If more than three fields are
                                   provided, it is assumed that the
                                   first three are the
                                   <emphasis>weight</emphasis>,
                                   <emphasis>port</emphasis>, and
                                   <emphasis>target</emphasis> (in
                                   that order), and the rest are
                                   ignored.</para>
                                   </listitem>
                                   </itemizedlist>
                                   </listitem>
                                </itemizedlist>
                            </note>
                        </td>
                    </tr>
                    <tr>
                        <td>TXT</td>
                        <td>Arbitrary text for a domain record</td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <formalpara>
                                <title>TXT Record : JSON</title>
                                <para>
                                   <programlisting>{
  "name" : “ example.com.",
  "description" : "This is an example TXT record set.",
  "type" : “TXT",
  "ttl" : 3600,
  "records" : [
      “Some example text"
  ]
}</programlisting>
                                </para>
                            </formalpara>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <note>
                                <itemizedlist>
                                   <listitem>
                                   <para><code>DKIM</code> records are
                                   supported using <code>TXT</code>
                                   records with appropriately
                                   formatted data fields.</para>
                                   </listitem>
                                </itemizedlist>
                            </note>
                        </td>
                    </tr>
                </tbody>
            </table>
            <para security="reviewer">Reviewer: please give me the
                info and descriptions for SSHFP and SPF new record
                types so I can add the new sections for each record
                type to the previous table when they become available
                after Preview.</para>
        </section>
        <section xml:id="DNS_errors">
            <title>Errors</title>
            <para>When an error occurs, the DNS service returns a an
                object containing an HTTP error response code that
                denotes the type of error. In the body of the
                response, the system will return additional
                information about the error.</para>
            <para>The following table lists possible error types with
                their associated error codes and descriptions.</para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="2">Error Type</td>
                        <td colspan="1">Associated Error Code</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="2"
                                ><code>Service Unavailable</code></td>
                        <td colspan="1">503</td>
                        <td colspan="3">The request could not be
                            processed because back-end services were
                            temporarily unavailable. This condition
                            should be temporary; contact support if
                            the error persists.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>unauthorized</code></td>
                        <td colspan="1">401</td>
                        <td colspan="3">The user is not authorized to
                            access the API functionality in question.
                            The user may not have authenticated to the
                            API. If the user should have access to the
                            API functionality, contact support.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>bad_request</code></td>
                        <td colspan="1">400</td>
                        <td colspan="3">The request is missing one or
                            more elements, or the values of some
                            elements are invalid. See the
                                <code>errors</code> or <code>type</code>
                            item for specifics.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>forbidden</code></td>
                        <td colspan="1">403</td>
                        <td colspan="3">The endpoint is not defined in the service catalog,
                            or the user is not permitted to perform the API action
                            in question.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>resource_not_found</code></td>
                        <td colspan="1">404</td>
                        <td colspan="3">The back-end services did not
                            find anything matching the request UUID.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>method_not_allowed</code></td>
                        <td colspan="1">405</td>
                        <td colspan="3">The method is not allowed for the URL.</td>
                    </tr>
                    <tr>
                        <td colspan="2"><code>over_quota</code></td>
                        <td colspan="1">413</td>
                        <td colspan="3">The user has exceeded allowable
                            request rate limits or the absolute limits for the
                            resource. Contact support if you think
                            you need higher limits.</td>
                    </tr>
                    <tr>
                        <td colspan="2"
                            ><code>duplate_resource</code></td>
                        <td colspan="1">409</td>
                        <td colspan="3">The back-end services could
                            not complete the request due to a conflict
                            with the current state of the resource.
                            Possibly, the user is trying to create an
                            entity that already exists. See the
                                <code>message</code> element for
                            specifics.</td>
                    </tr>
                    <tr>
                        <td colspan="2"
                            ><code>timeout</code></td>
                        <td colspan="1">504</td>
                        <td colspan="3">The back-end services
                            encountered an unexpected condition that
                            prevented it from fulfilling the request 
                            in the alloted time.</td>
                    </tr>
                    <tr>
                        <td colspan="2"
                                ><code>Internal Server Error</code></td>
                        <td colspan="1">500</td>
                        <td colspan="3">The back-end services
                            encountered an unexpected condition that
                            prevented it from fulfilling the request.
                            See the <code>details</code> element for
                            specifics.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>All errors will look similar. A
                <code>code</code> element will show the HTTP
                error code for convenience. The
                <code>type</code> element will show the type of error.
                The <code>request_id</code> will help API operators debug
                the request in a support ticket, if necessary.
                The <code>message</code> field, when present, will inform the
                user of the exact problem the API detected.</para>
            <example>
                <title>Example Error Response: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">{
    "code": 500,
    "type": "error",
    "request_id": "req-6d896f1e-9686-454e-af6f-412a802f9451"
}
</programlisting>
            </example>
            <para>The <code>bad_request</code> example shows
                validation errors:</para>
            <example>
                <title>bad_request error on validation errors: JSON
                    response</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml">{
    "code": 400,
    "type": "invalid_object",
    "errors": {
        "errors": [
            {
                "path": [
                    "name"
                ],
                "message": "u'example.com' is not a 'domainname'",
                "validator": "format",
                "validator_value": "domainname"
            }
        ]
    },
    "request_id": "req-9ebcb6a5-5673-4696-bbfc-61524e986f31"
}</programlisting>
            </example>
        </section>
        <section xml:id="ip_address_support">
            <title>IP Address Support</title>
            <para>Managed DNS supports IP addresses both inside and
                outside the Rackspace-assigned IP ranges.</para>
        </section>
        <section xml:id="dns_propagation">
            <title>DNS Propagation</title>
            <para>Typical DNS propagation to Rackspace name servers
                (globally) may take up to one minute. This refers to
                the amount of time it takes after a change
                (add/delete/update) is made to a zone or record via
                API or Rackspace Control Panel before the change is
                live on our name servers.</para>
            <para>A large amount of changes made simultaneously may
                take 2-3 minutes. If a new zone is added or an
                existing zone is deleted, this may take up to a few
                minutes to propagate to our Rackspace name servers.
                When changing name servers for a domain, complete
                propagation will take about 2 days for most domains;
                this is enforced by the registries.</para>
        </section>
        <section xml:id="role_based_access_control">
            <title>Role Based Access Control (RBAC)</title>
            <para>Role Based Access Control (RBAC) restricts access to
                the capabilities of Rackspace Cloud services,
                including the Managed DNS API, to authorized users
                only. RBAC enables Rackspace Cloud customers to
                specify which account users of their Cloud account
                have access to which Managed DNS API service
                capabilities, based on roles defined by Rackspace (see
                    <xref linkend="cloud_dns_roles_capabilities"/>).
                The permissions to perform certain operations in
                Managed DNS API – create, read, update, delete  – are
                assigned to specific roles. The account owner user
                assigns these roles, either global (multiproduct) or
                product-specific (for example Managed DNS), to account users.<note>
                    <para>RBAC setup is not required for participation
                        in Preview.</para>
                    <para security="reviewer">Writer: after EA, need to make a search for
                        all occurrences of Early Access.</para>
                </note></para>
            <section xml:id="assigning_roles_to_account_users">
                <title>Assigning Roles to Account Users</title>
                <para>The account owner (identity:user-admin) can
                    create account users on the account and then
                    assign roles to those users. The roles grant the
                    account users specific permissions for accessing
                    the capabilities of the Managed DNS service. Each
                    account has only one account owner, and that role
                    is assigned by default to any Rackspace Cloud
                    account when the account is created.</para>
                <note>
                    <para>An account user who is not assigned any role
                        by the account owner is not able to access any
                        capabilities of the Managed DNS API.</para>
                </note>
                
                <para> See the <citetitle>Cloud Identity Client
                    Developer Guide</citetitle> for information
                    about how to perform the following tasks:<itemizedlist>
                        <listitem>
                            <para>
                                <link xlink:href="https://developer.rackspace.com/docs/cloud-identity/v2/developer-guide/#add-user">Add account users</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link xlink:href="https://developer.rackspace.com/docs/cloud-identity/v2/developer-guide/#add-role-to-user">Assign roles to account
                                    users</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link xlink:href="https://developer.rackspace.com/docs/cloud-identity/v2/developer-guide/#delete-global-role-from-user">Delete global roles from account
                                    users</link>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                
                <note>
                    <para>The account owner (identity:user-admin) role
                        cannot hold any additional roles because it
                        already has full access to all capabilities.
                    </para>
                </note>
            </section>
            <section xml:id="roles_for_cloud_dns">
                <title>Roles Available for Managed DNS</title>
                <para>Three roles (observer, creator, and admin) can
                    be used to access the Managed DNS API
                    specifically. The following table describes these
                    roles and their permissions.</para>
                <table rules="all" width="70%"
                    xml:id="cloud_dns_roles_capabilities">
                    <caption>Managed DNS Product Roles and
                        Capabilities</caption>
                    <col width="30%"/>
                    <col width="70%"/>
                    <?dbfo keep-together="always"?>
                    <thead>
                        <tr align="center">
                            <td>Role Name</td>
                            <td>Role Permissions</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>dnsaas:admin</td>
                            <td>This role provides Create, Read,
                                Update, and Delete permissions in
                                Managed DNS, where access is
                                granted.</td>
                        </tr>
                        <tr>
                            <td>dnsaas:service-admin</td>
                            <td>This role provides Create, Read,
                                Update, and Delete permissions in
                                Managed DNS, where access is
                                granted.</td>
                        </tr>
                        <tr>
                            <td>dnsaas:creator</td>
                            <td>This role provides Create, Read and
                                Update permissions in Managed DNS,
                                where access is granted.</td>
                        </tr>
                        <tr>
                            <td>dnsaas:observer</td>
                            <td>This role provides Read permission in
                                Managed DNS, where access is
                                granted.</td>
                        </tr>
                    </tbody>
                </table>
                <para>Additionally, two multiproduct roles apply to
                    all products. Users with multiproduct roles
                    inherit access to future products when those
                    products become RBAC-enabled. The following table
                    describes these roles and their
                    permissions.</para>
                <table rules="all" width="70%">
                    <caption>Multiproduct (Global Roles) and
                        Permissions</caption>
                    <col width="30%"/>
                    <col width="70%"/>
                    <?dbfo keep-together="always"?>
                    <thead>
                        <tr align="center">
                            <td>Role Name</td>
                            <td>Role Permissions</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>admin</td>
                            <td>This role provides Create, Read,
                                Update, and Delete permissions in all
                                products, where access is
                                granted.</td>
                        </tr>
                        <tr>
                            <td>observer</td>
                            <td>This role provides Read permission in
                                all products, where access is
                                granted.</td>
                        </tr>
                    </tbody>
                </table>
            </section>
            <section version="5.0" xml:id="RBAC_Role_Conflict_3">
                <title>Resolving Conflicts Between RBAC Multiproduct
                    vs. Custom (Product-specific) Roles</title>
                <para>The account owner can set roles for multiproduct
                    and Managed DNS scope, and it is important to
                    understand how any potential conflicts among these
                    roles are resolved. When two roles appear to
                    conflict, the role that provides the more
                    extensive permissions takes precedence. Therefore,
                    admin roles take precedence over observer and
                    creator roles, because admin roles provide more
                    permissions.</para>
                <para>The following table shows two examples of how
                    potential conflicts between user roles in the
                    Control Panel are resolved:</para>
                <para>
                    <informaltable rules="all">
                        <thead>
                            <tr align="center">
                                <td>Permission Configuration</td>
                                <td>View of Permission in the Control
                                   Panel </td>
                                <td>Can the User Perform Product Admin
                                   Functions in the Control
                                   Panel?</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>User is assigned the following
                                   roles: multiproduct <emphasis
                                   role="bold"><emphasis role="bold"
                                   >observer</emphasis></emphasis> and
                                   Managed DNS <emphasis role="bold"
                                   >admin</emphasis></td>
                                <td>Appears that the user has only the
                                   multiproduct <emphasis role="bold"
                                   >observer</emphasis> role</td>
                                <td>Yes, for Managed DNS only. The
                                   user has the <emphasis role="bold"
                                   >observer</emphasis> role for the
                                   rest of the products.</td>
                            </tr>
                            <tr>
                                <td>User is assigned the following
                                   roles: multiproduct <emphasis
                                   role="bold">admin</emphasis> and
                                   Managed DNS <emphasis role="bold"
                                   >observer</emphasis></td>
                                <td>Appears that the user has only the
                                   multiproduct <emphasis role="bold"
                                   >admin</emphasis> role</td>
                                <td>Yes, for all of the products. The
                                   Managed DNS <emphasis role="bold"
                                   >observer</emphasis> role is
                                   ignored.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                </para>
            </section>
            <section version="5.0" xml:id="RBAC_API_XREF_3">
                <title>RBAC Permissions Cross-reference to Managed DNS
                    API Operations</title>
                <para>API operations for Managed DNS may or may not be
                    available to all roles. To see which operations
                    are permitted to invoke which calls, please review
                        <link
                        xlink:href="http://www.rackspace.com/knowledge_center/article/permissions-matrix-for-role-based-access-control-rbac"
                        > the Knowledge Center article</link>.</para>
            </section>
        </section>
    </chapter>
    <!--<chapter xml:id="API_Operations-d1e2264">
        <title>API Operations</title>
        <info>
            <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <raxm:type>apiref</raxm:type>
                <raxm:product version="v1.0">cdns</raxm:product>
                <raxm:priority>1</raxm:priority>
            </raxm:metadata> 
        </info>
        <section xml:id="view_limits">
            <title>Limits</title>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/limits</td>
                        <td colspan="3">List all applicable
                            limits.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/limits/types</td>
                        <td colspan="3">List the types of limits.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/limits/<parameter>type</parameter></td>
                        <td colspan="3">List assigned limits of the
                            specified type.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>In the examples that follow for each subsection,
                        <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID.</para>
            <section xml:id="List_All_Limits">
                <title>List All Limits</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/limits</td>
                            <td colspan="3">List all applicable
                                limits.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue> </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>, <errorcode>500</errorcode>), 
                                                  serviceUnavailable (<errorcode>503</errorcode>),
                                                  unauthorized (<errorcode>401</errorcode>)</simpara>
                <para>This call provides a list of all applicable
                    limits for the specified account.</para>
                <para>The following examples show the requests and
                    corresponding responses to list all limits for the
                    specified account:</para>
                <example>
                    <title>List Limits Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-limits_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Limits Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-limits_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Limits Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-limits_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Limits Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/dns-list-limits_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>For details about the limits information
                    returned, refer to <xref linkend="Limits-d1e1208"
                    />.</para>                                  
            </section>
            <section xml:id="List_Limit_Types">
                <title>List Limit Types</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/limits/types</td>
                            <td colspan="3">List the types of
                                limits.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue> </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>, <errorcode>500</errorcode>), 
                                                  serviceUnavailable (<errorcode>503</errorcode>),
                                                  unauthorized (<errorcode>401</errorcode>)</simpara>
                <para>This call provides a list of all applicable
                    limit types for the specified account.</para>
                <para>The following examples show the requests and
                    corresponding responses to list all limit types
                    for the specified account:</para>
                <example>
                    <title>List Limit Types Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-example-limit-types_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Limit Types Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-example-limit-types_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Limit Types Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-example-limit-types_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Limit Types Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/dns-example-limit-types_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>                                  
            </section>
            <section xml:id="List_Specific_Limit">
                <title>List Specific Limit</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/limits/<parameter>type</parameter></td>
                            <td colspan="3">List assigned limits of
                                the specified type.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue> </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>, <errorcode>500</errorcode>), 
                                                  serviceUnavailable (<errorcode>503</errorcode>),
                                                  unauthorized (<errorcode>401</errorcode>)</simpara>
                <para>This call provides a list of all applicable
                    limits of the specified
                        <parameter>type</parameter> for the specified
                    account.</para>
                <para>The following examples show the requests and
                    corresponding responses to list all applicable
                    limits of the specified
                        <parameter>type</parameter> for the specified
                    account:</para>
                <example>
                    <title>List Specified Limit Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-example-limit_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Specified Limit Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-example-limit_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Specified Limit Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-example-limit_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Specified Limit Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/dns-example-limit_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>                                  
            </section>
        </section>
        <section xml:id="Domains">
            <title>Domains</title>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="3">List all account <glossterm baseform="domain">domains</glossterm>.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/?name=<parameter>domainName</parameter></td>
                        <td colspan="3">Filter domains by domain name: list all domains
                            manageable by the account specified that match the name
                            <parameter>domainName</parameter>. Display IDs and names
                            only.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter></td>
                        <td colspan="3">List details for a specific domain. By default this call
                            displays information for records but not subdomains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>?<?sbr?><parameter>showRecords</parameter>=<?sbr?><code>[true|false]&amp;<?sbr?></code><parameter>showSubdomains</parameter>=<code>[true|false]</code><?sbr?></td>
                        <td colspan="3">List details for a specific domain, using the
                                <parameter>showRecords</parameter> and
                                <parameter>showSubdomains</parameter> parameters that specify
                            whether to request information for <glossterm baseform="record">records</glossterm> and <glossterm baseform="subdomain">subdomains</glossterm>.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/changes?<?sbr?><parameter>since</parameter>=<?sbr?><code>[date/time]</code></td>
                        <td colspan="3">Show all changes to the
                            specified domain
                                <parameter>since</parameter> the
                            specified <code>date/time</code>. </td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/export</td>
                        <td colspan="3">Export details of the specified domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="3">Create a new domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/domains/import</td>
                        <td colspan="3"> Import a new domain with the configuration specified by
                            the request.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains<?sbr?>/<parameter>domainId</parameter></td>
                        <td colspan="3">Modify the configuration of a domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains</td>
                        <td colspan="3">Modify multiple domains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2">/domains<?sbr?>/<parameter>domainId</parameter></td>
                        <td colspan="3">Remove a domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                            >/domains<?sbr?>/<parameter>domainId</parameter>?<?sbr?>deleteSubdomains=<?sbr?>true</td>
                        <td colspan="3">Remove a domain and all its subdomains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains?id=<parameter>domainId1</parameter>&amp;<?sbr?>id=<parameter>domainId2</parameter></td>
                        <td colspan="3">Remove multiple domains.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains?id=<parameter>domainId1</parameter>&amp;<?sbr?>id=<parameter>domainId2</parameter>&amp;<?sbr?>deleteSubdomains=<?sbr?>true</td>
                        <td colspan="3">Remove multiple domains and their subdomains.</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>, and for remove domain(s) also
                    <returnvalue>204</returnvalue>
            </simpara>
            <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                itemNotFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
            <para>In the examples that follow for each subsection,
                        <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID.</para>
            <?hard-pagebreak?>
            <section xml:id="list_domains">
                <title>List Domains</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">List all domains manageable by the account specified.
                                Display IDs and names only.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/?name=<parameter>domainName</parameter></td>
                            <td colspan="3">Filter domains by domain name: list all domains
                                manageable by the account specified that match the name
                                    <parameter>domainName</parameter>. Display IDs and names
                                only.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>, <errorcode>406</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
                <para>These calls provide a list of all DNS domains manageable by a given account.
                    The resulting list is flat, and does not break the domains down hierarchically
                    by subdomain. All representative domains are included in the list, even if a
                    domain is conceptually a subdomain of another domain in the list.</para>
                <note>
                    <para>These calls return by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <para>In the examples that follow, the request is made for a <code>limit</code> of
                        <code>10</code> records, starting at <code>offset</code>
                    <code>20</code> (record 21).</para>
                <example>
                    <title>List Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domains Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/dns-list-domains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para>Since the current set of 10 records in the previous response examples
                        begins at <code>offset=20</code>, note that the <code>previous</code> link
                        points to a group of 10 records starting at <code>offset=10</code>, while
                        the <code>next</code> link points to a group of 10 records starting at
                            <code>offset=30</code>.</para>
                </note>
                <section xml:id="search_domains_w_filters">
                    <title>Search Domains with Filtering</title>
                    <para>As illustrated by the examples above, the List Domains call provides a
                        list of all DNS domains manageable by a given account. Filtering the search
                        to limit the results returned can be performed by using the
                            <code>name</code> parameter on the List Domains call. For example,
                        <?sbr?><code>?&#xfeff;name=hoola.com</code> matches <code>hoola.com</code> and
                        similar names such as <code>main.hoola.com</code> and
                            <code>sub.hoola.com</code>.</para>
                    <para>Filter criteria may consist of:</para><itemizedlist spacing="compact">
                            <listitem>
                                <para>Any letter (A-Za-z)</para></listitem>
                        <listitem><para>Numbers (0-9)</para></listitem>
                        <listitem><para>Hyphen ("-")</para></listitem>
                        <listitem><para>1 to 63 characters</para></listitem>
                        </itemizedlist></para>
                    <para>Filter criteria should not include any of
                        the following characters: ' + , | ! " £ $ %
                        &amp; / ( ) = ? ^ * ç ° § ; : _ > ] [ @ à, é,
                        ò</para>
                    <note>
                        <para>This call returns by default a maximum of 100 items at a time if no
                                <code>limit</code> is specified. To navigate the collection
                            returned, the parameters <code>limit</code> and <code>offset</code> can
                            be set in the URI (for example: <code>limit=10&amp;offset=0</code>), as
                            described in <xref linkend="pagination"/>.</para>
                    </note>
                    <para><?rax-fo keep-with-next?> In the following
                        example, the specified search name is
                            <code>region2.example.net</code>:</para>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-domain-by-name_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="json"><xi:include href="samples/dns-filter-domain-by-name_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para><?rax-fo keep-with-next?> The response matches one domain:</para>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-domain-by-name_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Domain Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="json"><xi:include href="samples/dns-filter-domain-by-name_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para><?rax-fo keep-with-next?> In the following
                        example, the specified search name is
                            <code>sub1.example.com</code>:</para>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-name_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="json"><xi:include href="samples/dns-filter-subdomain-by-name_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para><?rax-fo keep-with-next?>The response
                        matches one subdomain:</para>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-name_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Fully Qualified Subdomain Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="json"><xi:include href="samples/dns-filter-subdomain-by-name_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para>
                        <?rax-fo keep-with-next?>In the following
                        example, the specified search name is
                            <code>sub1.exam</code>:</para>
                    <example>
                        <title>Filter by Partial Name Request: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-partial-name_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Partial Name Request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="json"><xi:include href="samples/dns-filter-subdomain-by-partial-name_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <para><?rax-fo keep-with-next?> The response matches one subdomain:</para>
                    <example>
                        <title>Filter by Partial Name Response: XML</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="xml"><xi:include href="samples/dns-filter-subdomain-by-partial-name_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                    <example>
                        <title>Filter by Partial Name Response: JSON</title>
                        <?dbfo keep-together="always"?>
                        <programlisting language="json"><xi:include href="samples/dns-filter-subdomain-by-partial-name_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                </section>
            </section>
            <section xml:id="list_domain_details">
                <title>List Domain Details</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter></td>
                            <td colspan="3">List details of the specified domain, with record
                                information but without subdomains. </td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/domains/<parameter>domainId</parameter>?<?sbr?><parameter>showRecords</parameter>=<code>true</code>
                                or
                                   <?sbr?><?sbr?><code>false</code>&amp;<parameter>showSubdomains</parameter> =<?sbr?>
                                <code>true</code> or
                                   <code>false</code></td>
                            <td colspan="3">List details of the specified domain. Display details,
                                as specified by the <parameter>showRecords</parameter> and
                                    <parameter>showSubdomains</parameter> parameters. </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call provides the detailed output for a specific domain configured and
                    associated with an account. This call is not capable of returning details for a
                    domain that has been deleted.</para>
                <para>This call does not require a request body.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <para><?rax-fo keep-with-next?> Two parameters are available to specify the
                    information about subdomains and records to be returned by the List Domain
                    Details call:</para><itemizedlist>
                        <listitem>
                            <para><code>showRecords</code> - if this parameter is set to
                                    <code>true</code>, then information about records is returned;
                                if this parameter is set to <code>false</code>, then information
                                about records is not returned.</para>
                        </listitem>
                        <listitem>
                            <para><code>showSubdomains</code> - if this parameter is set to
                                    <code>true</code>, then information about subdomains is
                                returned; if this parameter is set to <code>false</code>, then
                                information about subdomains is not returned.</para>
                        </listitem>
                    </itemizedlist></para>
                <para>The following examples show the default parameter settings
                        (<code>showRecords</code>=<code>true&amp;</code><code>showSubdomains</code>=<code>false</code>)
                    for the List Domain Details call. This call returns information with records but
                    no information about subdomains. Since these parameter values are the defaults,
                    this call works the same way if both of the parameters are omitted.</para>
                <example>
                    <title>List Domain Details with Records, no Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-no-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-domain-details-with-records-no-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-no-subdomains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records, no Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-domain-details-with-records-no-subdomains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The following examples show the parameter settings to return information for
                    both records and subdomains
                        (<code>showSubdomains</code>=<code>true&amp;</code><code>showRecords</code>=<code>true</code>)
                    for the List Domain Details call:</para>
                <example>
                    <title>List Domain Details with Records and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-and-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-domain-details-with-records-and-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-with-records-and-subdomains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details with Records and Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-domain-details-with-records-and-subdomains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para><?rax-fo keep-with-next?>The following examples
                    show the parameter settings to return basic
                    information only, without records or subdomains
                        (<code>showRecords</code>=<code>false&amp;</code><code>showSubdomains</code>=<code>false</code>)
                    for the List Domain Details call:</para>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-no-records-no-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-domain-details-no-records-no-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Details, no Records, no Subdomains Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-details-no-records-no-subdomains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example><?dbfo keep-together="always"?>
                    <title>List Domain Details, no Records, no Subdomains Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-domain-details-no-records-no-subdomains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="List_Domain_Changes">
                <title>List Domain Changes</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/changes?<?sbr?><parameter>since</parameter>=<?sbr?><code>[date/time]</code></td>
                            <td colspan="3">Show all changes to the
                                specified domain
                                   <parameter>since</parameter> the
                                specified <code>date/time</code>. </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>)</simpara>
                <para>This call shows all changes to the specified
                    domain since the specified <code>date/time</code>.
                    The <parameter>since</parameter> parameter is
                    optional and defaults to midnight of the current
                    day. See <xref linkend="datetimeformat"/> for
                    details on how to specify this parameter's
                    value.</para>
                <para>The following examples show the requests and
                    corresponding responses to list the domain changes
                    since midnight, GMT-5, on September 13,
                    2011:</para>
                <example>
                    <title>List Domain Changes Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-changes_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Changes Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-domain-changes_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Changes Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/dns-list-domain-changes_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Domain Changes Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/dns-list-domain-changes_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="export_domain">
                <title>Export Domain</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/export</td>
                            <td colspan="3">Export details of the specified domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call provides the BIND (Berkeley Internet Name Domain) 9 formatted
                    contents of the requested domain. This call is for a <emphasis>single</emphasis>
                    domain only, and as such, does not traverse up or down the domain hierarchy for
                    details (that is, no subdomain information is provided).</para>
                <note>
                    <para>This call is not capable of returning anything for a domain that has been
                        deleted.</para>
                </note>
                <note>
                    <para linkend="import_domain_request_xml"> The BIND 9 formatted contents of the
                        requested domain will have no comments listed for the domain or for the
                        records of the domain being exported.</para>
                </note>
                <example>
                    <title>Export Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-export-domain_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Export Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-export-domain_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para>The following examples show the <emphasis>final</emphasis> successful
                        response for the asynchronous call. Refer to <xref
                            linkend="sync_asynch_responses"/> for a description of how the
                        asynchronous call works.</para>
                </note>
                <example><?dbfo keep-together="always"?>
                    <title>Export Domain Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-export-domain_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Export Domain Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="json"><xi:include href="samples/dns-export-domain_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="create_domains">
                <title>Create Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">Create a new domain with the configuration defined by
                                the request.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <note>
                    <para>Subdomains are also created the same way as domains.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), itemAlreadyExists (<errorcode>409</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>), unauthorized
                        (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
                <para>This call provisions one or more new DNS domains under the account specified,
                    based on the configuration defined in the request object. If the corresponding
                    request cannot be fulfilled due to insufficient or invalid data, an
                        <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and &POST; the request again. 
                    <note>
                        <title>Notes</title>
                        <para>
                            <itemizedlist>
                                <listitem>
                                   <para>Refer to <xref
                                   linkend="dns_propagation"/> for
                                   information about DNS
                                   propagation.</para>
                                </listitem>
                                <listitem>
                                   <para>If you attempt to create a
                                   domain that already exists, the API
                                   will return an exception saying
                                   that the domain already exists.
 </para>
                                </listitem>
                                <listitem>
                                   <para>This process allows multiple
                                   records to be created along with
                                   the domain. This is an atomic
                                   operation: if there is a failure in
                                   creation of even a single record,
                                   the entire process will fail.
 </para>
                                </listitem>
                                <listitem>
                                   <para>When a domain is created, and
                                   no Time To Live (TTL) is specified,
                                   the SOA minTTL (3600 seconds) is
                                   used as the default. When a record
                                   is added without a specified TTL,
                                   it will receive the domain TTL by
                                   default. When the domain and/or
                                   record TTL is supplied by the user,
                                   either via a create or update call,
                                   the TTL values must be 300 seconds
                                   or more.</para>
                                </listitem>
                                <listitem>
                                   <para>Subdomains are managed in
                                   separate zone files in the DNS
                                   system and will add some overhead
                                   to domain management.</para>
                                </listitem>
                            </itemizedlist>
</para>  
                    </note>
</para>
                <table rules="all">
                    <caption>Required and Optional Attributes for
                        Create Domain(s)</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Name </td>
                            <td colspan="3">Description</td>
                            <td colspan="1">Required</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">name</td>
                            <td colspan="3">Specifies the name for the
                                domain or subdomain. Must be a valid
                                domain name.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">emailAddress</td>
                            <td colspan="3">Email address to use for
                                contacting the domain
                                administrator.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">ttl</td>
                            <td colspan="3">If specified, must be
                                greater than 300. The default value,
                                if not specified, is
                                <code>3600</code>.</td>
                            <td colspan="1">No</td>
                        </tr>
                        
                        <tr>
                            <td colspan="1">comment</td>
                            <td colspan="3">If included, its length
                                must be less than or equal to 160
                                characters.</td>
                            <td colspan="1">No</td>
                        </tr>
                    </tbody>
                </table>
                <para>The following examples show the Create Domain(s)
                    requests:<?rax-fo keep-with-next?>
</para>
                <example>
                    <title>Create Domain(s) Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-create-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Create Domain(s) Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/dns-create-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para>The following examples show the
                            <emphasis>initial</emphasis> 202 Accepted
                        response for the asynchronous call and
                        indicate that the task has been accepted for
                        processing. Refer to <xref
                            linkend="sync_asynch_responses"/> for a
                        description of how the asynchronous call
                        works. Also see <link
                            xlink:href="http://docs.rackspace.com/cdns/api/v1.0/cdns-getting-started/content/Create_Domain.html"
                            >http://docs.rackspace.com/cdns/api/v1.0/cdns-getting-started/content/Create_Domain.html</link>
                        for a detailed example of processing the
                        Create Domain call, including the final
                        successful responses for Create Domain.</para>
                </note>
                <example xml:id="create_domains_resp">
                    <title>Create Domain(s) Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-create-domains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Create Domain(s) Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="json"><xi:include href="samples/dns-create-domains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="clone_domain-dle846">
                <title>Clone Domain</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/domains/<emphasis>domainId</emphasis>/clone?<emphasis>cloneName</emphasis>=<code>example2.com</code></td>
                            <td colspan="3">Create specified domain
                                   (<code>example2.com</code>) by
                                cloning domain with id
                                   <emphasis>domainId</emphasis>. All
                                options assume default value of
                                   <code>true</code>. See <xref
                                   linkend="clone_domains_parms_options"
                                /> for the description of
                                options.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/domains/<emphasis>domainId</emphasis>/clone?<emphasis>cloneName</emphasis>=<code>example2.com</code><?sbr?>&amp;<emphasis>cloneSubdomains</emphasis>=<emphasis>true_or_false</emphasis><?sbr?>&amp;<emphasis>modifyRecordData</emphasis>=<emphasis>true_or_false</emphasis><?sbr?>&amp;<emphasis>modifyEmailAddress</emphasis>=<emphasis>true_or_false</emphasis><?sbr?>&amp;<emphasis>modifyComment</emphasis>=<emphasis>true_or_false</emphasis></td>
                            <td colspan="3">Create specified domain
                                   (<code>example2.com</code>) by
                                cloning domain with id
                                   <emphasis>domainId</emphasis>.
                                Options are as specified. See <xref
                                   linkend="clone_domains_parms_options"
                                /> for the description of
                                options.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>This call returns an asynchronous response,
                        as described in <xref
                            linkend="sync_asynch_responses"/>. The
                        AsyncResponse returned will be similar to that
                        returned for Create Domain but with the
                        request element absent since the clone request
                        has no body.</para>
                </note>
                <simpara> Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), itemAlreadyExists
                        (<errorcode>409</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>),
                    overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call will duplicate a single existing
                    domain configuration with a new domain name for
                    the specified Cloud account. By default, all
                    records and, optionally, subdomain(s) are
                    duplicated as well. Both the existing domain
                    (referred to as the <emphasis>reference</emphasis>
                    domain) and the new cloned domain must exist under
                    the same Cloud account.</para>
                <para>Refer to <xref
                        linkend="clone_domains_parms_options"/> for
                    the parameters and options available to specify
                    how the cloning affects subdomains, comments,
                    email addresses, and record data.</para>
                <note>
                    <title>Notes</title>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>If the corresponding request
                                   cannot be fulfilled due to
                                   insufficient or invalid data, or if
                                   the reference domain does not
                                   exist, an HTTP 400 (Bad Request)
                                   error response will be returned in
                                   the body of the response with
                                   information regarding the nature of
                                   the failure.</para>
                            </listitem>
                            <listitem>
                                <para>Clone Domain is an atomic
                                   operation. If there is a failure in
                                   the duplication of a single record
                                   or subdomain, the entire process
                                   will fail. Failures are
                                   non-recoverable and require the
                                   caller to correct the cause of the
                                   failure and &POST; the request
                                   again.</para>
                            </listitem>
                            <listitem>
                                <para>The Clone Domain operation is
                                   currently supported for domains
                                   under a given Cloud account. The
                                   cloned domain must belong to the
                                   same account as the reference
                                   domain.</para>
                            </listitem>
                            <listitem>
                                <para>The Clone Domain operation will
                                   return an exception if the
                                   operation would result in creating
                                   a domain that already exists. The
                                   exception would indicate that the
                                   domain already exists.</para>
                            </listitem>
                            <listitem>
                                <para>The Clone Domain operation may
                                   take slightly longer to complete
                                   than a comparable Create Domain
                                   request.</para>
                            </listitem>
                            <listitem>
                                <para>PTR records (for Reverse DNS)
                                   are not represented when a domain
                                   is created and, therefore, are not
                                   included when a domain is cloned.
</para>
                            </listitem>
                            <listitem>
                                <para>If your reference domain already
                                   has both default Rackspace
                                   Nameserver (NS) records, the cloned
                                   domain will be created with no
                                   additional default Rackspace NS
                                   records. If your reference domain
                                   lacks one or both of the default
                                   Rackspace NS records, the cloned
                                   domain will be created with
                                   additional Rackspace default NS
                                   records to make a total of two
                                   default Rackspace NS records. If
                                   the presence of default Rackspace
                                   NS records is not your preference,
                                   they can be deleted from the cloned
                                   domain as long as at least one NS
                                   record remains (Rackspace or
                                   non-Rackspace).</para>
                            </listitem>
                            <listitem>
                                <para>Any non-default (non-Rackspace)
                                   NS records in the reference domain
                                   are cloned and modified in a way
                                   that is consistent with all other
                                   record types.</para>
                            </listitem>
                        </itemizedlist>
</para>
                </note>
                <para>According to the <emphasis>cloneName</emphasis>
                    specified, the domain name and record name(s) will
                    automatically be modified and replaced in the new
                    cloned domain as part of the cloning process and
                    cannot be influenced by any request options. See
                    the table below for the parameters and options
                    available to specify how the cloning affects
                    subdomains, comments, email addresses, and record
                    data.</para>
                <para>The following table lists the parameters and
                    options for Clone Domain.</para>
                <table rules="all" xml:id="clone_domains_parms_options">
                    <caption>Parameters and Options for Clone
                        Domain</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Parameter/Option Name </td>
                            <td colspan="3">Description</td>
                            <td colspan="1">Required</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">cloneName</td>
                            <td colspan="3">The name of the new
                                (cloned) domain.</td>
                            <td colspan="1">Yes.</td>
                        </tr>
                        <tr>
                            <td colspan="1">cloneSubdomains</td>
                            <td colspan="3">Recursively clone
                                subdomains. If set to
                                   <code>false</code>, then only the
                                top level domain and its records are
                                cloned.  Cloned subdomain
                                configurations are modified the same
                                way that cloned top level domain
                                configurations are modified.</td>
                            <td colspan="1">
                                <para>No.</para>
                                <para>Default=<code>true</code>.</para>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1">modifyComment</td>
                            <td colspan="3">Replace occurrences of the
                                reference domain name with the new
                                domain name in comments on the cloned
                                (new) domain.</td>
                            <td colspan="1">
                                <para>No.</para>
                                <para>Default=<code>true</code>.</para>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1">modifyEmailAddress</td>
                            <td colspan="3">Replace occurrences of the
                                reference domain name with the new
                                domain name in email addresses on the
                                cloned (new) domain.</td>
                            <td colspan="1">
                                <para>No.</para>
                                <para>Default=<code>true</code>.</para>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1">modifyRecordData</td>
                            <td colspan="3">Replace occurrences of the
                                reference domain name with the new
                                domain name in data fields (of
                                records) on the cloned (new) domain.
                                Does not affect NS records.</td>
                            <td colspan="1">
                                <para>No.</para>
                                <para>Default=<code>true</code>.</para>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <para>The following examples show the Clone Domain
                    requests:</para>
                <example>
                    <title>Clone Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-clone-domain_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Clone Domain Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/dns-clone-domain_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para>The following examples show the
                            <emphasis>initial</emphasis> 202 Accepted
                        response for the asynchronous call and
                        indicate that the task has been accepted for
                        processing. Refer to <xref
                            linkend="sync_asynch_responses"/> for a
                        description of how the asynchronous call
                        works.</para>
                </note>
                <example>
                    <title>Initial (202) Clone Domain Response:
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-clone-domain_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Initial (202) Clone Domain Response:
                        JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="json"><xi:include href="samples/dns-clone-domain_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The following are examples of the reference
                    domain and the resulting cloned domain:</para>
                <example>
                    <title> Reference (Existing) Domain cloner.com:
                        XML</title>
                    
                    <programlisting language="xml"><xi:include href="samples/dns-clone-domain-reference-domain_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Resulting (Cloned) Domain clone1.com:
                        XML</title>
                    
                    <programlisting language="xml"><xi:include href="samples/dns-clone-domain-final-result_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title> Reference (Existing) Domain cloner.com:
                        JSON</title>
                    
                    <programlisting language="xml"><xi:include href="samples/dns-clone-domain-reference-domain_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Resulting (Cloned) Domain clone1.com:
                        JSON</title>
                    
                    <programlisting language="xml"><xi:include href="samples/dns-clone-domain-final-result_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="import_domain">
                <title>Import Domain</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/domains/import</td>
                            <td colspan="3"> Import a new domain with the configuration specified by
                                the request.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue></simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), itemAlreadyExists (<errorcode>409</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>), unauthorized
                        (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                    itemNotFound (<errorcode>404</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
                <para>This call provisions a new DNS domain under the account specified by the BIND
                    9 formatted file configuration contents defined in the request object.  If the
                    corresponding request cannot be fulfilled due to insufficient or invalid data,
                    an <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and &POST; the request again.</para>
                <para>For all practical purposes, a successful Import Domain call creates a domain,
                    and is therefore similar in response to a Create Domain call.</para>
                <note>
                    <title>Notes</title>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>Refer to <xref
                                   linkend="dns_propagation"/> for
                                   information about DNS
                                   propagation.</para>
                            </listitem>
                            <listitem>
                                <para>This process allows multiple
                                   records to be created along with
                                   the domain. This is an atomic
                                   operation, so if there is a failure
                                   in the creation of even a single
                                   record, the entire process will
                                   fail.</para>
                            </listitem>
                        </itemizedlist>
</para>
                </note>
                <para>Ensure that the BIND 9 formatted file
                    configuration contents are valid by adhering to
                    the following rules:</para><itemizedlist>
                        <listitem>
                            <para>Each record starts on a new line and
                                on the first column. If a record will
                                not fit on one line, use the BIND_9
                                line continuation convention where you
                                put a left parenthesis and continue
                                the one record on the next line and
                                put a right parenthesis when the
                                record ends. For example,
                                <programlisting>example2.net. 3600 IN SOA dns1.stabletransit.com. (
sample@rackspace.com. 1308874739 3600 3600 3600 3600)</programlisting></para>
                        </listitem>
                        <listitem>
                            <para>The attribute values of a record
                                must be separated by a single blank or
                                tab. No other white space
                                characters.</para>
                        </listitem>
                        <listitem>
                            <para>If there are any NS records, the
                                data field should not be
                                dns1.stabletransit.com or
                                dns2.stabletransit.com. They will
                                result in "duplicate record"
                                errors.</para>
                        </listitem>
                    </itemizedlist></para>
                <para>Not following the above rules strictly will
                    result in an HTTP 400 (Bad Request) error response
                    with messages such as the following: "The request
                    could not be understood by the server due to
                    malformed syntax."</para>
                <note>
                    <title>Notes</title>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>If you attempt to import a
                                   domain that already exists, the API
                                   will return an exception saying
                                   that the domain already exists.
                                   This is the same behavior as when
                                   you attempt to create a domain that
                                   already exists.</para>
                            </listitem>
                            <listitem>
                                <para>The domain can have a comment
                                   attribute specified in the import
                                   domain request (see <xref
                                   linkend="import_domain_request_xml"
                                   />), and that comment is
                                   transferred to the new domain.
                                   However the domain contents cannot
                                   have comments specified in them.
                                   For example, no record level
                                   comments can be used in the import
                                   domain request.</para>
                            </listitem>
                            <listitem>
                                <para
                                   linkend="import_domain_request_xml"
                                   >The normal bind rules apply to any
                                   imported bind file, and in
                                   particular, records without a
                                   specified TTL will receive the
                                   domain TTL as the default. If the
                                   domain TTL is not specified, the
                                   SOA minTTL (3600 seconds) is used
                                   as the default instead.</para>
                            </listitem>
                        </itemizedlist>
</para>
                </note>
                <table rules="all">
                    <caption>Required and Optional Attributes for
                        Import Domain</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Name </td>
                            <td colspan="3">Description</td>
                            <td colspan="1">Required</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">contentType</td>
                            <td colspan="3">The content type for the
                                bind file. Must be specified as
                                "BIND_9".</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">contents</td>
                            <td colspan="3">Specifies the valid
                                configuration contents for the domain
                                to be imported.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        
                    </tbody>
                </table>
                <example xml:id="import_domain_request_xml">
                    <title>Import Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-import-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Import Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-import-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para>The following examples show the <emphasis>final</emphasis> successful
                        response for the asynchronous call. Refer to <xref
                            linkend="sync_asynch_responses"/> for a description of how the
                        asynchronous call works.</para>
                </note>
                <example>
                    <title>Import Domain Response: XML</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="xml"><xi:include href="samples/dns-import-domains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Import Domain Response: JSON</title>
                    <?dbfo keep-together="auto"?>
                    <programlisting language="json"><xi:include href="samples/dns-import-domains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="Modify_Domain_s_-d1e3848">
                <title>Modify Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter></td>
                            <td colspan="3">Modify the configuration of a domain.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains</td>
                            <td colspan="3">Modify the configurations of multiple domains.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara>Normal Response Code(s): <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call modifies DNS domain(s) attributes only. Records cannot be added,
                    modified, or removed. Only the TTL, email address and comment attributes of a domain can
                    be modified.</para>
                <para>If a request cannot be fulfilled due to insufficient or invalid data, an
                        <code>HTTP</code>
                    <returnvalue>400 (Bad Request)</returnvalue> error response will be returned
                    with information regarding the nature of the failure in the body of the
                    response. Failures in the validation process are non-recoverable and require the
                    caller to correct the cause of the failure and POST the request again.</para>
                <note><title>Notes</title>
                    <itemizedlist>
                        <listitem>
                            <para>Refer to <xref
                                   linkend="dns_propagation"/> for
                                information about DNS
                                propagation.</para>
                        </listitem>
                        <listitem>
                            <para>A domain's <code>id</code> is
                                immutable.</para>
                        </listitem>
                        <listitem>
                            <para>When the domain and/or record TTL is
                                supplied by the user, either via a
                                create or update call, the TTL values
                                must be 300 seconds or more.</para>
                        </listitem>
                    </itemizedlist>
                </note>
                <table rules="all">
                    <caption>Required and Optional Attributes for
                        Modify Domain(s)</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Name </td>
                            <td colspan="3">Description</td>
                            <td colspan="1">Required</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">id</td>
                            <td colspan="3">For modifying
                                   <emphasis>multiple</emphasis>
                                domains, the id for each domain must
                                be specified as an attribute. Note
                                that for modifying a single domain,
                                the id is a required parameter at the
                                end of the API call URI.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">emailAddress</td>
                            <td colspan="3">Email address to use for
                                contacting the domain
                                administrator.</td>
                            <td colspan="1">No</td>
                        </tr>
                        <tr>
                            <td colspan="1">ttl</td>
                            <td colspan="3">If specified, must be
                                greater than 300.</td>
                            <td colspan="1">No</td>
                        </tr>
                        <tr>
                            <td colspan="1">comment</td>
                            <td colspan="3">If included, its length
                                must be less than or equal to 160
                                characters.</td>
                            <td colspan="1">No</td>
                        </tr>
                    </tbody>
                </table>
                <note>
                    <para><code>name</code> cannot be specified, since
                        the domain name cannot be modified.</para>
                </note>
                <example>
                    <title>Modify Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-domain_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-modify-domain_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-modify-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <section xml:id="Remove_Domain_s_-d1e4022">
                <title>Remove Domain(s)</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="3">URI</td>
                            <td colspan="2">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3">/domains/<parameter>domainId</parameter></td>
                            <td colspan="2">Remove a domain from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                    >/domains?id=<parameter>domainId1</parameter><?sbr?>&amp;id=<parameter>domainId2</parameter></td>
                            <td colspan="2">Remove multiple domains from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                >/domains/<parameter>domainId</parameter>?deleteSubdomains=true</td>
                            <td colspan="2">Remove a domain and its subdomains from an account.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="3"
                                    >/domains/?id=<parameter>domainId1</parameter><?sbr?>&amp;id=<parameter>domainId2</parameter><?sbr?>&amp;deleteSubdomains=true</td>
                            <td colspan="2">Remove multiple domains and their subdomains from an
                                account.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call removes one or more specified domains from the account; when a
                    domain is deleted, its immediate resource records are also deleted from the
                    account. By default, if a deleted domain had subdomains, each subdomain becomes
                    a root domain and is not deleted; this can be overridden by the optional
                        <code>deleteSubdomains</code> parameter. Utilizing the optional
                        <code>deleteSubdomains</code> parameter on domains without subdomains does
                    not result in a failure. When a domain is deleted, any and all domain data is
                    immediately purged and is not recoverable via the API. So on a successful
                    delete, subsequent requests for the deleted object should return itemNotFound
                        (<errorcode>404</errorcode>).</para>
                <example>
                    <title>Delete Domain Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domain_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domain Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-delete-domain_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-delete-domains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domain and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domain-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domain and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-delete-domain-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-domains-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-delete-domains-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Transactionally, delete calls behave differently than other calls in that
                    deletes are never rolled back on exceptions, and multiple deletes in the same
                    request do not fail as a group. Instead, each delete is attempted even if one or
                    more fail. The response for a delete request in which one or more items fail
                    contains information regarding which items failed as well as information
                    regarding specific issues that caused the failure(s). See the examples that
                    follow.</para>
                <example>
                    <title>Delete Domains and Subdomains Response (Failure): XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-delete-multi_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Delete Domains and Subdomains Response (Failure): JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-delete-multi_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>In the previous two response examples, the requested domain objects could not
                    be deleted, since they were not found.</para>
            </section>
        </section>
        <section xml:id="using_subdomains">
            <title>Subdomains</title>
            <para>In the examples that follow for each subsection,
                        <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID.</para>
            <section xml:id="List_Subdomains-d1e4295">
                <title>List Subdomains</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="3">URI</td>
                            <td colspan="2">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="3">/domains/<parameter>domainId</parameter>/subdomains</td>
                            <td colspan="2">List <glossterm baseform="domain">domains</glossterm> that are <glossterm baseform="subdomain">subdomains</glossterm> of the specified
                                domain.</td>
                        </tr>
                   
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s): <returnvalue>200</returnvalue></simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>)</simpara>
                <para>This call provides a list of all DNS domains that are subdomains of the
                    specified domain. The resulting list is flat, and does not break the domains
                    down hierarchically by subdomain.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
                <example>
                    <title>List Subdomains Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-subdomains_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Subdomains Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-subdomains_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Subdomains Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-subdomains_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Subdomains Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-subdomains_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
        </section>
        <section xml:id="Records-d1e4435">
            <title>Records</title>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="2">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                        <td colspan="2">List all <glossterm baseform="record">records</glossterm> configured for the domain. SOA cannot be
                            modified.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                        <td colspan="2">List details for a specific record.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records</td>
                        <td colspan="2">Add new record(s) to the domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2"
                                >/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                        <td colspan="2">Modify the configuration of a record in the domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                        <td colspan="2">Modify the configuration of records in the domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records/<parameter><replaceable>recordId</replaceable></parameter></td>
                        <td colspan="2">Remove a record from the domain.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records?id=<parameter><replaceable>recordId1</replaceable></parameter><?sbr?>&amp;id=<parameter><replaceable>recordId2</replaceable></parameter></td>
                        <td colspan="2">Remove multiple records from the domain.</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>,  and for remove record(s) also
                    <returnvalue>204</returnvalue></simpara>
            <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                itemNotFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
            <para>In the examples that follow for each subsection,
                        <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID.</para> 
            <section xml:id="List_Records-d1e4629">
                <title>List Records</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center" >
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                            <td colspan="3">List all records
                                configured for the specified domain.
                                SOA cannot be modified.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>
</para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call lists all records configured for the
                    specified domain.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref
                            linkend="pagination"/>.</para>
                </note>
            <example>
                <title>List Records Request: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-list-records_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
                <example>
                    <title>List Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-records_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            <example>
                <title>List Records Response: XML</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-list-records_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>List Records Response: JSON</title>
                <programlisting language="json"><xi:include href="samples/dns-list-records_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            </section>
            <section xml:id="Search_Records-e338d7e0">
                <title>Search Records</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center" >
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records?type=<parameter>record_type</parameter>
                            &amp;name=<parameter>record_name</parameter>
                            &amp;data=<parameter>record_data</parameter></td>
                            <td colspan="3">List all records for the
                                specified domain of the specified type
                                that match the specified
                                   <parameter>name</parameter> and/or
                                   <parameter>data</parameter>.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>Normal Response Code(s): <returnvalue>200</returnvalue></para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                 <para>Records can be searched within a domain. The
                    API allows for the caller to supply record type,
                    name, and/or data as query parameters, which
                    instruct the system to only return records of the
                    specified type and matching the specified name
                    and/or data. When searching, the
                        <parameter>type</parameter> is
                        <emphasis>required</emphasis>, while the
                        <parameter>name</parameter> and
                        <parameter>data</parameter> query parameters
                    are optional. The responses from a record search
                    have the same format as the responses shown in
                        <xref linkend="List_Records-d1e4629"/>.</para>
                <note>
                    <para>This call returns by default a maximum of 100 items at a time if no
                            <code>limit</code> is specified. To navigate the collection returned,
                        the parameters <code>limit</code> and <code>offset</code> can be set in the
                        URI (for example: <code>limit=10&amp;offset=0</code>), as described in <xref linkend="pagination"/>.</para>
                </note>
            </section>
            <section xml:id="List_Record_Details-d1e4770">
                <title>List Record Details</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                            <td colspan="3">List details for a
                                specific record in the specified
                                domain.</td>
                        </tr>
                    </tbody>
                    
                    
                </informaltable>
                <para>Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue>
</para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call lists details for the specified record
                    in the specified domain.</para>
                <example>
                    <title>List Record Details Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml">  <xi:include href="samples/dns-list-record-details_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Record Details Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json">  <xi:include href="samples/dns-list-record-details_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Record Details Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-record-details_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List Record Details Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-record-details_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Add_Records-d1e4895">
                <title>Add Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records</td>
                            <td colspan="3">Add new record(s) to the
                                specified domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <para>Normal Response Code(s): <returnvalue>200</returnvalue>,
                        <returnvalue>202</returnvalue>
</para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>This call adds new record(s) to the specified
                    domain.</para>
                <note><title>Notes</title>
                    <itemizedlist>
                        <listitem>
                            <para>If you submit a request with
                                multiple records, and one or more of
                                those records fails, the entire
                                request fails.</para>
                        </listitem>
                        <listitem>
                            <para>When a domain is created, and no
                                TTL (Time To Live) is specified, a
                                default value of 3600 seconds is used.
                                The domain's TTL value is inherited by
                                the record. When the domain and/or
                                record TTL is supplied by the user,
                                either via a create or update call,
                                the TTL values must be 300 seconds or
                                more.</para>
                        </listitem>
                    </itemizedlist>
                </note>
                <table rules="all">
                    <caption>Required and Optional Attributes for Add
                        Records</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Name </td>
                            <td colspan="3">Description</td>
                            <td colspan="1">Required</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">type</td>
                            <td colspan="3">Specifies the record type
                                to add. </td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">name</td>
                            <td colspan="3">Specifies the name for the
                                domain or subdomain. Must be a valid
                                domain name.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">data</td>
                            <td colspan="3">The data field for PTR, A,
                                and AAAA records must be a valid IPv4
                                or IPv6 IP address</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">priority</td>
                            <td colspan="3">Required for MX and SRV
                                records, but forbidden for other
                                record types. If specified, must be an
                                integer from 0 to 65535.</td>
                            <td colspan="1">For MX and SRV records
                                only</td>
                        </tr>
                        <tr>
                            <td colspan="1">ttl</td>
                            <td colspan="3">If specified, must be
                                greater than 300. Defaults to the
                                domain TTL if available, or 3600 if no
                                TTL is specified.</td>
                            <td colspan="1">No</td>
                        </tr>
                        <tr>
                            <td colspan="1">comment</td>
                            <td colspan="3">If included, its length
                                must be less than or equal to 160
                                characters.</td>
                            <td colspan="1">No</td>
                        </tr>
                    </tbody>
                </table>
                <note>
                    <para><code>id</code> for the record must not be
                        specified.</para>
                </note>
                <example>
                    <title>Add Records Request: XML</title>
                    <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="samples/dns-add-records_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                    </example>
                <example>
                    <title>Add Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-add-records_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <note>
                    <para>The following examples show the <emphasis>final</emphasis> successful
                        response for the asynchronous call. Refer to <xref
                            linkend="sync_asynch_responses"/> for a description of how the
                        asynchronous call works.</para>
                </note>
                <example>
                    <title>Add Records Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-add-records_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Add Records Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/dns-add-records_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <section xml:id="Wildcard_Records">
                    <title>Wildcard Records</title>
                    <para>Users can add one or more
                            <emphasis>wildcard</emphasis> records to
                        any domain or sub-domain on their account. For
                        information on the intent and use of wildcard
                        records, see the DNS literature including RFC
                        1034, section 4.3.3, and RFC 4592.</para>
                    <para>Wildcards are supported for A, AAAA, CNAME, MX, SRV and TXT record
                        types.</para>
                    <note>
                        <para>Wildcards are not supported for NS records. It is invalid to use a
                            wildcard in an NS record.</para>
                    </note>
                    <para>A valid wildcard DNS record is specified by using an asterisk
                            ("<code>*</code>") as the leftmost part of a record name, for example
                            <code>*.example.com</code>. An asterisk in any other part of a record
                        name is invalid. Only the asterisk ("<code>*</code>") is accepted as a
                        wildcard character.</para>
                    <section xml:id="Wildcard_Resolution">
                        <title>Wildcard Record Resolution</title>
                        <para>The Cloud DNS infrastructure will
                                <emphasis>only</emphasis> match a
                            wildcard if a label at any level does not
                            exist.</para>
                        <para><?rax-fo keep-with-next?>Consider the
                            following DNS entries:</para>
                        <example>
                                <title>Example Wildcard DNS
                                   Records</title>
                                <programlisting>*.example.com  A  127.0.0.1
images.www.example.com  A  127.0.0.5</programlisting>
                        </example> 
                        <para>A DNS query for
                                <code>www.example.com</code> would
                            return an <code>NXDOMAIN</code> response
                            (meaning the name is either unregistered
                            or invalid), because
                                <code>www.example.com</code> is found
                            in another record. In order for
                                <code>www.example.com</code> to
                            properly resolve, an explicit record would
                            need to be created for it. Additionally, a
                            DNS query for
                                <code>abc.images.www.example.com</code>
                            would not resolve unless an explicit
                            record exists for that name, or a wildcard
                            record exists for
                                <code>*.www.example.com</code> or
                                <code>*.images.www.example.com</code>.</para>
                    </section>
                </section>                
            </section>
            <?hard-pagebreak?>
            <section xml:id="Modify_Records-d1e5033">
                <title>Modify Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records/<parameter>recordId</parameter></td>
                            <td colspan="3">Modify the configuration of a record in the domain.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/domains/<parameter>domainId</parameter>/records</td>
                            <td colspan="3">Modify the configuration of records in the domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>This call returns an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <simpara> Normal Response Code(s): <returnvalue>204</returnvalue>,
                    <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>These calls modify the configuration of a
                    specified record or multiple records in the
                    specified domain.</para>
                <note><title>Notes</title>
                    <itemizedlist>
                        <listitem>
                            <para>If you submit a request with
                                multiple records, and one or more of
                                those records fails, the entire
                                request fails.</para>
                        </listitem>
                        <listitem>
                            <para>When the domain and/or record TTL is
                                supplied by the user, either via a
                                create or update call, the TTL values
                                must be 300 seconds or more.</para>
                        </listitem>
                        <listitem>
                            <para>The only attributes that you can
                                modify on a record (during a &PUT;)
                                are the <code>data</code>,
                                   <code>priority</code> (for MX and
                                SRV records), <code>ttl</code>, and
                                   <code>comment</code>
                                attributes.</para>
                        </listitem>
                    </itemizedlist>
                </note>
                <table rules="all">
                    <caption>Required and Optional Attributes for
                        Modify Records</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Name </td>
                            <td colspan="3">Description</td>
                            <td colspan="1">Required</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">id</td>
                            <td colspan="3">For modifying
                                   <emphasis>multiple</emphasis>
                                records, the id for each record must
                                be specified as an attribute. Note
                                that for modifying a single record,
                                the record id is a required parameter
                                at the end of the API call URI.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">name</td>
                            <td colspan="3">
                                <para>For record types other than SRV
                                   records, this specifies the name
                                   for the domain or subdomain and
                                   must be a valid domain name. If the
                                   record name attribute is not
                                   specified, it is assumed that the
                                   record name is the same as the
                                   domain name to which the record
                                   belongs.The name attribute cannot
                                   be modified.</para>
                                <para>For SRV records, this specifies
                                   the entire service name, which is
                                   made up of the service, protocol,
                                   and domain name to which the record
                                   belongs. The service and protocol
                                   fields of the service name can be
                                   modified but not the domain name
                                   field.  The record name attribute
                                   must be specified for SRV
                                   records.</para>
                            </td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">data</td>
                            <td colspan="3">The data field is required
                                for PTR records and must be a valid
                                IPv4 or IPv6 IP address.</td>
                            <td colspan="1">For PTR records only</td>
                        </tr>
                        <tr>
                            <td colspan="1">priority</td>
                            <td colspan="3">Can be included for MX and
                                SRV records, but forbidden for other
                                record types. If specified, must be an
                                integer from 0 to 65535.</td>
                            <td colspan="1">No</td>
                        </tr>
                        <tr>
                            <td colspan="1">ttl</td>
                            <td colspan="3">If specified, must be
                                greater than 300. Defaults to the
                                domain TTL if available, or 3600 if no
                                TTL is specified.</td>
                            <td colspan="1">No</td>
                        </tr>
                        <tr>
                            <td colspan="1">comment</td>
                            <td colspan="3">If included, its length
                                must be less than or equal to 160
                                characters.</td>
                            <td colspan="1">No</td>
                        </tr>
                    </tbody>
                </table>
                <example>
                    <title>Modify Record Configuration Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-record-config_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Record Configuration Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-modify-record-config_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Records Configuration Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-records-config_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify Records Configuration Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-modify-records-config_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Remove_Records-d1e5188">
                <title>Remove Records</title>
                <informaltable rules="all">
                    <thead align="center">
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records/<parameter><replaceable>recordId</replaceable></parameter></td>
                            <td colspan="3">Remove a record from the domain.</td>
                        </tr> 
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                    >/domains/<parameter><replaceable>domainId</replaceable></parameter>/records?id=<parameter><replaceable>recordId1</replaceable></parameter><?sbr?>&amp;id=<parameter><replaceable>recordId2</replaceable></parameter></td>
                            <td colspan="3">Remove multiple records from the domain.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <note>
                    <para>These calls return an asynchronous response, as described in <xref
                            linkend="sync_asynch_responses"/>.</para>
                </note>
                <para>Normal Response Code(s): <returnvalue>204</returnvalue>,
                    <returnvalue>202</returnvalue>
</para>
                <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>), serviceUnavailable
                    (<errorcode>503</errorcode>), unauthorized (<errorcode>401</errorcode>),
                    badRequest (<errorcode>400</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
                <para>These calls remove a specified record or
                    multiple records from the specified domain.</para>
                <para>When a record is deleted, any and all record data is immediately purged and is
                    not recoverable via the API. So on a successful delete, subsequent requests for
                    the deleted record should return itemNotFound
                    (<errorcode>404</errorcode>).</para>
                <example>
                    <title>Remove Record Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-record_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Remove Record Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-record_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Remove Records Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-records_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Remove Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-records_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Transactionally, delete calls behave differently than other calls in that
                    deletes are never rolled back on exceptions, and multiple deletes in the same
                    request do not fail as a group. Instead, each delete is attempted even if one or
                    more fail. The response for a delete request in which one or more items fail
                    contains information regarding which items failed as well as information
                    regarding specific issues that caused the failure(s). See the examples that
                    follow.</para>
                <example>
                    <title>Remove Records Response (Failure):
                        XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-remove-records-failure_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Remove Records Response (Failure):
                        JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-remove-records-failure_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>In the previous two response examples, the requested record objects could not
                    be deleted, since they were not found.</para>
            </section>
        </section>
        <?hard-pagebreak?>
        <section xml:id="ReverseDNS-123456999">
            <title>Reverse DNS</title>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="2">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/rdns/<parameter>service_name</parameter>?href=<parameter>device-resource-uri</parameter></td>
                        <td colspan="2">List all PTR records
                            configured for a Rackspace Cloud
                            device.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/rdns/<parameter>service_name</parameter>/<parameter>recordId</parameter>?href=<parameter>device-resource-uri</parameter></td>
                        <td colspan="2">List details for a specific
                            PTR record associated with a Rackspace
                            Cloud device.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/rdns</td>
                        <td colspan="2">Add new PTR record(s) for a
                            Rackspace Cloud device.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&PUT;</td>
                        <td colspan="2">/rdns</td>
                        <td colspan="2">Modify one or more PTR records
                            associated with a Rackspace Cloud
                            device.</td>
                    </tr>
                    <tr>
                        <td colspan="1">&DELETE;</td>
                        <td colspan="2"
                                >/rdns/<parameter>service-name</parameter>?href=<parameter>device-resource-uri</parameter>&amp;ip=<parameter>optional-ip-address</parameter></td>
                        <td colspan="2">Remove one or all PTR records
                            associated with a Rackspace Cloud device.
                            Use the optional <parameter>ip</parameter>
                            query parameter to specify a specific
                            record to delete. Omitting this parameter
                            removes all PTR records associated with
                            the specified device.</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s): <returnvalue>200</returnvalue>,
                    <returnvalue>202</returnvalue>,  and for remove record(s) also
                    <returnvalue>204</returnvalue></simpara>
            <simpara> Error Response Code(s): dnsFault (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>), serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), badRequest (<errorcode>400</errorcode>),
                itemNotFound (<errorcode>404</errorcode>), overLimit (<errorcode>413</errorcode>) </simpara>
            <para>Cloud DNS supports the management of reverse DNS
                (PTR) records for Rackspace Cloud devices such as
                Cloud Load Balancers and <trademark>Cloud
                    Servers</trademark> (both first generation and
                next generation). In order to manage the PTR records
                for Rackspace Cloud devices, the service as well as
                the device resource URI must be specified along with
                record details. The service is specified using the
                appropriate service name as returned in the service
                catalog from the Rackspace Cloud Authentication
                Service. The device resource URI was returned when the
                device was created via the appropriate service.</para>
            <note>
                <para>The device URI must specify the device itself
                    and not one of its sub-resources.</para>
            </note>
            <para>The following Rackspace Cloud services are supported
                in this version of the Cloud DNS API:</para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td>Rackspace Cloud Service</td>
                        <td>Service Catalog Name</td>
                        <td>Supported API Version(s)</td>
                        <td>API Documentation</td>
                    </tr>
                </thead>
                <tbody>
                    <!-\-                     <tr> -\->
                    <!-\-                         <td><trademark>Cloud Servers</trademark></td> -\->
                    <!-\-                         <td>cloudServers</td> -\->
                    <!-\-                         <td>v1.0</td> -\->
                    <!-\-                         <td>http://docs.rackspace.com/servers/api/v1.0/cs-devguide/content/index.html</td> -\->
                    <!-\-                     </tr> -\->
                    <tr>
                        <td>First Generation Cloud
                            Servers<trademark/></td>
                        <td>cloudServers</td>
                        <td>v1.0</td>
                        <td><link
                            xlink:href="http://docs.rackspace.com/servers/api/v1.0/cs-devguide/content/index.html"
                            >http://docs.rackspace.com/servers/api/v1.0/cs-devguide/content/index.html</link></td>
                    </tr>
                    <tr>
                        <td>Next Generation Cloud Servers<trademark/>
                            powered by OpenStack<trademark/></td>
                        <td>cloudServersOpenStack</td>
                        <td>v2</td>
                        <td><link
                            xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/index.html"
                            >http://docs.rackspace.com/servers/api/v2/cs-devguide/content/index.html</link></td>
                    </tr>
                    <tr>
                        <td>Cloud Load Balancers</td>
                        <td>cloudLoadBalancers</td>
                        <td>v1.0</td>
                        <td><link
                                xlink:href="http://docs.rackspace.com/api/"
                                >http://docs.rackspace.com/api/</link></td>
                    </tr>
                </tbody>
            </informaltable>
           <para>The examples in the following sections illustrate
                using Cloud DNS to manage PTR records for Next
                Generation Cloud Servers powered by OpenStack. Using
                Cloud DNS API to manage other supported Rackspace
                Cloud devices only requires substituting the
                appropriate service catalog name and device resource
                URI.</para>
            <para>In the examples that follow for each subsection,
                        <parameter><replaceable>1234</replaceable></parameter>
                should be replaced by your authenticated account ID.</para>
           <section xml:id="ReverseDNS-123457000">
               <title>List PTR Records</title>
               <informaltable rules="all">
                   <thead>
                       <tr>
                          <td colspan="2">Verb</td>
                          <td colspan="4">URI</td>
                          <td colspan="4">Description</td>
                       </tr>
                   </thead>
                   <tbody>
                       <tr>
                           <td colspan="2">&GET;</td>
                           <td colspan="4">/rdns/<parameter>service-name</parameter>?href=<parameter>device-resource-uri</parameter></td>
                           <td colspan="4">List all PTR records configured for the specified Cloud device.</td>
                       </tr>
                   </tbody>
               </informaltable>
               <example>
                    <title>List PTR Records Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-ptr_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List PTR Records Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-ptr_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
                <example>
                    <title>List PTR Records Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-ptr_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
                <example>
                    <title>List PTR Records Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-ptr_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>               
           </section>
           <section xml:id="ReverseDNS-123457001">
               <title>List PTR Record Details</title>
               <informaltable rules="all">
                   <thead>
                       <tr>
                          <td colspan="2">Verb</td>
                          <td colspan="4">URI</td>
                          <td colspan="4">Description</td>
                       </tr>
                   </thead>
                   <tbody>
                       <tr>
                           <td colspan="2">&GET;</td>
                           <td colspan="4">/rdns/<parameter>service-name</parameter>/<parameter>recordId</parameter>?href=<parameter>device-resource-uri</parameter></td>
                           <td colspan="4">List details for a specific PTR record associated with the specified Cloud device.</td>
                       </tr>
                   </tbody>
               </informaltable>
               <example>
                    <title>List PTR Record Details Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-ptr-details_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>List PTR Record Details Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-ptr-details_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
                <example>
                    <title>List PTR Record Details Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-list-ptr-details_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
                <example>
                    <title>List PTR Record Details Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-list-ptr-details_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
           </section>
           <section xml:id="ReverseDNS-123457003">
               <title>Add PTR Records</title>
               <informaltable rules="all">
                   <thead>
                       <tr>
                          <td colspan="2">Verb</td>
                          <td colspan="4">URI</td>
                          <td colspan="4">Description</td>
                       </tr>
                   </thead>
                   <tbody>
                       <tr>
                           <td colspan="2">&POST;</td>
                           <td colspan="4">/rdns</td>
                           <td colspan="4">Add new PTR record(s) for the specified Cloud device.</td>
                       </tr>
                   </tbody>
               </informaltable>
               <table rules="all">
                    <caption>Required and Optional Attributes for Add
                        PTR Records</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Name </td>
                            <td colspan="3">Description</td>
                            <td colspan="1">Required</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">type</td>
                            <td colspan="3">Specifies the record type
                                as "PTR". </td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">name</td>
                            <td colspan="3">Specifies the name for the
                                domain or subdomain. Must be a valid
                                domain name.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">data</td>
                            <td colspan="3">The data field for PTR
                                records must be a valid IPv4 or IPv6
                                IP address.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                       
                        <tr>
                            <td colspan="1">ttl</td>
                            <td colspan="3">If specified, must be
                                greater than 300. Defaults to 3600 if
                                no TTL is specified.</td>
                            <td colspan="1">No</td>
                        </tr>
                        <tr>
                            <td colspan="1">comment</td>
                            <td colspan="3">If included, its length
                                must be less than or equal to 160
                                characters.</td>
                            <td colspan="1">No</td>
                        </tr>
                    </tbody>
                </table>
               <note><title>Notes</title>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>PTR records can only be added for
                                Rackspace Cloud Servers and Load
                                Balancers.</para>
                        </listitem>
                        <listitem>
                            <para><code>id</code> for the record must
                                not be specified.</para>
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <para>For First Generation Cloud Servers,
                                when the server is created, each
                                public IPv4 address that comes with
                                the server usually has a default PTR
                                record already created for it. A
                                request to list the PTR records
                                associated with the server should
                                return any PTR records for the server.
                                If a default PTR record exists, the
                                default PTR record can be
                                appropriately modified or deleted and
                                an appropriate PTR record
                                created.</para>
                            <para>If an attempt to add a PTR record
                                for the public IP address of a newly
                                created First Generation Cloud Server
                                results in a 400 Bad Request error
                                message, that is an indication that a
                                default PTR record for the IP address
                                already exists.</para>
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <para>Adding PTR records for IPv6
                                addresses is supported only for Next
                                Generation Cloud Servers.</para>
                        </listitem>
                    </itemizedlist>
                </note>
                <para>Notice in the requests below that the
                        <emphasis>service</emphasis> and
                        <emphasis>device</emphasis> resource URI are
                    specified respectively as the <code>rel</code> and
                        <code>href</code> attributes of the
                        <emphasis>link</emphasis> element.</para>
               <example>
                    <title>Add PTR Record Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-add-ptr_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Add PTR Record Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-add-ptr_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
                <example>
                    <title>Add PTR Record Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-add-ptr_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
                <example>
                    <title>Add PTR Record Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-add-ptr_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
           </section>
           <section xml:id="ReverseDNS-123457004">
               <title>Modify PTR Records</title>
               <informaltable rules="all">
                   <thead>
                       <tr>
                          <td colspan="2">Verb</td>
                          <td colspan="4">URI</td>
                          <td colspan="4">Description</td>
                       </tr>
                   </thead>
                   <tbody>
                       <tr>
                           <td colspan="2">&PUT;</td>
                           <td colspan="4">/rdns</td>
                           <td colspan="4">Modify one or more PTR records associated with a Rackspace Cloud device.</td>
                       </tr>
                   </tbody>
               </informaltable>
               <note><para>The IP address (data) for a PTR record cannot be modified. To change the reverse DNS 
                   for a domain, any existing PTR record(s) must be deleted and new ones created.</para></note>
               <table rules="all">
                    <caption>Required and Optional Attributes for
                        Modify PTR Records</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Name </td>
                            <td colspan="3">Description</td>
                            <td colspan="1">Required</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">name</td>
                            <td colspan="3">Specifies the name for the
                                domain or subdomain. Must be a valid
                                domain name. Can be modified.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">id</td>
                            <td colspan="3">Specifies the unique id of
                                the record.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">type</td>
                            <td colspan="3">Specifies the record type
                                as "PTR".</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">data</td>
                            <td colspan="3">The data field is required
                                for PTR records and must be a valid
                                IPv4 or IPv6 IP address.</td>
                            <td colspan="1">Yes</td>
                        </tr>
                        <tr>
                            <td colspan="1">ttl</td>
                            <td colspan="3">If specified, must be
                                greater than 300. Defaults to 3600 if
                                no TTL is specified.</td>
                            <td colspan="1">No</td>
                        </tr>
                        <tr>
                            <td colspan="1">comment</td>
                            <td colspan="3">If included, its length
                                must be less than or equal to 160
                                characters.</td>
                            <td colspan="1">No</td>
                        </tr>
                    </tbody>
                </table>
                <para>Notice in the requests below that the
                        <emphasis>service</emphasis> and
                        <emphasis>device</emphasis> resource URI are
                    specified respectively as the <code>rel</code> and
                        <code>href</code> attributes of the
                        <emphasis>link</emphasis> element.</para>
               <example>
                    <title>Modify PTR Record Request: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-ptr_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <example>
                    <title>Modify PTR Record Request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-modify-ptr_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
                <example>
                    <title>Modify PTR Record Response: XML</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="samples/dns-modify-ptr_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
                <example>
                    <title>Modify PTR Record Response: JSON</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="json"><xi:include href="samples/dns-modify-ptr_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting></example>
           </section>
           <section xml:id="ReverseDNS-123457005">
               <title>Remove PTR Records</title>
               <informaltable rules="all">
                   <thead>
                       <tr>
                          <td colspan="2">Verb</td>
                          <td colspan="4">URI</td>
                          <td colspan="4">Description</td>
                       </tr>
                   </thead>
                   <tbody>
                       <tr>
                           <td colspan="2">&DELETE;</td>
                           <td colspan="4">/rdns/<parameter>service-name</parameter>?href=<parameter>device-resource-uri</parameter>&amp;ip=<parameter>optional-ip-address</parameter></td>
                           <td colspan="4">Remove one or all PTR records associated with a Rackspace Cloud device. Use the optional <parameter>ip</parameter>
                           query parameter to specify a specific record to delete. Omitting this parameter removes all PTR records associated with the
                           specified device.</td>
                       </tr>
                   </tbody>
               </informaltable>
               <example>
                   <title>Remove All PTR Records Request: XML</title>
                   <programlisting language="xml"><xi:include href="samples/dns-delete-all-ptr_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
               </example>
               <example>
                   <title>Remove All PTR Records Request: JSON</title>
                   <programlisting language="json"><xi:include href="samples/dns-delete-all-ptr_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
               </example>
               <example>
                   <title>Remove All PTR Records Response: XML</title>
                   <programlisting language="xml"><xi:include href="samples/dns-delete-all-ptr_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
               </example>
               <example>
                   <title>Remove all PTR Records Response: JSON</title>
                   <programlisting language="json"><xi:include href="samples/dns-delete-all-ptr_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
               </example>
               <example>
                   <title>Remove Specific PTR Record Request: XML</title>
                   <programlisting language="xml"><xi:include href="samples/dns-delete-one-ptr_request.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
               </example>
               <example>
                   <title>Remove Specific PTR Record Request: JSON</title>
                   <programlisting language="json"><xi:include href="samples/dns-delete-one-ptr_request.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
               </example>
               <example>
                   <title>Remove Specific PTR Record Response: XML</title>
                   <programlisting language="xml"><xi:include href="samples/dns-delete-one-ptr_response.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
               </example>
               <example>
                   <title>Remove Specific PTR Record Response: JSON</title>
                   <programlisting language="json"><xi:include href="samples/dns-delete-one-ptr_response.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
               </example>
           </section>
        </section>
    </chapter>-->
    <chapter xml:id="API_Operations_Wadl-d1e2648" role="api-reference">
        <title>API operations</title>
        <info>
            <raxm:metadata
                xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <raxm:type>concept</raxm:type>
                <raxm:product version="v2">cdns</raxm:product>
                <raxm:priority>1</raxm:priority>
            </raxm:metadata>
        </info>
        <!--<?dbhtml stop-chunking?>-->
        <!--   <wadl:resources
            href="wadl/dns.wadl"
            xmlns:wadl="http://wadl.dev.java.net/2009/02"/>  -->
        <section xml:id="limits" security="writeronly">
            <title>Limits</title>
            <wadl:resources
                xmlns:wadl="http://wadl.dev.java.net/2009/02">
                <wadl:resource href="wadl/dns.wadl#limits">
                    <wadl:method href="#listLimits"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#type_id">
                    <wadl:method href="#showLimits"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#types">
                    <wadl:method href="#listLimitTypes"/>
                </wadl:resource>
            </wadl:resources>
        </section>
        <section xml:id="zones">
            <title>Zones</title>
            <wadl:resources
                xmlns:wadl="http://wadl.dev.java.net/2009/02">
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#zones">
                    <wadl:method href="#listZones"/>
                    <wadl:method href="#createZone"/>
                </wadl:resource>
                
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#zone_id">
                    <wadl:method href="#updateZone"/>
                    <wadl:method href="#deleteZone"/>
                </wadl:resource>
                
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#zone_id_tasks">
                    <wadl:method href="#abandonZone"/>
                </wadl:resource>
                
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#zones_tasks">
                    <wadl:method href="#importZone"/>
                    <wadl:method href="#listZoneImports"/>
                </wadl:resource>
                
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#zone_id3">
                    <wadl:method href="#listZoneImport"/>
                    <wadl:method href="#deleteZoneImport"/>
                </wadl:resource>
                
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#zones_uuid">
                    <wadl:method href="#exportZone"/>
                </wadl:resource>
                
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#zones_tasks2">
                    <wadl:method href="#listZoneExports"/>
                </wadl:resource>
                
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#uuid_id2">
                    <wadl:method href="#listZoneExport"/>
                    <wadl:method href="#deleteZoneExport"/>
                </wadl:resource>
                
                <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#export2">
                    <wadl:method href="#listExportedZone"/>
                </wadl:resource>
            
            </wadl:resources>
        </section> 
        
         <section xml:id="recordsets">
                    <title>Record Sets</title>
                    <wadl:resources
                        xmlns:wadl="http://wadl.dev.java.net/2009/02">
                        <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#zone_id_recordset">
                            <wadl:method href="#createRecordset"/>
                            <wadl:method href="#listRecordsets"/>
                        </wadl:resource>
                        
                        <wadl:resource href="wadl/dns_with_rax_roles-2.wadl#recordset_id_recordset">
                            <wadl:method href="#updateRecordset"/>
                            <wadl:method href="#listRecordset"/>
                            <wadl:method href="#deleteRecordset"/>
                        </wadl:resource>
                    </wadl:resources>
          </section> 
                
                
                <!--               <wadl:resource href="wadl/dns.wadl#search">
                    <wadl:method href="#searchDomains"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#domain_id">
                    <wadl:method href="#listDomainsWithoutSubDomains"/>
                    <wadl:method href="#showDomain"/>
                    <wadl:method href="#updateDomain"/>
                    <wadl:method href="#deleteDomain"/>
                    <wadl:method href="#deleteDomainAndSubdomains"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#changes">
                    <wadl:method href="#showDomainChanges"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#export">
                    <wadl:method href="#exportDomain"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#clone">
                    <wadl:method href="#cloneDomain"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#import">
                    <wadl:method href="#importDomain"/>
                </wadl:resource>
                
                -->
            
        
        <section xml:id="subdomains" security="writeronly">
            <title>Subdomains</title>
            <wadl:resources
                xmlns:wadl="http://wadl.dev.java.net/2009/02">
                <wadl:resource href="wadl/dns.wadl#subdomains">
                    <wadl:method href="#listSubdomains"/>
                </wadl:resource>
            </wadl:resources>
        </section>
        <section xml:id="records" security="writeronly">
            <title>Records</title>
            <wadl:resources
                xmlns:wadl="http://wadl.dev.java.net/2009/02">
                <wadl:resource href="wadl/dns.wadl#records">
                    <wadl:method href="#listRecords"/>
                    <wadl:method href="#searchRecords"/>
                    <wadl:method href="#addRecords"/>
                    <wadl:method href="#deleteRecords"/>
                    <wadl:method href="#updateRecords"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#recordId">
                    <wadl:method href="#deleteRecord"/>
                    <wadl:method href="#updateRecord"/>
                    <wadl:method href="#showRecord"/>                 
                </wadl:resource>
            </wadl:resources>
        </section>
        <section xml:id="ptr_records" security="writeronly">
            <title>Reverse DNS</title>
            <wadl:resources
                xmlns:wadl="http://wadl.dev.java.net/2009/02">
                <wadl:resource href="wadl/dns.wadl#rdns">
                    <wadl:method href="#updatePTRRecords"/>
                    <wadl:method href="#addPTRRecords"/>
                </wadl:resource>
                <wadl:resource href="wadl/dns.wadl#service-name">
                    <wadl:method href="#listPTRRecords"/>
                    <wadl:method href="#deletePTRRecords"/>
                </wadl:resource>
                <wadl:resource
                    href="wadl/dns.wadl#service-name_recordId">
                    <wadl:method href="#showPTRRecord"/>
                </wadl:resource>
            </wadl:resources>
        </section>
    </chapter>
    <glossary>
        <title>Glossary</title>
        <info>
            <raxm:metadata
                xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <raxm:type>concept</raxm:type>
                <raxm:product version="v2">cdns</raxm:product>
                <raxm:priority>50</raxm:priority>
            </raxm:metadata>
        </info>
        <glossentry xml:id="DNS-d1e017">
            <glossterm>DNS</glossterm>
            <glossdef>
                <para>The Domain Name System (DNS) is a system by
                    which internet domain name-to-address and
                    address-to-name resolutions are determined. All
                    domains and their components, such as mail
                    servers, utilize DNS to resolve to the appropriate
                    locations. DNS servers are usually set up in a
                    master-slave relationship such that failure of the
                    master invokes the slave. DNS servers may also be
                    clustered or replicated such that changes made to
                    one DNS server are automatically propagated to
                    other active servers.</para>
                <para security="reviewer"><emphasis role="bold">Note:</emphasis> DNS
                    understands only ASCII, so the Managed DNS Service
                    provides conversion between UTF-8 and ASCII on all
                    calls into the system.</para>
                <para security="reviewer">Reviewer: from Nicole --
                    confirm that previous sentence is true for Managed
                    DNS. James Li responded: "Designate probably does
                    not support unicode domains. The team has not yet
                    tested it." So I will hide the above paragraph
                    about providing conversion for now and then put it
                    back in for EA. </para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="Domain-d1e016">
            <glossterm>domain</glossterm>
            <glossdef>
                <para>A domain is an entity/container of all
                    DNS-related information containing one or more
                    records.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>subdomain</glossterm>
            <glossdef>
                <para>Subdomains are domains within a parent domain,
                    and subdomains cannot be registered. Subdomains
                    allow you to delegate domains. Subdomains can
                    themselves have subdomains, so third-level,
                    fourth-level, fifth-level, and deeper levels of
                    nesting are possible.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="Domain-Owner-d1e020">
            <glossterm>domain owner</glossterm>
            <glossdef>
                <para>Within Rackspace DNS, the account which creates
                    the domain is the domain owner.</para>
                <para><emphasis role="bold">Note:</emphasis> Domain
                    registration is currently outside the scope of the
                    Rackspace DNS API. Any references to ownership and
                    management of domain information is only relevant
                    within the context of the Rackspace DNS
                    system.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="Record-d1e019">
            <glossterm>record</glossterm>
            <glossdef>
                <para>A DNS record belongs to a particular domain and
                    is used to specify information about the domain.
                    There are several types of DNS records. Each
                    record type contains particular information used
                    to describe that record's purpose. Examples
                    include mail exchange (MX) records, which specify
                    the mail server for a particular domain, and name
                    server (NS) records, which specify the
                    authoritative name servers for a domain.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>record set</glossterm>
            <glossdef>
                <para>A record set groups together a list of related
                    records of the same type. It is the essential
                    content of your zone file. Record sets are also
                    referred to as Resource Record Sets or
                    RRSets.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>zone</glossterm>
            <glossdef>
                <para>A zone corresponds to a Cloud DNS domain. See
                        <emphasis>domain</emphasis>.</para>
            </glossdef>
        </glossentry>
    </glossary>
</book>
