<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>

        <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
]>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
	xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
	xml:id="cdns-mgmt" version="5.0">
    
    <?rax title.font.size="35px" subtitle.font.size="20px"?>
	<title>Cloud DNS Developer Guide for Service Management</title>
    <?rax status.bar.text="RAX INTERNAL"?>
	<info>
		<author>
			<personname>
				<firstname />
				<surname />
			</personname>
			<affiliation>
				<orgname>Rackspace Cloud</orgname>
			</affiliation>
		</author>
		<copyright>
			<year>2010</year>
			<year>2011</year>
			<holder>Rackspace US, Inc.</holder>
		</copyright>
		<releaseinfo>API v1.0</releaseinfo>
		<productname>Cloud DNS</productname>
		<pubdate>2011-10-26</pubdate>
		<legalnotice role="rs-api">
			<annotation>
				<remark>Copyright details are filled in by the template.</remark>
			</annotation>
		</legalnotice>
		<abstract>
			<para>
				This document is intended for software developers interested in
				developing service
				management applications using the using the
				Rackspace Cloud DNS Application
				Programming Interface (
				<abbrev>API</abbrev>
				).
			</para>
		</abstract>
		<revhistory>
			<revision>
				<date>2011-10-26</date>
				<revdescription>
					<itemizedlist spacing="compact">
						<listitem>
							<para>Initial GA release.</para>
						</listitem>
					</itemizedlist>
				</revdescription>
			</revision>
		</revhistory>
	</info>
	<chapter xml:id="overview">
		<title>Overview</title>
		<para>
			Rackspace Cloud DNS is a Domain Name System (DNS)
			available to
			Rackspace Cloud customers. Interactions with
			Rackspace Cloud DNS occur
			programmatically via the
			Rackspace Cloud DNS API as described in this
			<citetitle>Cloud DNS Developer Guide for Service
				Management
			</citetitle>
			.
		</para>
		<para>The API operations described in this manual relate to
			support of
			DNS service activities on behalf of a specific
			customer. The scope of
			these operations is narrow,
			relating to the needs of a single
			customer. A customer
			might directly request these operations, however
			only
			Rackers are authorized to perform them.</para>
		<note>
			<para> DNS propagation may take up to 1 minute. </para>
		</note>
		<para>
			The following figure shows an overview of Cloud DNS Infrastructure:
			<informalfigure>
				<mediaobject>
					<imageobject role="fo">
						<imagedata fileref="images/Cloud_DNS_Infographic-1.svg"
							contentwidth="6in" />
					</imageobject>
					<imageobject role="html">
						<imagedata fileref="images/Cloud_DNS_Infographic-1.png" />
					</imageobject>
				</mediaobject>
			</informalfigure>
		</para>
		<para>
			We welcome feedback, comments, and bug reports at
			<link xlink:href="http://feedback.rackspacecloud.com">http://feedback.rackspacecloud.com
			</link>
			.
		</para>
		<para>Issues and bug reports can be directed to your support team via
			ticket, chat, email,
			or phone.</para>
		<section xml:id="Intended_Audience-d1e122">
			<title>Intended Audience</title>
			<para>Two APIs provide access to Rackspace Cloud DNS: </para>
			<itemizedlist spacing="compact">
				<listitem>
					<para>
						The
						<emphasis>management</emphasis>
						API,
						available only to developers within Rackspace,
						is the subject
						of this document.
					</para>
				</listitem>
				<listitem>
					<para>
						The
						<emphasis>public</emphasis>
						API,
						available to developers within Rackspace and
						Rackspace
						customers, is the subject of a
						companion document, the
						<citetitle>Cloud DNS
							Developer Guide</citetitle>
						.
					</para>
				</listitem>
			</itemizedlist>
			<para>To use the information provided here, you should
				first have a
				general understanding of the DNS service.
				You should also be familiar
				with: </para>
			<itemizedlist spacing="compact">
				<listitem>
					<para>DNS terminology</para>
				</listitem>
				<listitem>
					<para>General operating principles of DNS</para>
				</listitem>
				<listitem>
					<para>RESTful web services</para>
				</listitem>
				<listitem>
					<para>HTTP/1.1 conventions</para>
				</listitem>
				<listitem>
					<para>JSON and/or XML data serialization
						formats</para>
				</listitem>
			</itemizedlist>
			<para>
				You should also be familiar with the way the Cloud DNS Service API
				works. For
				information, refer to the
				<citetitle>Cloud DNS Developer Guide</citetitle>
				.
			</para>
		</section>
        <?hard-pagebreak?>
		<section xml:id="Document_Change_History-d1e166">
			<title>Document Change History</title>
			<para>This version of the Developer Guide replaces and
				obsoletes all
				previous versions. The most recent changes
				are described in the table
				below:</para>
        <?rax revhistory?>
		</section>
		<section xml:id="Additional_Resources-d1e532">
			<title>Additional Resources</title>
			<para>
				You can download the most current versions of other API-related
				documents from
				<link xlink:href="http://docs.rackspace.com/api/">http://docs.rackspace.com/api/
				</link>
				.
			</para>
			<para>
				For information about Rackspace Cloud products, refer to
				<link xlink:href="http://www.rackspace.com/cloud/">http://www.rackspace.com/cloud
				</link>
				. This site also offers links to
				Rackspace's official support
				channels, including knowledge base articles,
				forums,
				phone, chat, and
				email.
			</para>
			<para>
				You can also follow Rackspace updates and announcements via twitter
				at
				<link xlink:href="http://www.twitter.com/rackspace">http://www.twitter.com/rackspace
				</link>
				.
			</para>
			<para>
				This API uses standard HTTP 1.1 response codes as documented at
				<link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">
					http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>
				.
			</para>
		</section>
	</chapter>
	<chapter xml:id="Concepts-d1e563">
		<title>Concepts</title>
        <?dbhtml stop-chunking?>
		<para> To use the DNS API effectively, you should understand several
			key concepts: </para>
		<section xml:id="DNS-d1e573">
			<title>DNS</title>
			<para> The Domain Name System (DNS) is a system by which internet
				domain name-to-address
				and address-to-name resolutions are
				determined. All domains and their
				components,
				such as mail servers,
				utilize DNS to resolve to the appropriate
				locations. DNS
				servers are
				usually set up in a master-slave relationship such that failure
				of
				the
				master invokes the slave. DNS servers may also be clustered or
				replicated
				such that
				changes made to one DNS server are automatically
				propagated to other active
				servers. </para>
			<note>
				<para>
					DNS understands only ASCII, so the Cloud DNS Service provides
					conversion between UTF-8 and ASCII on all calls into the
					system.
				</para>
			</note>
		</section>
		<section xml:id="Domain-d1e588">
			<title>Domain</title>
			<para> A domain is an entity/container of all DNS-related information
				containing one or
				more records. </para>
		</section>
		<section xml:id="subdomain">
			<title>Subdomain</title>
			<para>Subdomains are domains within a parent domain, and subdomains
				cannot be
				registered. Subdomains allow you to delegate domains.
				Subdomains can themselves
				have
				subdomains, so third-level,
				fourth-level, fifth-level, and deeper levels of
				nesting
				are possible.
			</para>
		</section>
		<section xml:id="Record-d1e607">
			<title>Record</title>
			<para> A DNS record belongs to a particular domain and is used to
				specify information
				about the domain. There are several types of DNS
				records. Each record
				type contains
				particular information used to
				describe that record's purpose. Examples
				include mail
				exchange (MX)
				records, which specify the mail server for a particular
				domain, and
				name server (NS) records, which specify the authoritative name
				servers
				for a domain. </para>
		</section>
		<section xml:id="Domain_Owner-d1e616">
			<title>Domain Owner</title>
			<para> Within Rackspace DNS, the account which creates the domain is
				the domain
				owner.</para>
			<note>
				<para>Domain registration is currently outside the scope of the
					Rackspace DNS API.
					Any references to ownership and management of
					domain information is
					only
					relevant within the context of the
					Rackspace DNS system.</para>
			</note>
		</section>
	</chapter>
	<chapter xml:id="General_API_Info">
		<title>General API Information</title>
		<para>The Cloud DNS Management API is implemented using a RESTful web
			service interface. Most functions
			of the customer-facing Cloud DNS API
			may be accessed on behalf of a
			customer. The Cloud DNS Management API
			also extends this functionality to include operations for managing
			features of the public API as well
			as additional data fields not
			available to customers.</para>
		<section xml:id="Authentication_Mgmt">
			<title>Authentication</title>
            <?dbhtml stop-chunking?>
			<para>Every ReST request against the Cloud DNS Management
				API requires
				that the caller be authenticated with
				HTTP Basic Auth using a valid
				Rackspace SSO username
				and password.  </para>
			<note>
				<para>Not all Rackspace employees with valid SSO
					credentials will
					have access to the Cloud DNS
					Management API. If you cannot access
					the service
					and feel that this is in error, please contact
					your
					supervisor and have the appropriate roles
					added to your account.
				</para>
			</note>
		</section>
	</chapter>
	<chapter xml:id="Mgmt_API_Information-d1e633">
		<title>Management API Operations</title>
		<para>These API operations relate to administration of the environment
			that enables and
			supports the DNS service for all customers. The scope
			of these operations is
			wide,
			relating to the overall operating
			environment rather than to a single
			customer. Rackers
			might perform
			these operations to examine or alter the overall operational
			environment.</para>

		<section xml:id="Domains-d1e647">
			<title>Domains</title>
            <?dbhtml stop-chunking?>
			<section xml:id="Search_Domains">
				<title>Search Domains</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="2">URI</td>
							<td colspan="4">Description</td>
							<td colspan="4">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&GET;
							</td>
							<td colspan="2">
								/search?name=
								<parameter>domainName</parameter>
							</td>
							<td colspan="4">Find all domains that match the specified domain
								name.</td>
							<td colspan="4">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/search?name=rackspace
							</td>
						</tr>

					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>200</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					), serviceUnavailable
					(
					<errorcode>503</errorcode>
					), unauthorized (
					<errorcode>401</errorcode>
					),
					badRequest (
					<errorcode>400</errorcode>
					), overLimit (
					<errorcode>413</errorcode>
					)
				</simpara>
				<para><?rax-fo keep-with-next?>
					This operation
					supports searching for a domain by full or partial
					name.
				</para>
				<para><?rax-fo keep-with-next?>
					In the following examples, the specified search name
					is
					<code>rackspace</code>
					:
				</para>
				<example>
					<title>Search Domains Request: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-search-domains_request.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-search-domains_request.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Search Domains Request: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-search-domains_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-search-domains_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<para><?rax-fo keep-with-next?>
					The domain is listed in
					the response if its name contains the string
					"rackspace" anywhere in the name:
				</para>
				<example>
					<title>Search Domains Response: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-search-domains_response.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-search-domains_response.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Search Domains Response: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-search-domains_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-search-domains_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
		</section>
		<section xml:id="general_limits">
			<title>Groups and Limits</title>
			<para><?rax-fo keep-together?>
				There are two types of
				limits:
				<itemizedlist spacing="compact">
					<listitem>
						<para>
							<emphasis>absolute</emphasis>
							limits
                            &ndash;
							limits that are fixed (such as
							domain and record limits), and once
							exceeded, cannot reset
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>dynamic</emphasis>
							limits
                            &ndash;
							limits that reset after a period
							of time (such as rate limits)
						</para>
					</listitem>
				</itemizedlist>
				Each user belongs to multiple
				<emphasis>limit groups</emphasis>
				that define what
				these limits are. For example, a rate group is a
				specific type of limit group (whose type is
				<code>rate_limit</code>
				), which specifies how many
				requests a user can make in a particular
				time
				interval.
			</para>
			<para>
				The only extended operations available via the management API are:
				<itemizedlist spacing="compact">
					<listitem>
						<para>Viewing the limit groups</para>
					</listitem>
					<listitem>
						<para>Assigning users to limit groups</para>
					</listitem>
				</itemizedlist>
				You cannot change the limit group values via the API, nor can you
				add or delete limit groups.
			</para>
			<para>
				A user's limit group assignments determine the extent to which the
				user is
				allowed to exercise the public API. Limit group assignments
				can determine
				things
				like how many requests a user can make in a
				particular time interval
				(dynamic rate
				limit) or how many domains a
				user can create (absolute limit). For
				information about
				viewing and
				managing the assignments to limit groups, refer to
				<xref linkend="user_limits" />
				.
			</para>
			<para>The API operations described in this section list the absolute
				and dynamic limit
				groups for the system. </para>
			<section xml:id="list_limit_groups">
				<title>List Limit Groups</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="1">URI</td>
							<td colspan="3">Description</td>
							<td colspan="5">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&GET;
							</td>
							<td colspan="1">/groups</td>
							<td colspan="3">List all limit groups.</td>
							<td colspan="5">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/groups 
                            </td>
						</tr>
					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>200</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					),
					serviceUnavailable (
					<errorcode>503</errorcode>
					),
					unauthorized (
					<errorcode>401</errorcode>
					)
				</simpara>
				<para>This operation displays all the limit groups of
					all types, as
					shown in the following
					examples:</para>
				<example>
					<title>List Limit Groups Request: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-groups_request.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-groups_request.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Groups Request: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-groups_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-groups_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Groups Response: XML</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-groups_response.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-groups_response.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Groups Response: JSON</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-groups_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-groups_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
			<section xml:id="limit_group_types">
				<title>List Limit Group Types</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="2">URI</td>
							<td colspan="2">Description</td>
							<td colspan="5">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&GET;
							</td>
							<td colspan="2">/groups/types</td>
							<td colspan="2">List all limit group types.</td>
							<td colspan="5">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/groups/types
                            </td>
						</tr>
					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>200</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					),
					serviceUnavailable (
					<errorcode>503</errorcode>
					),
					unauthorized (
					<errorcode>401</errorcode>
					)
				</simpara>
				<para>This operation displays the different limit
					group types. A
					customer is assigned to one limit
					group of each type.</para>
				<para><?rax-fo keep-with-next?>
					Refer to the following
					examples for the list of limit group types:
				</para>
				<example>
					<title>List Limit Group Types Request: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-types_request.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-types_request.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Group Types Request: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-types_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-types_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Group Types Response: XML</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-types_response.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-types_response.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Group Types Response: JSON</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-types_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-types_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
			<section xml:id="limit_groups_of_specified_type">
				<title>List Limit Groups of a Specified Type</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="2">URI</td>
							<td colspan="3">Description</td>
							<td colspan="5">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&GET;
							</td>
							<td colspan="2">
								/groups/types/
								<parameter>type</parameter>
							</td>
							<td colspan="3">List all limit groups of a specified type.</td>
							<td colspan="5">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/groups/types/rate_limit
							</td>
						</tr>
					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>200</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					),
					serviceUnavailable (
					<errorcode>503</errorcode>
					),
					unauthorized (
					<errorcode>401</errorcode>
					)
				</simpara>
				<para>This operation displays all the limit groups of
					the specified
					type.</para>
				<para><?rax-fo keep-with-next?>
					The following examples
					show the requests and responses for all the
					limit
					groups of the type
					<code>rate_limit</code>
					:
				</para>
				<example>
					<title>List Limit Groups of Type Request: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-type-groups_request.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-type-groups_request.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Groups of Type Request: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-type-groups_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-type-groups_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Groups of Type Response: XML</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-type-groups_response.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-type-groups_response.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Limit Groups of Type Response: JSON</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-type-groups_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-type-groups_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
			<section xml:id="show_limit_group_details">
				<title>Show Details for a Limit Group</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="2">URI</td>
							<td colspan="3">Description</td>
							<td colspan="5">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&GET;
							</td>
							<td colspan="2">
								/groups/
								<parameter>group</parameter>
							</td>
							<td colspan="3">List details of the specified group.</td>
							<td colspan="5">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/groups/default_customer_group
							</td>
						</tr>
					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>200</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					),
					serviceUnavailable (
					<errorcode>503</errorcode>
					),
					unauthorized (
					<errorcode>401</errorcode>
					)
				</simpara>
				<para>This operation displays the details for a
					specified limit
					group.</para>
				<para><?rax-fo keep-with-next?>
					The following examples
					show the requests and responses to show
					details
					for the limit group
					<code>default_customer_group</code>
					:
				</para>
				<example>
					<title>Show Group Details Request: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-group_request.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-group_request.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Show Group Details Request: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-group_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-group_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Show Group Details Response: XML</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-group_response.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-group_response.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Show Group Details Response: JSON</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-limit-group_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-limit-group_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
		</section>
        <?hard-pagebreak?>
	</chapter>
	<chapter xml:id="API_Operations-d1e2264">
		<title>Extended Customer API Operations</title>
		<para>These API operations relate to support of DNS service activities
			on behalf of a
			specific customer. The scope of these operations is
			narrow, relating to the
			needs of a
			single customer. A customer might
			directly request these operations,
			however only
			Rackers are authorized
			to perform them. Rackers might also perform these
			operations to
			limit
			or terminate a specific customer's activities when that customer
			appears to be
			disrupting the overall operational environment.</para>
		<section xml:id="Public_API_Extensions">
			<title>Public API Extensions</title>
			<para>
				All operations available to customers via the public
				API (and
				described in the
				<citetitle>Cloud DNS
					Developer Guide</citetitle>
				) are duplicated in the
				Cloud DNS Management API, but with various
				extensions
				(described in
				<xref linkend="additional_data_extensions" />
				). Rather
				than duplicate the information in the public API
				specification in this document, please refer to the
				<citetitle>Cloud DNS Developer Guide</citetitle>
				for details.
			</para>
			<section xml:id="Ptr_Records">
				<title>PTR Records</title>
				PTR records may only be accessed via their IP address. As such,
				certain methods that are appicable to other record types must be
				modified to deal specifically with PTR records. Unless listed below,
				you may assume any method that works on other records will work on
				PTR records.
				<note>
					<para>
						Attempting to execute any of these functions on the public
						API will
						result in a badRequest (
						<errorcode>400</errorcode>
						) error.
					</para>
				</note>
				<section xml:id="List_PTR_Record_Details">
					<title>List PTR Record Details</title>
					<note>PTR records may only be recovered by referencing their IP
						address, and therefore may only be examined one at a time.
				</note>
					<informaltable rules="all">
						<thead>
							<tr align="center">
								<td colspan="1">Verb</td>
								<td colspan="2">URI</td>
								<td colspan="4">Description</td>
								<td colspan="4">Example</td>
							</tr>
						</thead>
						<tbody>
							<tr align="left">
								<td colspan="1">&GET;
								</td>
								<td colspan="2">
									/domains/
									<parameter>
										<replaceable>domainId</replaceable>
									</parameter>
									/records/
									<parameter>
										<replaceable>recordID</replaceable>
									</parameter>
									/
									<parameter>
										<replaceable>ipAddress</replaceable>
									</parameter>
								</td>
								<td colspan="4">List details for a specific record in the
									specified domain.
							</td>
								<td colspan="4">
									https://dns.api.mgmt.rackspacecloud.com/v1.0/1234/domains/9999999/records/PTR-6817754/192.0.2.8/
								</td>
							</tr>

						</tbody>
					</informaltable>
					<simpara>
						Normal Response Code(s):
						<returnvalue>200,202</returnvalue>
					</simpara>
					<simpara>
						Error Response Code(s): dnsFault (
						<errorcode>400</errorcode>
						,
						<errorcode>500</errorcode>
						), unauthorized (
						<errorcode>401</errorcode>
						),
						badRequest (
						<errorcode>400</errorcode>
						)
					</simpara>
					<para><?rax-fo keep-with-next?>
						This call lists details for the specified record in the specified
						domain.
					</para>
					<example>
						<title>List PTR Record Details Request: XML</title>
                    <?dbfo keep-together="auto"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-list-ptr-record_request.xml"
								parse="text">
								<xi:fallback>
									Missing code sample! <?rax fail?>
								</xi:fallback>
							</xi:include></programlisting>
					</example>
					<example>
						<title>List PTR Record Details Request: JSON</title>
                    <?dbfo keep-together="always"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-list-ptr-record_request.json"
								parse="text">
								<xi:fallback><?rax fail?>
									Missing code sample!
								</xi:fallback>
							</xi:include></programlisting>
					</example>
					<example>
						<title>List PTR Record Details Response: XML</title>
                    <?dbfo keep-together="auto"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-list-ptr-record_response.xml"
								parse="text">
								<xi:fallback>
									Missing code sample! <?rax fail?>
								</xi:fallback>
							</xi:include></programlisting>
					</example>
					<example>
						<title>List PTR Record Details Response: JSON</title>
                    <?dbfo keep-together="always"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-list-ptr-record_response.json"
								parse="text">
								<xi:fallback><?rax fail?>
									Missing code sample!
								</xi:fallback>
							</xi:include></programlisting>
					</example>
				</section>
				<section xml:id="Delete_PTR_Records">
					<title>Delete PTR Records</title>
					<note>PTR records may only be recovered by referencing their IP
						address, and therefore may only be deleted one record at a time.
					</note>
					<informaltable rules="all">
						<thead>
							<tr align="center">
								<td colspan="1">Verb</td>
								<td colspan="2">URI</td>
								<td colspan="4">Description</td>
								<td colspan="4">Example</td>
							</tr>
						</thead>
						<tbody>
							<tr align="left">
								<td colspan="1">&DELETE;
								</td>
								<td colspan="2">
									/domains/
									<parameter>
										<replaceable>domainId</replaceable>
									</parameter>
									/records/
									<parameter>
										<replaceable>recordID</replaceable>
									</parameter>
									/
									<parameter>
										<replaceable>ipAddress</replaceable>
									</parameter>
								</td>
								<td colspan="4">Delete a PTR record from the specified Domain.
								</td>
								<td colspan="4">
									https://dns.api.mgmt.rackspacecloud.com/v1.0/1234/domains/9999999/records/PTR-6817754/192.0.2.8/
								</td>
							</tr>

						</tbody>
					</informaltable>
					<simpara>
						Normal Response Code(s):
						<returnvalue>200,202</returnvalue>
					</simpara>
					<simpara>
						Error Response Code(s): dnsFault (
						<errorcode>400</errorcode>
						,
						<errorcode>500</errorcode>
						), unauthorized (
						<errorcode>401</errorcode>
						),
						badRequest (
						<errorcode>400</errorcode>
						)
					</simpara>
					<para><?rax-fo keep-with-next?>
						This call deletes a PTR record from the specified domain.
					</para>
					<para>
						When a record is deleted, any and all record data is
						immediately purged and is not recoverable via the API. So on a
						successful delete, subsequent requests for the deleted record
						should return itemNotFound (404).
				</para>
					<example>
						<title>Delete PTR Record Request: XML</title>
                    <?dbfo keep-together="auto"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-delete-ptr-record_request.xml"
								parse="text">
								<xi:fallback>
									Missing code sample! <?rax fail?>
								</xi:fallback>
							</xi:include></programlisting>
					</example>
					<example>
						<title>Delete PTR Record Request: JSON</title>
                    <?dbfo keep-together="always"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-delete-ptr-record_request.json"
								parse="text">
								<xi:fallback><?rax fail?>
									Missing code sample!
								</xi:fallback>
							</xi:include></programlisting>
					</example>
					<example>
						<title>Delete PTR Record Response: XML</title>
                    <?dbfo keep-together="auto"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-delete-ptr-record_response.xml"
								parse="text">
								<xi:fallback>
									Missing code sample! <?rax fail?>
								</xi:fallback>
							</xi:include></programlisting>
					</example>
					<example>
						<title>Delete PTR Record Response: JSON</title>
                    <?dbfo keep-together="always"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-delete-ptr-record_response.json"
								parse="text">
								<xi:fallback><?rax fail?>
									Missing code sample!
								</xi:fallback>
							</xi:include></programlisting>
					</example>
				</section>
				<section xml:id="Modify_PTR_Records">
					<title>Modify PTR Records</title>
					<note>
						<para>PTR records may only be recovered by referencing their IP
							address, and therefore only one record may be modified at a time.
						</para>
					</note>
					<informaltable rules="all">
						<thead>
							<tr align="center">
								<td colspan="1">Verb</td>
								<td colspan="2">URI</td>
								<td colspan="4">Description</td>
								<td colspan="4">Example</td>
							</tr>
						</thead>
						<tbody>
							<tr align="left">
								<td colspan="1">&PUT;
								</td>
								<td colspan="2">
									/domains/
									<parameter>
										<replaceable>domainId</replaceable>
									</parameter>
									/records/
									<parameter>
										<replaceable>recordId</replaceable>
									</parameter>
									/
									<parameter>
										<replaceable>ipAddress</replaceable>
									</parameter>
								</td>
								<td colspan="4">Modify the configuration of a record in the
									domain.
							</td>
								<td colspan="4">
									https://dns.api.mgmt.rackspacecloud.com/v1.0/1234/domains/9999999/records/PTR-6817754/192.0.2.8/
								</td>
							</tr>

						</tbody>
					</informaltable>
					<simpara>
						Normal Response Code(s):
						<returnvalue>200,202</returnvalue>
					</simpara>
					<simpara>
						Error Response Code(s): dnsFault (
						<errorcode>400</errorcode>
						,
						<errorcode>500</errorcode>
						), unauthorized (
						<errorcode>401</errorcode>
						),
						badRequest (
						<errorcode>400</errorcode>
						)
					</simpara>
					<para><?rax-fo keep-with-next?>
						This call modifies PTR record in the specified domain.
					</para>
					<example>
						<title>Modify PTR Record Request: XML</title>
                    <?dbfo keep-together="auto"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-modify-ptr-record_request.xml"
								parse="text">
								<xi:fallback>
									Missing code sample! <?rax fail?>
								</xi:fallback>
							</xi:include></programlisting>
					</example>
					<example>
						<title>Modify PTR Record Request: JSON</title>
                    <?dbfo keep-together="always"?>
						<programlisting language="xml"><xi:include
								href="../../../target/samples/mgmt-dns-modify-ptr-record_request.json"
								parse="text">
								<xi:fallback><?rax fail?>
									Missing code sample!
								</xi:fallback>
							</xi:include></programlisting>
					</example>
				</section>
			</section>
			<section xml:id="additional_data_extensions">
				<title>Additional Data Extensions</title>
				<para>
					<emphasis>User-centric</emphasis>
					operations
					(that is, operations requested by the Management
					API user
					on behalf of a customer) for the Cloud
					DNS Management API typically
					return some
					additional fields of information not available to
					users
					of the public API. The table below details
					the additional data for
					the relevant data
					types.
				</para>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="4">Data Type</td>
						</tr>
						<tr align="center">
							<th colspan="1">Name</th>
							<th colspan="3">Description</th>


						</tr>
						<tr>
							<th align="center" colspan="4">Domain</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td colspan="1">nameServer</td>
							<td colspan="3">The domain's primary name server</td>
						</tr>
						<tr>
							<td colspan="1">refresh</td>
							<td colspan="3">How long a secondary DNS server should wait before
								querying the primary DNS server for changes to the domain</td>
						</tr>
						<tr>
							<td colspan="1">updateRetry</td>
							<td colspan="3">How long a secondary DNS
								server should wait before
								retrying a
								failed query for changes to the
								domain</td>
						</tr>
						<tr>
							<td colspan="1">minTTL</td>
							<td colspan="3">The minimum TTL value for all of the domain's
								records</td>
						</tr>
						<tr>
							<td colspan="1">expiry</td>
							<td colspan="3">How long before a secondary server stops
								responding
								to queries for the domain without successful update
								from the
								primary DNS server</td>
						</tr>
						<tr>
							<td colspan="1">serialNumber</td>
							<td colspan="3">The revision number of the domain</td>
						</tr>
						<tr>
							<td colspan="1">externalOwnerId</td>
							<td colspan="3">Product line agnostic identifier for the account
								owner;
								relevent to the internal Autohost DNS Engine</td>
						</tr>
						<tr>
							<td colspan="1">createdBy</td>
							<td colspan="3">The customer number or the Racker username of the
								person
								creating the domain</td>
						</tr>
						<tr>
							<td colspan="1">updatedBy</td>
							<td colspan="3">The customer number or the Racker username of the
								last person
								to modify the domain</td>
						</tr>
						<tr align="center">
							<th align="center" colspan="4">Record</th>
						</tr>
						<tr>
							<td colspan="1">createdBy</td>
							<td colspan="3">The customer number or the Racker username of the
								person
								creating the record</td>
						</tr>
						<tr>
							<td colspan="1">updatedBy</td>
							<td colspan="3">The customer number or the Racker username of the
								last person
								to modify the record</td>
						</tr>
					</tbody>
				</informaltable>
			</section>
			<section xml:id="A_Note_About_Asynchronous_Responses">
				<title>A Note About Asynchronous Responses</title>
				<para>
					Refer to
					<link
						xlink:href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/sync_asynch_responses.html">
						synchronous versus asynchronous
						responses</link>
					in the
					<citetitle>Cloud DNS
						Developer Guide</citetitle>
					for information
					about how the Cloud DNS API handles potentially
					long-running operations.
				</para>
				<para>
					<important>
						<para>
							Unlike asynchronous operations in the
							public API, however, status
							monitor URLs
							in the Cloud DNS Management API do
							<emphasis>not</emphasis>
							include an
							account id segment,
							<emphasis>unless</emphasis>
							the user
							is listing the status of a customer's jobs
							as discussed in
							<xref linkend="list_users_jobs_status" />
							.
						</para>
					</important>
				</para>
				<example>
					<title>Status Monitor URL</title>
					<programlisting>
						https://dns.api.mgmt.rackspacecloud.com/v1.0/status/
						<parameter>jobId</parameter>
					</programlisting>
				</example>
				<para>
					The original request URL containing the account
					id (
					<code>1234</code>
					in the following example) is
					still available in the asynchronous
					response if
					the request was user-centric:
				</para>
				<example>
					<title>Fragment from Asynchronous Response Showing
						requestURL with
						Account Id</title>
					<programlisting>https://dns.api.rackspacecloud.com/v1.0/1234/domains
					</programlisting>
				</example>
				<para>
					However if the request was
					<emphasis>not</emphasis>
					user-centric (such as
					absolute limits and domain search), then the
					account id is not available, since the request was
					not performed by
					the Management API user on behalf
					of a customer.
				</para>
			</section>


			<section xml:id="Notes_on_Namespaces_for_Update_and_Create_Operations">
				<title>Notes on Namespaces for Update and Create Operations</title>
				<para>
					See the following sections in the
					<citetitle>Cloud DNS Developer
						Guide</citetitle>
					(public API documentation)
					for a detailed description of the
					respective API
					requests:
					<link
						xlink:href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/create_domains.html">
						Create Domains</link>
					,
					<link
						xlink:href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/Modify_Domain_s_-d1e3848.html">
						Modify Domains</link>
					,
					<link
						xlink:href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/Add_Records-d1e4895.html">
						Add Records</link>
					, and
					<link
						xlink:href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/Modify_Records-d1e5033.html">
						Modify Records</link>
					.
				</para>
				<important>
					<para>
						In the Management API, unlike in the public
						API, when submitting
						XML requests to Create /
						Modify Domain(s) and Add / Modify Records,
						the
						type of the domain and record element is from
						the management
						schema namespace, and must be
						explicitly specified in the request
						using the
						<code>type</code>
						attribute.
					</para>
					<para>
						In the following "Create Domain(s) Request:
						XML" example, we
						specify the type of the
						domain element as
						<code>xsi:type="ns3:domain"</code>
						and the
						type of the record element as
						<code>xsi:type="ns3:record"</code>
						. This
						is needed, because the prefix
						<code>ns3</code>
						in the XML request is bound to the Management
						API namespace
						<code>"http://docs.rackspacecloud.com/dns/api/management/v1.0"
						</code>
						,
						and the prefix
						<code>xsi</code>
						is bound to
						the XMLSchema-instance namespace
						<code>"http://www.w3.org/2001/XMLSchema-instance"</code>
						.
					</para>
					<para>This same technique applies to submitting
						all XML requests to
						Create / Modify Domain(s)
						and Add / Modify Records using the
						Management
						API. Refer to the examples that follow.</para>
				</important>
				<note>
					<para>
						Explicitly specifying the type for domain
						and record elements does
						<emphasis>not</emphasis>
						apply to json
						requests to Create / Modify Domain and Add /
						Modify
						Records.
					</para>
				</note>
				<example>
					<title>Create Domain(s) Request: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-create-domains-req_request.xml"
							parse="text">
							<xi:fallback>
								Missing code sample! <?rax fail?>
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Create Domain(s) Request: JSON</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-create-domains-req_request.json"
							parse="text">
							<xi:fallback>
								Missing code sample! <?rax fail?>
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example xml:id="create_domains_resp">
					<title>Create Domain(s) Response: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-create-domains-res_response.xml"
							parse="text">
							<xi:fallback>
								Missing code sample! <?rax fail?>
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Create Domain(s) Response: JSON</title>
                    <?dbfo keep-together="auto"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-create-domains-res_response.json"
							parse="text">
							<xi:fallback>
								Missing code sample! <?rax fail?>
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>





			<section xml:id="list_users_jobs_status">
				<title>List User's Jobs Status</title>
				<para>
					A management API user can list the status for a
					customer's jobs in
					order to support the customer.
					Refer to
					<link
						xlink:href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/viewing_status_all_asynch_jobs.html">
						Viewing Status of All Asynchronous Job
						Requests</link>
					in the
					<citetitle>Cloud DNS
						Developer Guide</citetitle>
					for information
					about jobs status listings.
				</para>
				<para>The request URL must include the user's account
					id and must be
					made to the management API
					endpoint, as shown in the examples below:
				</para>
				<example>
					<title>List User's Jobs Status Request: XML</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-get-jobs-status-no-details_request.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-get-jobs-status-no-details_request.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List User's Jobs Status Request: JSON</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-get-jobs-status-no-details_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-get-jobs-status-no-details_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
		</section>
		<section xml:id="user_limits">
			<title>User Groups</title>
			<para> The API operations described in this section list a user's
				assigned limit groups
				and manage those limit group assignments. A
				user is assigned to a set
				of default
				limit groups (one of each type)
				when the account is created. Using the
				API
				operations in this section,
				users can be custom-assigned to different groups
				and/or
				returned to
				default groups.</para>
			<section xml:id="list_users_assigned_limit_groups">
				<title>List User's Assigned Limit Groups</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="2">URI</td>
							<td colspan="4">Description</td>
							<td colspan="4">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&GET;
							</td>
							<td colspan="2">
								/
								<parameter>1234</parameter>
								/groups
							</td>
							<td colspan="4">List a user's assigned limit groups.</td>
							<td colspan="4">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/1234/groups
                            </td>
						</tr>
					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>200</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					),
					serviceUnavailable (
					<errorcode>503</errorcode>
					),
					unauthorized (
					<errorcode>401</errorcode>
					)
				</simpara>
				<para>This operation displays the limit groups to
					which a user is
					assigned.</para>
				<para>
					The following examples show the requests and
					responses to list the
					limit groups to which the
					user
					<code>1234</code>
					is assigned:
				</para>
				<example>
					<title>List Assigned Groups Request: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-user-group_request.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-user-group_request.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Assigned Groups Request: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-user-group_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-user-group_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Assigned Groups Response: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-user-group_response.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-user-group_response.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Assigned Groups Response: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-user-group_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-user-group_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
			<section xml:id="list_users_assigned_limit_group_of_specified_type">
				<title>List User's Assigned Limit Group of a Specified Type</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="2">URI</td>
							<td colspan="4">Description</td>
							<td colspan="4">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&GET;
							</td>
							<td colspan="2">
								/
								<parameter>1234</parameter>
								/groups/
								<parameter>type</parameter>
							</td>
							<td colspan="4">List a user's assigned limit group for the
								specified type of limit.</td>
							<td colspan="4">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/1234/groups/rate_limit
							</td>
						</tr>
					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>200</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					),
					serviceUnavailable (
					<errorcode>503</errorcode>
					),
					unauthorized (
					<errorcode>401</errorcode>
					)
				</simpara>
				<para>This operation displays the limit group of the
					specified type
					to which the user has been
					assigned.</para>
				<para>
					The following examples show the requests and
					responses to list the
					assigned limit group of type
					<code>rate_limit</code>
					for the user
					<code>1234</code>
					:
				</para>
				<example>
					<title>List Assigned Group of Type Request: XML</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-user-group-type_request.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-user-group-type_request.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Assigned Group of Type Request: JSON</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-user-group-type_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-user-group-type_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Assigned Group of Type Response: XML</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-user-group-type_response.xml"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-user-group-type_response.xml
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>List Assigned Group of Type Response: JSON</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-list-user-group-type_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-list-user-group-type_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
			<section xml:id="assign_user_to_limit_group">
				<title>Assign User to a Limit Group</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="2">URI</td>
							<td colspan="4">Description</td>
							<td colspan="4">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&PUT;
							</td>
							<td colspan="2">
								/
								<parameter>1234</parameter>
								/groups/
								<parameter>name</parameter>
							</td>
							<td colspan="4">Assign a user to a specified limit group.</td>
							<td colspan="4">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/1234/groups/high_limit_customer_group
							</td>
						</tr>
					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>204</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					),
					serviceUnavailable (
					<errorcode>503</errorcode>
					),
					unauthorized (
					<errorcode>401</errorcode>
					)
				</simpara>
				<para>This operation assigns a user to a specified
					limit group.
				</para>
				<para><?rax-fo keep-with-next?>
					The following examples
					show the request and response to assign the
					user
					<code>1234</code>
					to the limit group of type
					<code>high_limit_customer_group</code>
					:
				</para>
				<example>
					<title>Assign User to Limit Group Request</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-update-user-group_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-update-user-group_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Assign User to Limit Group Response</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-update-user-group_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-update-user-group_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
			<section xml:id="return_user_to_default_group_for_specific_type">
				<title>Return User to the Default Group for a Specific Type</title>
				<informaltable rules="all">
					<thead>
						<tr align="center">
							<td colspan="1">Verb</td>
							<td colspan="2">URI</td>
							<td colspan="4">Description</td>
							<td colspan="4">Example</td>
						</tr>
					</thead>
					<tbody>
						<tr align="left">
							<td colspan="1">&DELETE;
							</td>
							<td colspan="2">
								/
								<parameter>1234</parameter>
								/groups/
								<parameter>type</parameter>
							</td>
							<td colspan="4">Assign the user to the default group for the
								specified type.</td>
							<td colspan="4">
								https://dns.api.mgmt.rackspacecloud.com/v1.0/1234/groups/rate_limit
							</td>
						</tr>
					</tbody>
				</informaltable>
				<simpara>
					Normal Response Code(s):
					<returnvalue>204</returnvalue>
				</simpara>
				<simpara>
					Error Response Code(s): dnsFault (
					<errorcode>400</errorcode>
					,
					<errorcode>500</errorcode>
					),
					serviceUnavailable (
					<errorcode>503</errorcode>
					),
					unauthorized (
					<errorcode>401</errorcode>
					)
				</simpara>
				<para>This operation removes the specified user from
					any
					custom-assigned groups (groups to which they
					have been assigned
					using the Assign User to a
					Limit Group call) and returns them to the
					default
					group for the specified type.</para>
				<para>
					The following examples show the request and
					response to return the
					user
					<code>1234</code>
					to
					the default group for the type
					<code>rate_limit</code>
					:
				</para>
				<example>
					<title>Assign Default Group Request</title>
                    <?dbfo keep-together="always"?>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-delete-user-group_request.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-delete-user-group_request.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
				<example>
					<title>Assign Default Group Response</title>
					<programlisting language="xml"><xi:include
							href="../../../target/samples/mgmt-dns-delete-user-group_response.json"
							parse="text">
							<xi:fallback><?rax fail?>
								Missing Sample:
								../../../target/samples/mgmt-dns-delete-user-group_response.json
							</xi:fallback>
						</xi:include></programlisting>
				</example>
			</section>
		</section>
        <?hard-pagebreak?>
	</chapter>
</book>
